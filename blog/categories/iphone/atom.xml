<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Iphone | ThXou]]></title>
  <link href="http://www.thxou.com/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://www.thxou.com/"/>
  <updated>2016-10-12T22:11:16+02:00</updated>
  <id>http://www.thxou.com/</id>
  <author>
    <name><![CDATA[Luis Cardenas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSNotificationCenter Y Las Notificaciones]]></title>
    <link href="http://www.thxou.com/2013/02/21/nsnotificationcenter-y-las-notificaciones/"/>
    <updated>2013-02-21T14:12:51+01:00</updated>
    <id>http://www.thxou.com/2013/02/21/nsnotificationcenter-y-las-notificaciones</id>
    <content type="html"><![CDATA[<p>Vuelvo a la carga con los tutes sobre iOS después de un tiempo ausente por proyectos personales.</p>


<p>Esta vez os voy a hablar sobre otro tipo de notificaciones, diferentes a las notificaciones locales que <a href="http://www.thxou.com/2012/01/31/programando-notificaciones-locales-con-uilocalnotification/">vimos hace un tiempo</a>. Estas nuevas notificaciones básicamente encapsulan información acerca de algún tipo de evento. Hay objetos que registran estas notificaciones en lo que podemos llamar una &#8220;tabla de notificaciones&#8221;, esta tabla está administrada por un centro de notificaciones, que es un objeto <code>NSNotificationCenter</code>. Luego tenemos objetos que se registran como &#8220;Observadores&#8221; de estas notificaciones, de manera de que cuando una de estas notificaciones es lanzada, todos los observadores &#8220;se enteran&#8221; de esto y normalmente llevan a cabo alguna acción.</p>


<p>Podría parecer un poco chungo, pero no lo es para nada. Te pongo un ejemplo práctico. Imagina un portal de noticias. Los usuarios entran a este portal y pueden suscribirse a las categorías de noticias que ellos prefieran. Una vez sale una noticia relacionada con categoría a la que el usuario se ha suscrito, entonces le llega un correo electrónico avisándole que hay una nueva noticia, así el usuario puede decidir que hacer en ese momento. Pues bien, si hacemos una comparación sacamos que el usuario que se suscribe a las noticias es el &#8220;Observador&#8221;, el portal de noticias sería el &#8220;centro de notificaciones&#8221; (<code>NSNotificationCenter</code>) y el correo electrónico sería la notificación lanzada por el centro de notificaciones.</p>


<!-- more -->


<h2>A tocar código, que es lo que mola</h2>


<p>Últimamente escribir tanto texto sin una sola línea de código me da alergia, así que vamos a escribir unas cuantas líneas.</p>


<p>De toda la clase <code>NSNotificationCenter</code>, normalmente solo vamos a usar 4 métodos. El primero es para inicializar nuestro centro de notificaciones. Cada aplicación viene con uno por defecto y para acceder a el usamos un método de clase que lo que hace simplemente es crear un singleton:</p>


<p>{% codeblock lang:objc %}
NSNotificationCenter *center = [NSNotificationCenter defaultCenter];
{% endcodeblock %}</p>

<p>Ya tenemos nuestra instancia en el objeto <code>center</code>. El segundo método nos va a permitir registrar una notificación en el centro de notificaciones. A este método le pasamos el nombre de nuestra notificación y un objeto que es el que envía la notificación, normalmente <code>self</code>:</p>


<p>{% codeblock lang:objc %}
[center postNotificationName:@&ldquo;kTestNotification&rdquo; object:self];
{% endcodeblock %}</p>

<p>Se podrían separar estas notificaciones en 2 tipos: las personalizadas (como esta) y las que emite el sistema. En las que emite el sistema (por ejemplo cuando el dispositivo es girado o el teclado de un textField es mostrado), no necesitamos usar el método anterior ya que el sistema lo hace solo, nosotros solo tenemos que añadirnos como observadores de esas notificaciones y esperar, así que esto es lo que haremos ahora.</p>


<h2>Registrándonos como observadores</h2>


<p>Antes vimos el método para registrar una notificación llamada <code>kTestNotification</code> en el centro de notificaciones. Bien, ahora nos haremos &#8220;Observadores&#8221; de esta notificación para que cuando sea registrada (Osea, cuando sea ejecutado el método anterior), nosotros podamos llevar a cabo alguna acción en ese mismo instante:</p>


<p>{% codeblock lang:objc %}
[center addObserver:self
           selector:@selector(handleNotification:)
               name:@&ldquo;kTestNotification&rdquo;
             object:nil];
{% endcodeblock %}</p>

<p>El gustillo de este tipo de notificaciones para mi está en que, suponiendo el caso de que tu aplicación tenga 100 controladores, no importa en cual de estos 100 controladores registres la notificación, añadiendo tu clase como observador serás capaz de enterarte cuando sea registrada, en cualquier momento y en cualquier controlador.</p>


<p>Cuando el centro de notificaciones avisa a los observadores sobre una notificación lo hace de manera síncrona. Esto quiere decir que vas a tener que esperar primero a que todos los observadores reciban sus notificaciones antes de poder hacer algo. Esto se puede solucionar registrando las notificaciones de forma asíncrona usando <code>NSNotificationQueue</code> en vez de <code>NSNotificationCenter</code>, pero esto ya es otro tema del que hablaremos en otra oportunidad.</p>


<p>Al añadirnos como observadores también definimos un método a ejecutarse cuando la notificación sea registrada:</p>


<p>{% codeblock lang:objc %}
- (void)handleNotification:(NSNotification *)notification
{
    NSLog(@&ldquo;Hey tu!, se ha disparado la notificación!&rdquo;);
}
{% endcodeblock %}</p>

<p>Aquí simplemente mostramos por consola un texto, pero tu puedes usarlo para lo que quieras, cosas como mostrar un controlador, cerrar una conexión a Internet, etc.</p>


<h2>Liberando la memoria</h2>


<p>Lo único que nos queda ahora es liberar la memoria removiendo el observador que hemos asignado antes:</p>


<p>{% codeblock lang:objc %}
- (void)dealloc {
    // liberamos la memoria que ocupa el observador
    [[NSNotificationCenter defaultCenter] removeObserver:self];</p>

<pre><code>[super dealloc]; // quita esta línea si usas ARC
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Como vez, no estamos utilizando el objeto <code>center</code>, y a decir verdad para ahorrarte una innecesaria línea de código te recomiendo no crear un objeto <code>NSNotificationCenter</code>, sino usar la forma: <code>[[NSNotificationCenter defaultCenter] ...</code> , como en el código de arriba.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trabajando Con El Social Framework: SLRequest, Publicar en Twitter Y Obtener El Timeline]]></title>
    <link href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline/"/>
    <updated>2012-09-20T16:57:56+02:00</updated>
    <id>http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline</id>
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-20-at-14.23.29.png"><img class="size-full wp-image-2359" title="totweet-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-20-at-14.23.29.png" alt="" width="319" height="479" /></a></p>


<p>Seguint amb els tutorials sobre iOS 6, avui ens toca Twittear (o com s&#8217;escrigui) i mostrar el nostre timeline de Twitter en una aplicació.</p>




<p>Abans quan volíem comunicar-nos amb Twitter i obtenir dades i actualitzar-los calia fer una connexió a través de OAuth amb uns tokens i secret-keys, això normalment es podia digerir millor usant algun framework o classe externa que servia d&#8217;interfície de connexió entre el client i el servei. Des de l&#8217;arribada del framework de Twitter i la integració amb iOS 5 les coses es van posar extraordinàriament més fàcils, això ens va permetre l&#8217;intercanvi de dades amb Twitter en tan sol pocs passos.</p>




<p>En el Social *Framework tenim una classe anomenada <code>SLRequest</code>, molt similar a <code>TWRequest</code> del framework de twitter. Aquesta classe encapsula les propietats d&#8217;una petició HTTP en mètodes fàcils d&#8217;utilitzar, amb els quals enviem peticions a Twitter per poder obtenir i actualitzar dades dels nostres comptes configurats en el dispositiu.</p>




<p>Bàsicament enviem una petició HTTP amb uns paràmetres que configuren el que volem dur a terme en el servei, si Twitter diu que no hi ha problema, rebem una resposta amb unes dades que hem de manipular i mostrar a l&#8217;usuari, en cas contrari rebem una informació d&#8217;error.</p>


<!-- more -->


<h2>Autenticant la petició</h2>


<p>Com els deia paràgrafs enrere, abans calia usar tokens i secret-keys per autenticar-nos en Twitter i així poder validar les nostres peticions. Amb el Social Framework fem el mateix però de forma automàtica, més transparent a l&#8217;usuari, i en certa forma al desenvolupador, ja que en cap moment hem de manipular tokens.</p>




<p>Des de iOS 5 tenim el Accounts Framework, el qual proveeix un sistema centralitzat de comptes d&#8217;usuari. A través de l&#8217;es emmagatzemen tots els comptes de Twitter (I d&#8217;altres serveis) configurades en el dispositiu: informació d&#8217;usuari i contrasenya i altra, això ens permet saltar-nos aquesta típica finestra d&#8217;inici de sessió sense haver de preocupar-nos per proveir un sistema per emmagatzemar nosaltres mateixos les credencials.</p>




<p>Hi ha poques coses que podem fer sense autenticació d&#8217;usuari, i obtenir el timeline és una d&#8217;elles. No obstant això, per fer que això funcioni amb qualsevol compte, centralitzarem totes les peticions en els comptes obtinguts de la base de dades de comptes del dispositiu. Comencem:</p>




<p>El primer serà importar els frameworks:</p>


<p>{% codeblock lang:objc %}</p>

<h1>import &lt;Accounts/Accounts.h></h1>

<h1>import &lt;Social/Social.h></h1>

<p>{% endcodeblock %}</p>

<p>Després fem la màgia d&#8217;obtenir els comptes del dispositiu amb el Accounts Framework:</p>


<p>{% codeblock lang:objc %}
ACAccountStore *accountStore = [[ACAccountStore alloc] init];</p>

<p>// creguem un objecte accountType especificant que solament volem obtenir els comptes de Twitter
ACAccountType *accountType = [accountStore accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierTwitter];</p>

<p>[accountStore requestAccessToAccountsWithType:accountType
                                      options:nil
                                   completion:^(BOOL granted, NSError <em>error)
{
    if (granted)
    {
        // guardem els comptes de twitter en un array 
        NSArray </em>accountsArray = [accountStore accountsWithAccountType:accountType];
        // armem la petició aquí
    }
    else {
        NSLog(@&ldquo;Error no se pudo acceder a las cuentas: %@&rdquo;, [error localizedDescription]);
    }
}];
{% endcodeblock %}</p>

<p>El que fem aquí és crear una instància de la base de dades de comptes. Després a través de la classe <code>ACAccountType</code> diem que solament volem els comptes de Twitter, passant-li la constant  <code>ACAccountTypeIdentifierTwitter</code> com a argument en la inicialització. Tot seguit demanem accés a les comptes amb el mètode <code>requestAccessToAccountsWithType:options:completion:</code>. Aquest mètode té com a argument el bloc <code>completion:</code>, el qual és un handler (Un objecte &#8220;manipulador&#8221; per així dir-ho) en els paràmetres del qual és retornada la resposta del mètode. Si tot va bé emmagatzemem tots els comptes obtinguts en el array <code>accountsArray</code> o vam mostrar un error en cas contrari. Simple.</p>




<p>Recorda aquesta dinàmica d&#8217;executar un mètode i rebre una resposta per ser manipulada en un bloc, perquè ho veuràs molt sovint des d&#8217;ara.</p>


<h2>Construint la petició per obtenir el timeline</h2>


<p>Amb el Social Framework és definitivament molt més fàcil construir una petició HTTP. Sabem que està composta per:</p>


<ol>
    <li>Una URL que identifica l&#8217;operació que volem realitzar en el servei.</li>
    <li>Un mètode de petició, que pot ser GET, POST o DELETE.</li>
    <li>I uns paràmetres de configuració.</li>
</ol>


<p>El mètode <code>requestForServiceType:requestMethod:URL:parameters:</code> passa totes aquestes dades com els seus arguments i això ens permet crear la petició en tan sol una línia de codi si així ho desitgem.</p>




<p>El que nosaltres volem és obtenir el timeline, per tant necessitem anar a la <a title="Versión 1.1 de la API de Twitter" href="http://securelink.thxou.com/?https://dev.twitter.com/docs/api/1.1" target="_blank">documentació oficial</a> per veure el que hem d&#8217;usar. En entrar en l&#8217;enllaç i seleccionar l&#8217;operació de la qual volem veure els detalls (en aquest cas és: <code>GET</code> <code>statuses/home_timeline</code>), veurem en l&#8217;apartat <strong>Resourse Information</strong> certa informació molt important:
<p style="text-align: center;"><img class="size-full wp-image-2326 aligncenter" title="twitter-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-11-at-17.08.28.png" alt="" width="249" height="392" /></p>
Tenim el mètode de la petició (GET), el format de resposta (JSON) i l&#8217;objecte de resposta (Tweets). Després està l&#8217;apartat <strong>Resource URL</strong> que és la URL que li passarem i l&#8217;apartat <strong>Parameters</strong>, que conté els paràmetres per configurar-la. Usant aquesta informació construïm la petició:</p>


<p>{% codeblock lang:objc %}
// guardem el compte
ACAccount *twitterAccount = [accountsArray objectAtIndex:0];
self.cuenta = twitterAccount;</p>

<p>// creguem la petició
NSURL *url = [NSURL URLWithString:@&ldquo;<a href="https://api.twitter.com/1.1/statuses/home_timeline.json">https://api.twitter.com/1.1/statuses/home_timeline.json</a>&rdquo;];</p>

<p>NSDictionary *parametros = [NSDictionary dictionaryWithObjectsAndKeys:
                                @&ldquo;25&rdquo;, @&ldquo;count&rdquo;, nil];</p>

<p>SLRequest *request = [SLRequest requestForServiceType:SLServiceTypeTwitter
                                        requestMethod:SLRequestMethodGET
                                                  URL:url
                                           parameters:parametros];</p>

<p>// associem el compte a la petició
[request setAccount:twitterAccount];
{% endcodeblock %}</p>

<p>Per motius de brevetat tan solament utilitzarem el primer compte de les quals hi ha en el array.</p>




<p>He creat la propietat <code>cuenta</code> de tipus <code>ACAccount</code>, en ella emmagatzemem aquest compte per posteriorment poder enviar-la al controlador des del qual publicarem un missatge d&#8217;estat (el que és un Tweet) al nostre timeline, això més endavant.</p>




<p>Com poden veure tenim un diccionari per als paràmetres. El meu solament té una key: <code>count</code>, aquesta ens permet limitar la quantitat de tweets que ens va a retornar el timeline que per defecte és 20, però jo l&#8217;he posat a 25. En la documentació de la API estan tots els paràmetres que podem usar per configurar la petició.</p>




<p>El següent és assignar-li a la propietat <code>account</code> de la nostra petició, el compte que hem triat del array i amb la qual volem treballar per mostrar el timeline i altres coses.</p>


<h2>Enviant la petició i manipulant els resultats</h2>


<p>Una vegada construïda la petició procedim a enviar-la. Per a això usem el mètode <code>performRequestWithHandler:</code> que envia la petició i recull els resultats en el seu únic argument. Est és al seu torn un bloc, el qual és executat una vegada estan disponibles les dades de la resposta.</p>


<p>{% codeblock lang:objc %}
// realitzem la petició especificant un mètode per manipular la resposta
[request performRequestWithHandler:^(NSData <em>responseData, NSHTTPURLResponse </em>urlResponse, NSError *error)
{
    if (responseData != nil)
    {
        self.tweets = [NSJSONSerialization JSONObjectWithData:responseData
                                                      options:kNilOptions
                                                        error:&amp;error];
    }
}];
{% endcodeblock %}</p>

<p>Aquest bloc té 3 paràmetres, el més important és <code>responseData</code>, perquè és el que va a contenir els tweets. Aquests tweets estan en format JSON com vam veure abans, per tant necessitem parsearlos i així passar-los a un format manipulable en Objective-C. Per fer això existeix la classe <code>NSJSONSerialization</code>, que agafa les dades en <code>NSData</code> (en aquest cas <code>responseData</code>), els parsea i retorna. Aquestes dades retornades els emmagatzemem en el array <code>tweets</code>, que a continuació usarem per mostrar-los a l&#8217;usuari.</p>


<p>{% blockquote %}
Pots aprendre més sobre com parsear dades en format JSON i la classe <code>NSJSONSerialization</code> en el nostre pràctic tutorial sobre el tema fent <a href="http://www.thxou.com/2012/09/11/parsear-y-crear-ficheros-en-formato-json-en-ios/"><strong>clic aquí</strong></a>.
{% endblockquote %}</p>

<h2>Mostrant els resultats</h2>


<p>Bé, ja tenim fet gairebé tot el treball, ara solament ens queda mostrar els resultats, i para això tenim l&#8217;objecte <code>tweetsTableView</code>. A causa que ja tenim tots els Tweets en un array, és relativament senzill mostrar-los en el tableView, per això anem directament a implementar els mètodes convenients:</p>


<p>{% codeblock lang:objc %}
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}</p>

<ul>
<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
  return [self.tweets count];
}</p></li>
<li><p>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
  static NSString </em>CellIdentifier = @&ldquo;Cell&rdquo;;
  UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
  if (cell == nil)
  {
      cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:CellIdentifier] autorelease];
  }</p>

<p>  NSDictionary *tweet = [self.tweets objectAtIndex:indexPath.row];</p>

<p>  cell.textLabel.text = [tweet objectForKey:@&ldquo;text&rdquo;];
  cell.detailTextLabel.text = [[tweet objectForKey:@&ldquo;user&rdquo;] objectForKey:@&ldquo;screen_name&rdquo;];</p>

<p>  // carreguem les imatges dels quals envien el tweet, de forma asíncrona
  dispatch_queue_t queue = dispatch_queue_create(&ldquo;com.thxou.totweet&rdquo;, NULL);
  dispatch_queue_t main = dispatch_get_main_queue();</p>

<p>  dispatch_async(queue, ^{
      NSURL <em>imageURL = [NSURL URLWithString:[[tweet objectForKey:@&ldquo;user&rdquo;] objectForKey:@&ldquo;profile_image_url&rdquo;]];
      NSData </em>imageData = [NSData dataWithContentsOfURL:imageURL];
      dispatch_async(main, ^{
          cell.imageView.image = [UIImage imageWithData:imageData];
      });
  });
  dispatch_release(queue);</p>

<p>  return cell;
}
{% endcodeblock %}</p></li>
</ul>


<p>Aquí hi ha algunes línies que els sonaran a xinès, no obstant això explicaré una mica per damunt que està succeint.</p>




<p>Al parsearse les dades aquests són emmagatzemats en el array <code>tweets</code>, però els tweets dins del, són emmagatzemats en forma de diccionaris, fàcilment recuperables usant la classe <code>NSDictionary</code>. Llavors recuperem cada camp d&#8217;aquest array en un diccionari que jo he anomenat <code>tweet</code> per fer-ho més identificable (en realitat això és el que representa). Com ja saben, accedim als valors d&#8217;un diccionari a través de keys, però quines són aquestes keys?, ens anem a la <a href="https://dev.twitter.com/docs/platform-objects/tweets">documentació oficial</a> i ho mirem allí. El que fem és simplement mostrar el text del tweet com a títol i el nom &#8220;del que tweetea&#8221; com subtitulo en cada cel·la.</p>




<p>Per mostrar la imatge el que fem és usar el <strong>GCD</strong> (Grand Central Dispatch) d&#8217;Apple. A grans trets explicar-los que la descàrrega de dades de la xarxa sempre deuria ser de forma asíncrona, això és perquè és un procés que triga una mica a dur-se a terme i per tant no pot fer-se en el mateix thread (fil) ja que podem bloquejar-ho, i això deixaria inutilitzable la interfície d&#8217;usuari fins que es completi el procés, cosa que pel bé dels nostres usuaris, no volem. Doncs aquest problema ho soluciona el <strong>GCD</strong>, fent que certs mètodes s&#8217;executin de forma asíncrona (en un altre fil o thread), d&#8217;aquesta forma evitem bloquejar la interfície d&#8217;usuari.</p>


<h2>Enviant un tweet</h2>


<p>Doncs fer això és una mica més del mateix. Jo he creat un nou controlador per fer això anomenat <code>EnviarTweetViewController</code>, el qual es mostra en una finestra modal i té un TextView i dos botons: un per enviar el tweet i un altre per cancel·lar l&#8217;operació.</p>




<p>El d&#8217;enviar el tweet executa el mètode <code>enviarTweet:</code>:</p>


<p>{% codeblock lang:objc %}
- (IBAction)enviarTweet:(id)sender
{
    // comprovem si el camp per escriure el tweet no està buit
    if (![self.tweet.text isEqualToString:@&ldquo;&rdquo;])
    {
        NSURL *url = [NSURL URLWithString:@&ldquo;<a href="https://api.twitter.com/1.1/statuses/update.json">https://api.twitter.com/1.1/statuses/update.json</a>&rdquo;];</p>

<pre><code>    NSDictionary *parametros = [NSDictionary dictionaryWithObjectsAndKeys:
                                self.tweet.text, @"status", nil];

    SLRequest *request = [SLRequest requestForServiceType:SLServiceTypeTwitter
                                            requestMethod:SLRequestMethodPOST
                                                      URL:url
                                               parameters:parametros];

    // assignem el compte que usarem per publicar el tweet
    [request setAccount:self.cuenta];

     [request performRequestWithHandler:^(NSData *responseData, NSHTTPURLResponse *urlResponse, NSError *error)
     {
         NSDictionary *resultado = [NSJSONSerialization JSONObjectWithData:responseData
                                                                   options:kNilOptions
                                                                     error:&amp;error];            
     }];

    [self cancelar:nil];
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Com podeu observar es fa exactament el mateix. Tan solament canvien els paràmetres, la URL i el mètode de la petició, i tot això el podem trobar en la documentació oficial.</p>




<p>A diferència de l&#8217;anterior, aquí no accedim a tots els comptes del dispositiu, sinó que simplement passem a aquest controlador el compte que hem obtingut abans, així ens assegurem que el compte que està seleccionada és des de la qual s&#8217;envia el tweet i sobre la qual es fan les operacions sol·licitades. No hi ha misteri.</p>


<h2>Conclusió</h2>


<p>El procediment per dur a terme totes aquestes accions en Twitter porten la mateixa estructura. Tan solament varien els paràmetres, la URL i el mètode de la petició. Pel que, si volem fer qualsevol cosa,  hem d&#8217;anar a la documentació i mirar el que necessitem. Després reemplaçar les dades que hem vist abans amb els nous, enviar la petició i mostrar a l&#8217;usuari les dades obtingudes. Així de fàcil és treballar amb el Social Framework.</p>




<p>Ara pots passar-te per la <a href="http://securelink.thxou.com/?https://developer.apple.com/library/ios/documentation/Social/Reference/SLRequest_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40012234">documentació d&#8217;Apple</a> sobre aquest tema i també visitar el nostre tutorial sobre com parsear i manipular fitxers JSON de forma nativa i així estendre una mica més els teus coneixements.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/c0bb4xgyatv10t5nhvll"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trabajando Con El Social Framework De iOS 6: Publicar en Twitter Y Facebook]]></title>
    <link href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-facebook/"/>
    <updated>2012-09-20T02:00:25+02:00</updated>
    <id>http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-facebook</id>
    <content type="html"><![CDATA[<p>Aquí les traigo un tutorial bastante fresco sobre el recién nacido<strong> iOS 6</strong>. Como sabéis cada nuevo iOS trae consigo muchas novedades y este no va a ser la excepción, tenemos cientos de nuevas APIs y cambios con respecto a iOS 5, y por si fuera poco también tenemos 3 nuevos frameworks para estudiar e implementar en nuestras apps. Queda aún trabajo por hacer.</p>


<p>Hoy voy a comenzar con el primero de una serie de tutoriales para ir introduciéndonos en el mundillo de iOS 6 poco a poco. Empezaré con uno de los 3 nuevos frameworks que incluye este nuevo iOS: el <strong>Social Framework</strong>.</p>


<p>Este framework reemplaza al de Twitter y se hace más generico para ser compatible con las redes sociales de Facebook y Sina Weibo (la de los chinos). Lo genial es que implementarlo en nuestras apps es sencillo, nosotros de momento vamos a publicar nuestro estado en Twitter y Facebook a través de la interfaz nativa del framework. Tiene otras aplicaciones como mostrar el timeline y hacer follows en Twitter y cosas así, pero estas las veremos más adelante ya que son un poco (y solo un poco) más complejas.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-31-at-17.31.57.png"><img class="aligncenter size-full wp-image-2285" style="border: 2px solid black; margin-top: 15px; margin-bottom: 15px;" title="social-framework-ios6-thxou" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-31-at-17.31.57-e1346428236807.png" alt="" width="319" height="194" /></a></p>


<p>Una de las 2 clases que componen el Social Framework es <code>SLComposeViewController</code>, esta clase te permite mostrar una vista al usuario desde la cual el puede componer y publicar un mensaje en cualquiera de las redes sociales mencionadas arriba, incluyendo una imagen o URL con el mensaje.</p>


<!--more-->


<h2 dir="ltr">Empezando con iOS 6 y el framework</h2>


<p>Lo primero es tener Xcode 4.5 y el SDK de iOS 6 instalado, luego tener una cuenta de facebook y/o twitter configurada en el dispositivo.</p>


<p>Abrimos Xcode 4.5 y añadimos el <em>Social Framework</em> a nuestro proyecto. Para esto como ya sabemos nos vamos a la raiz del proyecto, seleccionamos nuestro target y en la pestaña <strong>Summary</strong> encontraremos el apartado <strong>Linked Frameworks and Libraries </strong>desde donde podemos agregarlo.</p>


<p>Acto seguido importamos en nuestro controlador la correspondiente cabecera y ya estamos listo para empezar a usarlo:</p>


<p>{% codeblock lang:objc %}</p>

<h1>import &lt;Social/Social.h></h1>

<p>{% endcodeblock %}</p>

<h2>Diferencias con el framework de Twitter</h2>


<p>Este nuevo framework es casi idéntico al anterior de Twitter, a grandes razgos la única diferencia que vamos a encontrar es en la forma de inicializar la clase, ya que en esta nueva tenemos que especificar el tipo de servicio al que nos estamos refiriendo, este servicio está definido en la propiedad <code>serviceType</code> y puede tener los siguientes valores:</p>


<ul><li><code id="jumpTo_14">SLServiceTypeFacebook</code></li><li><code id="jumpTo_15">SLServiceTypeTwitter</code></li><li><code id="jumpTo_16">SLServiceTypeSinaWeibo</code></li></ul>


<p>Uno para cada red social, vamos. Por lo tanto, mientras en el de Twitter hacíamos una inicialización normal con alloc e init, en este nuevo le pasamos el servicio, de manera que nos queda así:</p>


<p>{% codeblock lang:objc %}
SLComposeViewController *twitter = [SLComposeViewController composeViewControllerForServiceType:SLServiceTypeTwitter];
{% endcodeblock %}</p>

<p>Luego hay que hacer la comprobación de que el servicio es accesible y de si hay por lo menos una cuenta configurada para ese servicio en concreto en el dispositivo:</p>


<p>{% codeblock lang:objc %}
[SLComposeViewController isAvailableForServiceType:SLServiceTypeTwitter];
{% endcodeblock %}</p>

<p>Esto devuelve <code>YES</code> o <code>NO</code> dependiendo de la configuración que haya. Si nos devuelve <code>YES</code> vamos a mostrar la interfaz, de lo contrario mostraremos un error.</p>


<h2>Mostrando la interfaz</h2>


<p>Supongamos que todo ha ido bien hasta ahora en el código, pues ya estamos listos para mostrar al usuario la intefaz, así que primero vamos a dar algunos valores iniciales a los campos. Este paso si que es idéntico al del framework de Twitter ya que tiene las mismas propiedades con los mismos nombres:</p>


<p>{% codeblock lang:objc %}
// ponemos un texto inicial para la publicación
[twitter setInitialText:self.tvPost.text];</p>

<p>// añadimos una imagen a nuestra publicación
[twitter addImage:[UIImage imageNamed:@&ldquo;logo_thxou.png&rdquo;]];</p>

<p>// añadimos también una URL
[twitter addURL:[NSURL URLWithString:@&ldquo;<a href="http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/">http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/</a>&rdquo;]];</p>

<p>// asignamos el completionHandler para manipular los resultados del envío
[twitter setCompletionHandler:completionHandler];</p>

<p>// por último mostramos la interfaz de publicación
[self presentViewController:twitter animated:YES completion:nil];
{% endcodeblock %}</p>

<p>Tener muy en cuenta de asignar las propiedades antes de presentar la vista al usuario, de lo contrario os va a retornar un <code>NO</code> y la imagen o URL no se va a cargar junto con el mensaje. También os puede retornar <code>NO</code> si la imagen es demasiado grande o si hay demasiados caracteres en la URL, no obstante esto depende de las restricciones de que Twitter y Facebook ponen en las respectivas páginas oficiales de sus APIs.</p>


<p>Hecho todo esto presentamos al usuario la interfaz como lo haríamos con cualquier controlador.</p>


<h2>Manipular los resultados</h2>


<p>Lo único que nos queda por hacer es comunicarle al usuario si se ha enviado correctamente la publicación o no, para esto tenemos los resultados del envío devueltos en el argumento <code>result</code> de la propiedad <code>completionHandler</code> de la clase. Esta propiedad es un objeto de tipo bloque y es llamada justo antes de cerrase la interfaz de envío. Ya que el bloque es lo último que se va a ejecutar, tenemos que cerrar la interfaz dentro de este bloque:</p>


<p>{% codeblock lang:objc %}
// manipulamos los mensajes de error si hay usando la propiedad completionHandler
SLComposeViewControllerCompletionHandler completionHandler = ^(SLComposeViewControllerResult result)
{
    switch (result) {
        case SLComposeViewControllerResultCancelled:
            NSLog(@&ldquo;La publicación ha sido cancelada.&rdquo;);
            break;
        case SLComposeViewControllerResultDone:
            NSLog(@&ldquo;Se ha publicado satisfactoriamente.&rdquo;);
            break;
        default:
            break;
    }</p>

<pre><code>[self dismissViewControllerAnimated:YES completion:nil];
</code></pre>

<p>};
{% endcodeblock %}</p>

<h2>Conclusión</h2>


<p>Como hemos podido observar es realmente sencillo mostrar la interfaz de envío por defecto al usuario. No obstante esto tiene sus limitaciones evidentes, como la de querer saltarse la interfaz y enviar directamente el mensaje a Twitter. En el <a href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline/">siguiente tutorial</a> veremos como hacer todo esto y alguna cosa más, es un poco más complejo, pero como veréis el framework lo hace todo mucho más sencillo y hace mucho trabajo por nosotros.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/qv5nu4k6jh00fhttgz89"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS: Enviar Correo Electrónico Desde La Aplicación]]></title>
    <link href="http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/"/>
    <updated>2012-08-07T19:06:11+02:00</updated>
    <id>http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion</id>
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo-1.png"><img title="photo-1" src="http://www.thxou.com/wp-content/uploads/2012/08/photo-1-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo-1.png"><br /> </a></p>


<p>Mientras trabajaba en mi aplicación <a href="http://itunes.apple.com/us/app/listed/id461792168?ls=1&amp;mt=8">Listed</a> quise que los usuarios pudieran enviar sus listas por correo, y la verdad pensé que iba a ser difícil de hacer pero no fue así.</p>


<p>Apple provee una clase llamada <code>MFMailComposeViewController</code> dentro del framework <em>MessageUI</em> que hace muy sencillo el hecho de enviar correos sin tener que salir de la aplicación siquiera, esto, a través de la misma interfaz que usas en la aplicación Mail. Además te permite definir el contenido inicial de los campos del correo y también enviar uno o varios archivos adjuntos, como también provee de funcionalidad para responder a los eventos del usuario como enviar, cancelar o guardar un mensaje de correo.</p>


<p>La aplicación que toca esta vez va a permitir a los usuarios enviar un correo electrónico desde la aplicación. Usando el único método del delegado <code>MFMailComposeViewControllerDelegate</code>, vamos a mostrar al usuario mensajes dependiendo de si el correo se ha enviado, cancelado, guardado en borradores o ha fallado en el envío.</p>


<p>[note]<strong>Nota:</strong>Es importante resaltar que cuando hablo de envío, me refiero a que el correo ha sido puesto en la cola de envío (carpeta de Salida en Mail), <strong>no que ya se ha enviado</strong>. Lo mismo para cuando cancelamos el envío, en realidad quiere decir que el correo no se ha puesto en la cola de envío.[/note]</p>


<h2>Preparando el terreno</h2>


<p>Para este proyecto he creado uno de tipo <em>Single View Application</em> y le he puesto de nombre &#8221;<em>emailMe</em>&#8221;.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-07-at-16.02.39.png"><img title="framwork-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-07-at-16.02.39.png" alt="" width="258" height="96" /></a></p>


<p>Lo primero que haremos será añadir el framework <em>MessageUI</em> a nuestra aplicación, luego vamos a definir un <em>Outlet</em> <code>UILabel</code> y una acción, así como también hacemos a <em>ViewController</em> <a href="http://www.thxou.com/2012/04/29/aprendiendo-sobre-delegacion-protocolos-y-la-clase-uialertview/">conforme al protocolo</a> <code>MFMailComposeViewControllerDelegate</code>. Para esto vamos al fichero ViewController.h y ponemos el siguiente código:</p>


<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h&gt;</h1>

<h1>import &lt;MessageUI/MessageUI.h&gt;</h1>

<p>@interface ViewController : UIViewControler &lt;MFMailComposeViewControllerDelegate&gt;
{
    UILabel  *estado;
}</p>

<p>@property (nonatomic, retain) IBOutlet UILabel *estado;</p>

<ul>
<li>(IBAction)enviarCorreo:(id)sender;</li>
</ul>


<p>@end
{% endcodeblock %}</p>

<p>Acto seguido pasamos a la interfaz de usuario, así que abrimos el fichero <em>ViewController.xib</em> y añadimos simplemente 2 objetos, uno de tipo <code>UIButton</code> y otro <code>UILabel</code>. El botón es para abrir la ventana modal desde donde escribiremos el correo y el label es para mostrar el estado del envío. Una vez añadidos, conectamos el <code>UILabel</code> con el código. Hacemos esto presionando la tecla <em>Ctrl</em> y arrastrando el cursor desde el <em>File&#8217;s Owner</em> hasta el objeto <code>UILabel</code> en el Interface Builder y luego seleccionando el correspondiente de la lista que aparece.</p>


<h2>Implementación de la funcionalidad</h2>


<p>Hay un método al que siempre tenemos que llamar antes de mostrar la interfaz de envío de correo, y es: <code>canSendMail</code>, este nos va a servir para verificar si el dispositivo del usuario está habilitado para usar esta característica. En caso contrario, yo he decidido mostrar una alerta diciendo que el dispositivo no soporta el envío de correo.</p>


<p>Abrimos el ViewController.m para implementar nuestro método creado anteriormente:</p>


<p>{% codeblock lang:objc %}
@synthetize estado;</p>

<ul>
<li><p>(IBAction)enviarCorreo:(id)sender
{
  // verificamos si es posible enviar correo desde este dispositivo
  if ([MFMailComposeViewController canSendMail])
  {
      MFMailComposeViewController *email = [[[MFMailComposeViewController alloc] init] autorelease];</p>

<pre><code>  email.mailComposeDelegate = self;

  // definimos el asunto del correo
  [email setSubject:@"Te envío una Web que mola"];

  // definimos el contenido inicial del correo
  NSMutableString *cuerpo = [[NSMutableString alloc] init];
</code></pre>

<p>        [cuerpo appendString:@&ldquo;Hey!, he encontrado esta web y me ha gustado : )&lt;br /&gt;&lt;br /&gt;&lt;a href=&lsquo;<a href="http://www.thxou.com">http://www.thxou.com</a>&rsquo;&gt;<a href="http://www.thxou.com&amp;lt;/a&amp;gt;">http://www.thxou.com&amp;lt;/a&amp;gt;</a>&rdquo;];</p>

<pre><code>  // asignamos el cuerpo del mensaje y le decimos que lo interprete como HTML
  [email setMessageBody:cuerpo isHTML:YES];
  [cuerpo release];

  // adjuntamos una imagen desde nuestro bundle
  UIImage *imagen = [UIImage imageNamed:@"logo-thxou.png"];
  NSData *imagenData = UIImagePNGRepresentation(imagen);
  [email addAttachmentData:imagenData mimeType:@"image/png" fileName:@"thxoulogo"];

  // mostramos la ventana modal con la interfaz de envío de correo
  [self presentViewController:email animated:YES completion:nil];
</code></pre>

<p>  }
  else {
      // mostramos una alerta si el dispositivo no puede enviar correo
      UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@&ldquo;Error&rdquo;
                                                      message:NSLocalizedString(@&ldquo;Tu dispositivo no soporta esta característica&rdquo;, nil)
                                                     delegate:nil
                                            cancelButtonTitle:@&ldquo;OK&rdquo;
                                            otherButtonTitles:nil];
      [alert show];
      [alert release];
  }
}
{% endcodeblock %}</p></li>
</ul>


<p>Como veis es muy sencillo implementar esta funcionalidad en una aplicación, con lo poco que hemos escrito ya es posible enviar un correo, no obstante aún nos falta la parte de manipular los eventos que dije al principio.</p>


<p>El método <code>setMessageBody:isHTML:</code> como puedes observar te permite asignar un contenido inicial para el correo. Si deseas que este contenido sea interpretado como código HTML, lo haces a través etiqueta <code>isHTML:</code>, la cual te permite especificarlo.</p>


<p>Luego tenemos el método <code>addAttachmentData:mimeType:fileName:</code> que nos va a permitir enviar datos adjuntos al correo. El primer argumento requiere un objeto de tipo <code>NSData</code>, así que lo que sea que queramos enviar tiene que estar primero convertido a este tipo de datos, en mi caso el logo de la web en formato <em>.png</em>.</p>


<p>El segundo argumento (<code>mimeType:</code>) es el tipo MIME del archivo que vamos a enviar, esto no te lo tienes que inventar ya que es un stardard predefinido y puedes ver el tipo MIME correspondiente a tu archivo en <a href="http://www.iana.org/assignments/media-types/">http://www.iana.org/assignments/media-types/</a>. El tercer argumento es simplemente el nombre que deseas que tenga el archivo cuando sea transferido a su destino. Puedes repetir este método para cada uno de los archivos que desees adjuntar.</p>


<p>Hay otros métodos como <code>setToRecipients:</code>, <code>setCcRecipients:</code> y <code>setBccRecipients:</code> que cumplen exactamente la misma función que en un correo ordinario.</p>


<h2>Manipulando el resultado del envío</h2>


<p>Como se puede ver en la línea 8 del código de arriba, asignamos como delegado a la clase <em>ViewController</em>, por lo tanto esta va a ser la encargada de cerrar la ventana desde donde enviamos el correo y manipular los resultados del envío, por lo tanto se espera que también implemente el método delegado <code>mailComposeController:didFinishWithResult:error:</code> de la clase <code>MFMailComposeViewControllerDelegate</code>. Nosotros si lo haremos:</p>


<p>{% codeblock lang:objc %}
- (void)mailComposeController:(MFMailComposeViewController<em>)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError</em>)error
{
    switch (result)
    {
        case MFMailComposeResultCancelled:
            self.estado.text = @&ldquo;La operación ha sido cancelada&rdquo;;
            break;
        case MFMailComposeResultSaved:
            self.estado.text = @&ldquo;El correo ha sido guardado en la carpeta borradores&rdquo;;
            break;
        case MFMailComposeResultSent:
            self.estado.text = @&ldquo;Correo puesto en la cola de envío satisfactoriamente&rdquo;;
            break;
        case MFMailComposeResultFailed:
            self.estado.text = @&ldquo;No se ha podido enviar o guardar el correo debido a un error&rdquo;;
            break;
        default:
            break;
    }</p>

<p>    // cerramos la ventana modal de envío de correo
    [controller dismissViewControllerAnimated:YES completion:nil];
}
{% endcodeblock %}</p>

<p>Dependiendo de cual sea el evento, se devuelve un código de resultado diferente, esto nos permite personalizar la respuesta en cada caso.</p>


<h2>Conclusión</h2>


<p>Hoy hemos aprendido a enviar un mensaje de correo electrónico desde la misma aplicación. También hemos aprendido a mostrar la interfaz de envío con unos valores iniciales por defecto, así como a interceptar los mensajes de estado del envío del correo. Con respecto a esta clase, no hay mucho más que aprender, tan solo queda un par de cosas relacionadas con los mensajes de error en el método delegado, pero por lo demás, si haz comprendido bien este tutorial, ya puedes decir que dominas la clase <code>MFMailComposeViewController</code> :). No obstante para más detalle acerca de esta clase puedes pasarte por <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/MessageUI/Reference/MFMailComposeViewController_class/Reference/Reference.html#//apple_ref/occ/cl/MFMailComposeViewController">la documentación</a> un momento, que siempre viene bien.</p>


<p>Espero que les haya gustado y servido. Cualquier duda, objeción o sugerencia la espero en los comentarios.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/78f56fb99c4d9929957d"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS: Textos Con Fuente Personalizada Usando UIFont]]></title>
    <link href="http://www.thxou.com/2012/08/02/ios-textos-con-fuente-personalizada-usando-uifont/"/>
    <updated>2012-08-02T03:48:07+02:00</updated>
    <id>http://www.thxou.com/2012/08/02/ios-textos-con-fuente-personalizada-usando-uifont</id>
    <content type="html"><![CDATA[<p>Es muy probable que ya te hayas encontrado con algunas aplicaciones que no utilizan el tipo de fuente por defecto del sistema, y que esto, junto con una buena interfaz gráfica, lucen mucho mejor. No tengo ni idea como estos desarrolladores lo han hecho, pero aquí te muestro una forma sencilla de hacerlo usando un método llamado <code>fontWithName:size:</code> de la clase <code>UIFont</code>. Este método de clase nos devuelve un objeto de fuente para un nombre y tamaño personalizado y lo aplicamos a la propiedad font de algunos objetos como: <code>UILabel</code>, <code>UITextField</code>, <code>UITextView</code>, <code>UIButton</code>, etc. Las fuentes personalizadas están disponibles desde iOS 3.2 en adelante, incluido iOS 5, así que asumo que cumples los requisitos para seguir el tutorial sin problemas.</p>


<p>Vamos a crear un proyecto desde cero para mostrar paso a paso el sencillo procedimiento que hay que seguir para configurar las fuentes y luego utilizarlas. Lo primero es crear un nuevo proyecto, yo he usado un <em>Single View Application</em> y le he puesto de nombre<em> ChangeFont.</em></p>


<h2>Paso 1. Añadiendo las fuentes</h2>


<p>Una vez tengamos nuestro proyecto ya creado, vamos a buscar las fuentes que queremos utilizar dentro de nuestra aplicación. Para esto pueden ir a páginas web como <em>fontreactor</em>, que es el lugar de donde yo saqué las mías para hacer este tutorial. Las fuentes deben tener extensión <em><strong>.ttf</strong> u</em> <strong><em>.otf</em></strong>.</p>


<p>Una vez ya las tengamos descargadas, arrastramos los archivos con extensión <em>.ttf</em> u <em>.otf</em> al árbol de directorios de nuestra aplicación en XCode (El Bundle). Nos saldrá una ventana como esta:</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/copy-to-bundle.png"><img class="aligncenter  wp-image-2225" title="copy-to-bundle-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/copy-to-bundle.png" alt="" width="518" height="350" /></a></p>


<p>Si no está seleccionado desde antes, pues selecciona la opción: &#8221;<strong>Copy items into destination group&#8217;s folder (id needed)</strong>&#8221;, esto hará que las fuentes (en general cualquier fichero) se copien también en el Bundle de la aplicación y no solo se guarde una referencia a la ubicación original. Aquí también hay algo que notar, y es que en el apartado &#8221;<em>add to targets</em>&#8221;, los targets aparecen sin seleccionar. No seleccionar uno causará que no se muestren las fuentes cambiadas y esto es un problema que más tarde puede ser difícil de descubrir, por lo tanto nosotros lo seleccionaremos y luego daremos click en &#8221;<em>Finish</em>&#8221;.</p>


<p>En caso de que se te pasara por alto marcar el target en alguna otra aplicación, la solución es seleccionar en la lista de directorios de la izquierda, la raíz del proyecto. Luego seleccionar el target (ChangeFont en nuestro caso) y después ir al apartado &#8221;<strong>Build Phases</strong>&#8221; (Fases de construcción). Aquí encontraremos la fase &#8221;<strong>Copy Bundle Resourses</strong>&#8221;. Cuando la aplicación es compilada para mostrarse en el simulador (o el dispositivo), esta fase se encarga de copiar todo lo que tenemos en la lista al Bundle del ejecutable de la aplicación. Así, al no seleccionar el target anteriormente, no añadimos las fuentes a esta lista y por lo tanto le dijimos a XCode que no incluya las fuentes cuando se compile el proyecto.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-02-at-00.52.03.png"><img class="aligncenter  wp-image-2226" title="Screen Shot 2012-08-02 at 00.52.03" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-02-at-00.52.03.png" alt="" width="563" height="236" /></a></p>


<p>Así que si no lo hicimos ya, hacemos clic en el botón &#8221;<strong>+</strong>&#8221; y añadimos las fuentes al <em>Copy Bundle Resourses</em>.</p>


<h2>Paso 2. Configurar el archivo info.plist</h2>


<p>Lo siguiente será añadir una nueva <em>key</em> al archivo <em>info.plist</em> de la aplicación. Lo abrimos y añadimos una nueva entrada llamada <code>UIAppFonts</code> (Al presionar enter, cambiará automáticamente de nombre a &#8221;<em>Fonts provided by application</em>&#8221;). Esta <em>key</em> es en realidad un array, y en cada campo de este array escribiremos el nombre exacto de cada una de las fuentes que hayamos añadido a nuestro Bundle, con la extensión del fichero incluida como se puede ser en la siguiente imagen.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png"><img title="Screen Shot 2012-08-01 at 21.06.33" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png" alt="" width="499" height="118" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png"><br /> </a></p>


<p>Esto sería todo lo que a configurar las fuentes se refiere. Ahora pasemos a tocar un poco de código.</p>


<h2>Paso 3. Coding!</h2>


<p>Para mostrar los resultados de esto, he creado 5 Outlets <code>UILabel</code> y los he conectado con sus respectivos <code>UILabel</code> en el <em>Interface Builder</em>, así que lo único que nos queda es asignar a la propiedad <code>font</code> de estos labels, la fuente que queremos utilizar, y como expliqué en el primer párrafo de este artículo, esto lo hacemos a través del método <code>fontWithName:size:</code> de la clase <code>UIFont</code>:</p>


<p>{% codeblock lang:objc %}
// asignando las fuentes
[self.fuente1 setFont:[UIFont fontWithName:@&ldquo;appleberry&rdquo; size:FONT_SIZE]];
[self.fuente2 setFont:[UIFont fontWithName:@&ldquo;BilloDream&rdquo; size:FONT_SIZE]];
[self.fuente3 setFont:[UIFont fontWithName:@&ldquo;SweetHomeOklahoma&rdquo; size:FONT_SIZE]];
[self.fuente4 setFont:[UIFont fontWithName:@&ldquo;asongforjennifer&rdquo; size:FONT_SIZE]];
[self.fuente5 setFont:[UIFont fontWithName:@&ldquo;thebeautifulones&rdquo; size:FONT_SIZE]];
{% endcodeblock %}</p>

<p>Aquí viene lo interesante. Como podéis ver, en la etiqueta <code>fontWithName:</code> se muestra un nombre relacionado, pero no idéntico, al nombre de las fuentes que están en el Bundle. Bien, esto es porque el string con nombre de la fuente que se le tiene que pasar como argumento a este método no es el del nombre del fichero sino el &#8221;<strong>PostScript name</strong>&#8221;. Para saber cual es el <em>PostScript name</em> de una fuente solo tenemos que abrir la aplicación &#8221;<em>Font Book</em>&#8221; que viene con el sistema operativo (Usar spotlight para encontrarlo):</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-20.29.36.png"><img class="aligncenter  wp-image-2228" title="Font-Book-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-20.29.36.png" alt="" width="605" height="337" /></a></p>


<p>Al abrirla tenemos que seleccionar la fuente de la que queremos saber el <em>PostScript name</em> y listo, en la sección de más a la derecha veremos una descripción detallada de la fuente y en la primera línea el <em>PostScript name</em>. Si no vez el tipo de fuente que buscas es porque no la tienes instalada, así que haz doble click en el fichero de la fuente e instala, aparecerá inmediatamente.</p>


<p>Ahhh, me olvidaba, <code>FONT_SIZE</code> es una constante que he definido más arriba en el código para facilitarme las cosas por si posteriormente deseo cambiar ese valor, así me ahorro no tener que cambiarlos todos uno por uno. Pruébalo, te ahorrarás tiempo.</p>


<p>Esto es todo. Me iba a dormir pero al final he decidido terminar el tutorial :). La aplicación terminada luce así:</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo.png"><img title="custom-fonts-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/photo-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo.png"><br /> </a></p>


<p>Espero que os haya servido. En el siguiente botón pueden descargar los archivos del tutorial. No olviden compartir estos tutoriales con la mayor cantidad de gente posible a través de las redes sociales.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/532775fc78efad105994"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
</feed>
