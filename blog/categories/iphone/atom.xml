<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iPhone | Luis Cardenas ThXou]]></title>
  <link href="http://ThXou.github.io/blog/categories/iphone/atom.xml" rel="self"/>
  <link href="http://ThXou.github.io/"/>
  <updated>2014-01-28T00:55:34+01:00</updated>
  <id>http://ThXou.github.io/</id>
  <author>
    <name><![CDATA[Luis Cardenas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSNotificationCenter y las notificaciones]]></title>
    <link href="http://ThXou.github.io/2013/02/21/nsnotificationcenter-y-las-notificaciones/"/>
    <updated>2013-02-21T14:12:51+01:00</updated>
    <id>http://ThXou.github.io/2013/02/21/nsnotificationcenter-y-las-notificaciones</id>
    <content type="html"><![CDATA[<p>Vuelvo a la carga con los tutes sobre iOS después de un tiempo ausente por proyectos personales.</p>


<p>Esta vez os voy a hablar sobre otro tipo de notificaciones, diferentes a las notificaciones locales que <a href="http://www.thxou.com/2012/01/31/programando-notificaciones-locales-con-uilocalnotification/">vimos hace un tiempo</a>. Estas nuevas notificaciones básicamente encapsulan información acerca de algún tipo de evento. Hay objetos que registran estas notificaciones en lo que podemos llamar una "tabla de notificaciones", esta tabla está administrada por un centro de notificaciones, que es un objeto <code>NSNotificationCenter</code>. Luego tenemos objetos que se registran como "Observadores" de estas notificaciones, de manera de que cuando una de estas notificaciones es lanzada, todos los observadores "se enteran" de esto y normalmente llevan a cabo alguna acción.</p>


<p>Podría parecer un poco chungo, pero no lo es para nada. Te pongo un ejemplo práctico. Imagina un portal de noticias. Los usuarios entran a este portal y pueden suscribirse a las categorías de noticias que ellos prefieran. Una vez sale una noticia relacionada con categoría a la que el usuario se ha suscrito, entonces le llega un correo electrónico avisándole que hay una nueva noticia, así el usuario puede decidir que hacer en ese momento. Pues bien, si hacemos una comparación sacamos que el usuario que se suscribe a las noticias es el "Observador", el portal de noticias sería el "centro de notificaciones" (<code>NSNotificationCenter</code>) y el correo electrónico sería la notificación lanzada por el centro de notificaciones.</p>


<h2>A tocar código, que es lo que mola</h2>


<p>Últimamente escribir tanto texto sin una sola línea de código me da alergia, así que vamos a escribir unas cuantas líneas.</p>


<p>De toda la clase <code>NSNotificationCenter</code>, normalmente solo vamos a usar 4 métodos. El primero es para inicializar nuestro centro de notificaciones. Cada aplicación viene con uno por defecto y para acceder a el usamos un método de clase que lo que hace simplemente es crear un singleton:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNotificationCenter</span> <span class="o">*</span><span class="n">center</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ya tenemos nuestra instancia en el objeto <code>center</code>. El segundo método nos va a permitir registrar una notificación en el centro de notificaciones. A este método le pasamos el nombre de nuestra notificación y un objeto que es el que envía la notificación, normalmente <code>self</code>:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">center</span><span class="err"> </span><span class="nl">postNotificationName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kTestNotification</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">object:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Se podrían separar estas notificaciones en 2 tipos: las personalizadas (como esta) y las que emite el sistema. En las que emite el sistema (por ejemplo cuando el dispositivo es girado o el teclado de un textField es mostrado), no necesitamos usar el método anterior ya que el sistema lo hace solo, nosotros solo tenemos que añadirnos como observadores de esas notificaciones y esperar, así que esto es lo que haremos ahora.</p>


<h2>Registrándonos como observadores</h2>


<p>Antes vimos el método para registrar una notificación llamada <code>kTestNotification</code> en el centro de notificaciones. Bien, ahora nos haremos "Observadores" de esta notificación para que cuando sea registrada (Osea, cuando sea ejecutado el método anterior), nosotros podamos llevar a cabo alguna acción en ese mismo instante:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">center</span> <span class="nl">addObserver:</span><span class="n">self</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>       <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleNotification:</span><span class="p">)</span>
</span><span class='line'>           <span class="nl">name:</span><span class="s">@&quot;kTestNotification&quot;</span>
</span><span class='line'>         <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>El gustillo de este tipo de notificaciones para mi está en que, suponiendo el caso de que tu aplicación tenga 100 controladores, no importa en cual de estos 100 controladores registres la notificación, añadiendo tu clase como observador serás capaz de enterarte cuando sea registrada, en cualquier momento y en cualquier controlador.</p>


<p>Cuando el centro de notificaciones avisa a los observadores sobre una notificación lo hace de manera síncrona. Esto quiere decir que vas a tener que esperar primero a que todos los observadores reciban sus notificaciones antes de poder hacer algo. Esto se puede solucionar registrando las notificaciones de forma asíncrona usando <code>NSNotificationQueue</code> en vez de <code>NSNotificationCenter</code>, pero esto ya es otro tema del que hablaremos en otra oportunidad.</p>


<p>Al añadirnos como observadores también definimos un método a ejecutarse cuando la notificación sea registrada:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleNotification:</span><span class="p">(</span><span class="n">NSNotification</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="n">notification</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hey tu!, se ha disparado la notificación!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Aquí simplemente mostramos por consola un texto, pero tu puedes usarlo para lo que quieras, cosas como mostrar un controlador, cerrar una conexión a Internet, etc.</p>


<h2>Liberando la memoria</h2>


<p>Lo único que nos queda ahora es liberar la memoria removiendo el observador que hemos asignado antes:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">dealloc</span><span class="err"> </span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// liberamos la memoria que ocupa el observador</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">super</span><span class="err"> </span><span class="n">dealloc</span><span class="p">];</span> <span class="c1">// quita esta línea si usas ARC</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Como vez, no estamos utilizando el objeto <code>center</code>, y a decir verdad para ahorrarte una innecesaria línea de código te recomiendo no crear un objeto <code>NSNotificationCenter</code>, sino usar la forma: <code>[[NSNotificationCenter defaultCenter] ...</code> , como en el código de arriba.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trabajando con el Social Framework de iOS 6: Publicar en Twitter y Facebook]]></title>
    <link href="http://ThXou.github.io/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-facebook/"/>
    <updated>2012-09-20T02:00:25+02:00</updated>
    <id>http://ThXou.github.io/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-facebook</id>
    <content type="html"><![CDATA[<p>Aquí les traigo un tutorial bastante fresco sobre el recién nacido<strong> iOS 6</strong>. Como sabéis cada nuevo iOS trae consigo muchas novedades y este no va a ser la excepción, tenemos cientos de nuevas APIs y cambios con respecto a iOS 5, y por si fuera poco también tenemos 3 nuevos frameworks para estudiar e implementar en nuestras apps. Queda aún trabajo por hacer.</p>


<p>Hoy voy a comenzar con el primero de una serie de tutoriales para ir introduciéndonos en el mundillo de iOS 6 poco a poco. Empezaré con uno de los 3 nuevos frameworks que incluye este nuevo iOS: el <strong>Social Framework</strong>.</p>


<p>Este framework reemplaza al de Twitter y se hace más generico para ser compatible con las redes sociales de Facebook y Sina Weibo (la de los chinos). Lo genial es que implementarlo en nuestras apps es sencillo, nosotros de momento vamos a publicar nuestro estado en Twitter y Facebook a través de la interfaz nativa del framework. Tiene otras aplicaciones como mostrar el timeline y hacer follows en Twitter y cosas así, pero estas las veremos más adelante ya que son un poco (y solo un poco) más complejas.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-31-at-17.31.57.png"><img class="aligncenter size-full wp-image-2285" style="border: 2px solid black; margin-top: 15px; margin-bottom: 15px;" title="social-framework-ios6-thxou" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-31-at-17.31.57-e1346428236807.png" alt="" width="319" height="194" /></a></p>


<p>Una de las 2 clases que componen el Social Framework es <code>SLComposeViewController</code>, esta clase te permite mostrar una vista al usuario desde la cual el puede componer y publicar un mensaje en cualquiera de las redes sociales mencionadas arriba, incluyendo una imagen o URL con el mensaje.</p>


<h2 dir="ltr">Empezando con iOS 6 y el framework</h2>


<p>Lo primero es tener Xcode 4.5 y el SDK de iOS 6 instalado, luego tener una cuenta de facebook y/o twitter configurada en el dispositivo.</p>


<p>Abrimos Xcode 4.5 y añadimos el <em>Social Framework</em> a nuestro proyecto. Para esto como ya sabemos nos vamos a la raiz del proyecto, seleccionamos nuestro target y en la pestaña <strong>Summary</strong> encontraremos el apartado <strong>Linked Frameworks and Libraries </strong>desde donde podemos agregarlo.</p>


<p>Acto seguido importamos en nuestro controlador la correspondiente cabecera y ya estamos listo para empezar a usarlo:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Social</span><span class="o">/</span><span class="n">Social</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Diferencias con el framework de Twitter</h2>


<p>Este nuevo framework es casi idéntico al anterior de Twitter, a grandes razgos la única diferencia que vamos a encontrar es en la forma de inicializar la clase, ya que en esta nueva tenemos que especificar el tipo de servicio al que nos estamos refiriendo, este servicio está definido en la propiedad <code>serviceType</code> y puede tener los siguientes valores:</p>


<ul><li><code id="jumpTo_14">SLServiceTypeFacebook</code></li><li><code id="jumpTo_15">SLServiceTypeTwitter</code></li><li><code id="jumpTo_16">SLServiceTypeSinaWeibo</code></li></ul>


<p>Uno para cada red social, vamos. Por lo tanto, mientras en el de Twitter hacíamos una inicialización normal con alloc e init, en este nuevo le pasamos el servicio, de manera que nos queda así:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">SLComposeViewController</span> <span class="o">*</span><span class="n">twitter</span> <span class="o">=</span> <span class="p">[</span><span class="n">SLComposeViewController</span> <span class="nl">composeViewControllerForServiceType:</span><span class="n">SLServiceTypeTwitter</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Luego hay que hacer la comprobación de que el servicio es accesible y de si hay por lo menos una cuenta configurada para ese servicio en concreto en el dispositivo:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">SLComposeViewController</span> <span class="nl">isAvailableForServiceType:</span><span class="n">SLServiceTypeTwitter</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Esto devuelve <code>YES</code> o <code>NO</code> dependiendo de la configuración que haya. Si nos devuelve <code>YES</code> vamos a mostrar la interfaz, de lo contrario mostraremos un error.</p>


<h2>Mostrando la interfaz</h2>


<p>Supongamos que todo ha ido bien hasta ahora en el código, pues ya estamos listos para mostrar al usuario la intefaz, así que primero vamos a dar algunos valores iniciales a los campos. Este paso si que es idéntico al del framework de Twitter ya que tiene las mismas propiedades con los mismos nombres:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// ponemos un texto inicial para la publicación</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">setInitialText:</span><span class="n">self</span><span class="p">.</span><span class="n">tvPost</span><span class="p">.</span><span class="n">text</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// añadimos una imagen a nuestra publicación</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">addImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">logo_thxou</span><span class="p">.</span><span class="n">png</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// añadimos también una URL</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">addURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/&quot;</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/&lt;/a&gt;&amp;rdquo;]];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// asignamos el completionHandler para manipular los resultados del envío</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">setCompletionHandler:</span><span class="n">completionHandler</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// por último mostramos la interfaz de publicación</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">twitter</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Tener muy en cuenta de asignar las propiedades antes de presentar la vista al usuario, de lo contrario os va a retornar un <code>NO</code> y la imagen o URL no se va a cargar junto con el mensaje. También os puede retornar <code>NO</code> si la imagen es demasiado grande o si hay demasiados caracteres en la URL, no obstante esto depende de las restricciones de que Twitter y Facebook ponen en las respectivas páginas oficiales de sus APIs.</p>


<p>Hecho todo esto presentamos al usuario la interfaz como lo haríamos con cualquier controlador.</p>


<h2>Manipular los resultados</h2>


<p>Lo único que nos queda por hacer es comunicarle al usuario si se ha enviado correctamente la publicación o no, para esto tenemos los resultados del envío devueltos en el argumento <code>result</code> de la propiedad <code>completionHandler</code> de la clase. Esta propiedad es un objeto de tipo bloque y es llamada justo antes de cerrase la interfaz de envío. Ya que el bloque es lo último que se va a ejecutar, tenemos que cerrar la interfaz dentro de este bloque:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// manipulamos los mensajes de error si hay usando la propiedad completionHandler</span>
</span><span class='line'><span class="n">SLComposeViewControllerCompletionHandler</span> <span class="n">completionHandler</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">SLComposeViewControllerResult</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">switch</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">SLComposeViewControllerResultCancelled:</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;La publicación ha sido cancelada.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">SLComposeViewControllerResultDone:</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Se ha publicado satisfactoriamente.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Conclusión</h2>


<p>Como hemos podido observar es realmente sencillo mostrar la interfaz de envío por defecto al usuario. No obstante esto tiene sus limitaciones evidentes, como la de querer saltarse la interfaz y enviar directamente el mensaje a Twitter. En el <a href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline/">siguiente tutorial</a> veremos como hacer todo esto y alguna cosa más, es un poco más complejo, pero como veréis el framework lo hace todo mucho más sencillo y hace mucho trabajo por nosotros.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/qv5nu4k6jh00fhttgz89"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS: Enviar correo electrónico desde la aplicación]]></title>
    <link href="http://ThXou.github.io/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/"/>
    <updated>2012-08-07T19:06:11+02:00</updated>
    <id>http://ThXou.github.io/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion</id>
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo-1.png"><img title="photo-1" src="http://www.thxou.com/wp-content/uploads/2012/08/photo-1-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo-1.png"><br /> </a></p>


<p>Mientras trabajaba en mi aplicación <a href="http://itunes.apple.com/us/app/listed/id461792168?ls=1&amp;mt=8">Listed</a> quise que los usuarios pudieran enviar sus listas por correo, y la verdad pensé que iba a ser difícil de hacer pero no fue así.</p>


<p>Apple provee una clase llamada <code>MFMailComposeViewController</code> dentro del framework <em>MessageUI</em> que hace muy sencillo el hecho de enviar correos sin tener que salir de la aplicación siquiera, esto, a través de la misma interfaz que usas en la aplicación Mail. Además te permite definir el contenido inicial de los campos del correo y también enviar uno o varios archivos adjuntos, como también provee de funcionalidad para responder a los eventos del usuario como enviar, cancelar o guardar un mensaje de correo.</p>


<p>La aplicación que toca esta vez va a permitir a los usuarios enviar un correo electrónico desde la aplicación. Usando el único método del delegado <code>MFMailComposeViewControllerDelegate</code>, vamos a mostrar al usuario mensajes dependiendo de si el correo se ha enviado, cancelado, guardado en borradores o ha fallado en el envío.</p>


<p>[note]<strong>Nota:</strong>Es importante resaltar que cuando hablo de envío, me refiero a que el correo ha sido puesto en la cola de envío (carpeta de Salida en Mail), <strong>no que ya se ha enviado</strong>. Lo mismo para cuando cancelamos el envío, en realidad quiere decir que el correo no se ha puesto en la cola de envío.[/note]</p>


<h2>Preparando el terreno</h2>


<p>Para este proyecto he creado uno de tipo <em>Single View Application</em> y le he puesto de nombre "<em>emailMe</em>".</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-07-at-16.02.39.png"><img title="framwork-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-07-at-16.02.39.png" alt="" width="258" height="96" /></a></p>


<p>Lo primero que haremos será añadir el framework <em>MessageUI</em> a nuestra aplicación, luego vamos a definir un <em>Outlet</em> <code>UILabel</code> y una acción, así como también hacemos a <em>ViewController</em> <a href="http://www.thxou.com/2012/04/29/aprendiendo-sobre-delegacion-protocolos-y-la-clase-uialertview/">conforme al protocolo</a> <code>MFMailComposeViewControllerDelegate</code>. Para esto vamos al fichero ViewController.h y ponemos el siguiente código:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">UIKit</span><span class="o">/</span><span class="n">UIKit</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">import</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MessageUI</span><span class="o">/</span><span class="n">MessageUI</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">@</span><span class="n">interface</span><span class="err"> </span><span class="n">ViewController</span><span class="err"> </span><span class="o">:</span> <span class="n">UIViewControler</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MFMailComposeViewControllerDelegate</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UILabel</span><span class="err"> </span> <span class="o">*</span><span class="n">estado</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@property</span><span class="err"> </span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="kt">IBOutlet</span><span class="err"> </span><span class="n">UILabel</span><span class="err"> </span><span class="o">*</span><span class="n">estado</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">enviarCorreo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Acto seguido pasamos a la interfaz de usuario, así que abrimos el fichero <em>ViewController.xib</em> y añadimos simplemente 2 objetos, uno de tipo <code>UIButton</code> y otro <code>UILabel</code>. El botón es para abrir la ventana modal desde donde escribiremos el correo y el label es para mostrar el estado del envío. Una vez añadidos, conectamos el <code>UILabel</code> con el código. Hacemos esto presionando la tecla <em>Ctrl</em> y arrastrando el cursor desde el <em>File's Owner</em> hasta el objeto <code>UILabel</code> en el Interface Builder y luego seleccionando el correspondiente de la lista que aparece.</p>


<h2>Implementación de la funcionalidad</h2>


<p>Hay un método al que siempre tenemos que llamar antes de mostrar la interfaz de envío de correo, y es: <code>canSendMail</code>, este nos va a servir para verificar si el dispositivo del usuario está habilitado para usar esta característica. En caso contrario, yo he decidido mostrar una alerta diciendo que el dispositivo no soporta el envío de correo.</p>


<p>Abrimos el ViewController.m para implementar nuestro método creado anteriormente:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">synthetize</span> <span class="n">estado</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">enviarCorreo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// verificamos si es posible enviar correo desde este dispositivo</span>
</span><span class='line'>  <span class="k">if</span><span class="err"> </span><span class="p">([</span><span class="n">MFMailComposeViewController</span><span class="err"> </span><span class="n">canSendMail</span><span class="p">])</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">MFMailComposeViewController</span> <span class="o">*</span><span class="n">email</span><span class="err"> </span><span class="o">=</span> <span class="p">[[[</span><span class="n">MFMailComposeViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">email</span><span class="p">.</span><span class="n">mailComposeDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// definimos el asunto del correo</span>
</span><span class='line'>  <span class="p">[</span><span class="n">email</span><span class="err"> </span><span class="nl">setSubject:</span><span class="s">@&quot;Te envío una Web que mola&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// definimos el contenido inicial del correo</span>
</span><span class='line'>  <span class="n">NSMutableString</span><span class="err"> </span><span class="o">*</span><span class="n">cuerpo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableString</span><span class="err"> </span><span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">       </span> <span class="p">[</span><span class="n">cuerpo</span><span class="err"> </span><span class="nl">appendString:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hey</span><span class="o">!</span><span class="p">,</span> <span class="n">he</span> <span class="n">encontrado</span> <span class="n">esta</span> <span class="n">web</span> <span class="n">y</span> <span class="n">me</span> <span class="n">ha</span> <span class="n">gustado</span> <span class="o">:</span> <span class="p">)</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">br</span> <span class="o">/&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">br</span> <span class="o">/&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">a</span> <span class="n">href</span><span class="o">=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://www.thxou.com&quot;</span><span class="o">&gt;</span><span class="nl">http:</span><span class="c1">//www.thxou.com&lt;/a&gt;&amp;rsquo;&amp;gt;&lt;a href=&quot;http://www.thxou.com&amp;amp;lt;/a&amp;amp;gt;&quot;&gt;http://www.thxou.com&amp;amp;lt;/a&amp;amp;gt;&lt;/a&gt;&amp;rdquo;];&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="c1">// asignamos el cuerpo del mensaje y le decimos que lo interprete como HTML</span>
</span><span class='line'>  <span class="p">[</span><span class="n">email</span><span class="err"> </span><span class="nl">setMessageBody:</span><span class="n">cuerpo</span> <span class="nl">isHTML:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>  <span class="p">[</span><span class="n">cuerpo</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// adjuntamos una imagen desde nuestro bundle</span>
</span><span class='line'>  <span class="n">UIImage</span><span class="err"> </span><span class="o">*</span><span class="n">imagen</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span><span class="err"> </span><span class="nl">imageNamed:</span><span class="s">@&quot;logo-thxou.png&quot;</span><span class="p">];</span>
</span><span class='line'>  <span class="n">NSData</span><span class="err"> </span><span class="o">*</span><span class="n">imagenData</span><span class="err"> </span><span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">imagen</span><span class="p">);</span>
</span><span class='line'>  <span class="p">[</span><span class="n">email</span> <span class="nl">addAttachmentData:</span><span class="n">imagenData</span><span class="err"> </span><span class="nl">mimeType:</span><span class="s">@&quot;image/png&quot;</span> <span class="nl">fileName:</span><span class="s">@&quot;thxoulogo&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// mostramos la ventana modal con la interfaz de envío de correo</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="err"> </span><span class="nl">presentViewController:</span><span class="n">email</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="err"> </span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// mostramos una alerta si el dispositivo no puede enviar correo</span>
</span><span class='line'>      <span class="n">UIAlertView</span><span class="err"> </span><span class="o">*</span><span class="n">alert</span><span class="err"> </span><span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span><span class="err"> </span><span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Error</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>                                                      <span class="nl">message:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Tu</span> <span class="n">dispositivo</span> <span class="n">no</span> <span class="n">soporta</span> <span class="n">esta</span> <span class="n">caracter</span><span class="err">í</span><span class="n">stica</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                                     <span class="nl">delegate:</span><span class="nb">nil</span>
</span><span class='line'>                                            <span class="nl">cancelButtonTitle:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">OK</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>                                            <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">alert</span><span class="err"> </span><span class="n">show</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[</span><span class="n">alert</span><span class="err"> </span><span class="n">release</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>Como veis es muy sencillo implementar esta funcionalidad en una aplicación, con lo poco que hemos escrito ya es posible enviar un correo, no obstante aún nos falta la parte de manipular los eventos que dije al principio.</p>


<p>El método <code>setMessageBody:isHTML:</code> como puedes observar te permite asignar un contenido inicial para el correo. Si deseas que este contenido sea interpretado como código HTML, lo haces a través etiqueta <code>isHTML:</code>, la cual te permite especificarlo.</p>


<p>Luego tenemos el método <code>addAttachmentData:mimeType:fileName:</code> que nos va a permitir enviar datos adjuntos al correo. El primer argumento requiere un objeto de tipo <code>NSData</code>, así que lo que sea que queramos enviar tiene que estar primero convertido a este tipo de datos, en mi caso el logo de la web en formato <em>.png</em>.</p>


<p>El segundo argumento (<code>mimeType:</code>) es el tipo MIME del archivo que vamos a enviar, esto no te lo tienes que inventar ya que es un stardard predefinido y puedes ver el tipo MIME correspondiente a tu archivo en <a href="http://www.iana.org/assignments/media-types/">http://www.iana.org/assignments/media-types/</a>. El tercer argumento es simplemente el nombre que deseas que tenga el archivo cuando sea transferido a su destino. Puedes repetir este método para cada uno de los archivos que desees adjuntar.</p>


<p>Hay otros métodos como <code>setToRecipients:</code>, <code>setCcRecipients:</code> y <code>setBccRecipients:</code> que cumplen exactamente la misma función que en un correo ordinario.</p>


<h2>Manipulando el resultado del envío</h2>


<p>Como se puede ver en la línea 8 del código de arriba, asignamos como delegado a la clase <em>ViewController</em>, por lo tanto esta va a ser la encargada de cerrar la ventana desde donde enviamos el correo y manipular los resultados del envío, por lo tanto se espera que también implemente el método delegado <code>mailComposeController:didFinishWithResult:error:</code> de la clase <code>MFMailComposeViewControllerDelegate</code>. Nosotros si lo haremos:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">mailComposeController:</span><span class="p">(</span><span class="n">MFMailComposeViewController</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">controller</span><span class="err"> </span><span class="nl">didFinishWithResult:</span><span class="p">(</span><span class="n">MFMailComposeResult</span><span class="p">)</span><span class="n">result</span><span class="err"> </span><span class="nl">error:</span><span class="p">(</span><span class="n">NSError</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">error</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">switch</span><span class="err"> </span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">MFMailComposeResultCancelled:</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;La operación ha sido cancelada&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">MFMailComposeResultSaved:</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;El correo ha sido guardado en la carpeta borradores&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">MFMailComposeResultSent:</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Correo puesto en la cola de envío satisfactoriamente&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nl">MFMailComposeResultFailed:</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;No se ha podido enviar o guardar el correo debido a un error&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err"> </span>   <span class="c1">// cerramos la ventana modal de envío de correo&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">controller</span><span class="err"> </span><span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Dependiendo de cual sea el evento, se devuelve un código de resultado diferente, esto nos permite personalizar la respuesta en cada caso.</p>


<h2>Conclusión</h2>


<p>Hoy hemos aprendido a enviar un mensaje de correo electrónico desde la misma aplicación. También hemos aprendido a mostrar la interfaz de envío con unos valores iniciales por defecto, así como a interceptar los mensajes de estado del envío del correo. Con respecto a esta clase, no hay mucho más que aprender, tan solo queda un par de cosas relacionadas con los mensajes de error en el método delegado, pero por lo demás, si haz comprendido bien este tutorial, ya puedes decir que dominas la clase <code>MFMailComposeViewController</code> :). No obstante para más detalle acerca de esta clase puedes pasarte por <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/MessageUI/Reference/MFMailComposeViewController_class/Reference/Reference.html#//apple_ref/occ/cl/MFMailComposeViewController">la documentación</a> un momento, que siempre viene bien.</p>


<p>Espero que les haya gustado y servido. Cualquier duda, objeción o sugerencia la espero en los comentarios.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/78f56fb99c4d9929957d"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS: Textos con fuente personalizada usando UIFont]]></title>
    <link href="http://ThXou.github.io/2012/08/02/ios-textos-con-fuente-personalizada-usando-uifont/"/>
    <updated>2012-08-02T03:48:07+02:00</updated>
    <id>http://ThXou.github.io/2012/08/02/ios-textos-con-fuente-personalizada-usando-uifont</id>
    <content type="html"><![CDATA[<p>Es muy probable que ya te hayas encontrado con algunas aplicaciones que no utilizan el tipo de fuente por defecto del sistema, y que esto, junto con una buena interfaz gráfica, lucen mucho mejor. No tengo ni idea como estos desarrolladores lo han hecho, pero aquí te muestro una forma sencilla de hacerlo usando un método llamado <code>fontWithName:size:</code> de la clase <code>UIFont</code>. Este método de clase nos devuelve un objeto de fuente para un nombre y tamaño personalizado y lo aplicamos a la propiedad font de algunos objetos como: <code>UILabel</code>, <code>UITextField</code>, <code>UITextView</code>, <code>UIButton</code>, etc. Las fuentes personalizadas están disponibles desde iOS 3.2 en adelante, incluido iOS 5, así que asumo que cumples los requisitos para seguir el tutorial sin problemas.</p>


<p>Vamos a crear un proyecto desde cero para mostrar paso a paso el sencillo procedimiento que hay que seguir para configurar las fuentes y luego utilizarlas. Lo primero es crear un nuevo proyecto, yo he usado un <em>Single View Application</em> y le he puesto de nombre<em> ChangeFont.</em></p>


<h2>Paso 1. Añadiendo las fuentes</h2>


<p>Una vez tengamos nuestro proyecto ya creado, vamos a buscar las fuentes que queremos utilizar dentro de nuestra aplicación. Para esto pueden ir a páginas web como <em>fontreactor</em>, que es el lugar de donde yo saqué las mías para hacer este tutorial. Las fuentes deben tener extensión <em><strong>.ttf</strong> u</em> <strong><em>.otf</em></strong>.</p>


<p>Una vez ya las tengamos descargadas, arrastramos los archivos con extensión <em>.ttf</em> u <em>.otf</em> al árbol de directorios de nuestra aplicación en XCode (El Bundle). Nos saldrá una ventana como esta:</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/copy-to-bundle.png"><img class="aligncenter  wp-image-2225" title="copy-to-bundle-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/copy-to-bundle.png" alt="" width="518" height="350" /></a></p>


<p>Si no está seleccionado desde antes, pues selecciona la opción: "<strong>Copy items into destination group's folder (id needed)</strong>", esto hará que las fuentes (en general cualquier fichero) se copien también en el Bundle de la aplicación y no solo se guarde una referencia a la ubicación original. Aquí también hay algo que notar, y es que en el apartado "<em>add to targets</em>", los targets aparecen sin seleccionar. No seleccionar uno causará que no se muestren las fuentes cambiadas y esto es un problema que más tarde puede ser difícil de descubrir, por lo tanto nosotros lo seleccionaremos y luego daremos click en "<em>Finish</em>".</p>


<p>En caso de que se te pasara por alto marcar el target en alguna otra aplicación, la solución es seleccionar en la lista de directorios de la izquierda, la raíz del proyecto. Luego seleccionar el target (ChangeFont en nuestro caso) y después ir al apartado "<strong>Build Phases</strong>" (Fases de construcción). Aquí encontraremos la fase "<strong>Copy Bundle Resourses</strong>". Cuando la aplicación es compilada para mostrarse en el simulador (o el dispositivo), esta fase se encarga de copiar todo lo que tenemos en la lista al Bundle del ejecutable de la aplicación. Así, al no seleccionar el target anteriormente, no añadimos las fuentes a esta lista y por lo tanto le dijimos a XCode que no incluya las fuentes cuando se compile el proyecto.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-02-at-00.52.03.png"><img class="aligncenter  wp-image-2226" title="Screen Shot 2012-08-02 at 00.52.03" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-02-at-00.52.03.png" alt="" width="563" height="236" /></a></p>


<p>Así que si no lo hicimos ya, hacemos clic en el botón "<strong>+</strong>" y añadimos las fuentes al <em>Copy Bundle Resourses</em>.</p>


<h2>Paso 2. Configurar el archivo info.plist</h2>


<p>Lo siguiente será añadir una nueva <em>key</em> al archivo <em>info.plist</em> de la aplicación. Lo abrimos y añadimos una nueva entrada llamada <code>UIAppFonts</code> (Al presionar enter, cambiará automáticamente de nombre a "<em>Fonts provided by application</em>"). Esta <em>key</em> es en realidad un array, y en cada campo de este array escribiremos el nombre exacto de cada una de las fuentes que hayamos añadido a nuestro Bundle, con la extensión del fichero incluida como se puede ser en la siguiente imagen.</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png"><img title="Screen Shot 2012-08-01 at 21.06.33" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png" alt="" width="499" height="118" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png"><br /> </a></p>


<p>Esto sería todo lo que a configurar las fuentes se refiere. Ahora pasemos a tocar un poco de código.</p>


<h2>Paso 3. Coding!</h2>


<p>Para mostrar los resultados de esto, he creado 5 Outlets <code>UILabel</code> y los he conectado con sus respectivos <code>UILabel</code> en el <em>Interface Builder</em>, así que lo único que nos queda es asignar a la propiedad <code>font</code> de estos labels, la fuente que queremos utilizar, y como expliqué en el primer párrafo de este artículo, esto lo hacemos a través del método <code>fontWithName:size:</code> de la clase <code>UIFont</code>:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// asignando las fuentes</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente1</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">appleberry</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente2</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">BilloDream</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente3</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">SweetHomeOklahoma</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente4</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">asongforjennifer</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente5</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">thebeautifulones</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Aquí viene lo interesante. Como podéis ver, en la etiqueta <code>fontWithName:</code> se muestra un nombre relacionado, pero no idéntico, al nombre de las fuentes que están en el Bundle. Bien, esto es porque el string con nombre de la fuente que se le tiene que pasar como argumento a este método no es el del nombre del fichero sino el "<strong>PostScript name</strong>". Para saber cual es el <em>PostScript name</em> de una fuente solo tenemos que abrir la aplicación "<em>Font Book</em>" que viene con el sistema operativo (Usar spotlight para encontrarlo):</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-20.29.36.png"><img class="aligncenter  wp-image-2228" title="Font-Book-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-20.29.36.png" alt="" width="605" height="337" /></a></p>


<p>Al abrirla tenemos que seleccionar la fuente de la que queremos saber el <em>PostScript name</em> y listo, en la sección de más a la derecha veremos una descripción detallada de la fuente y en la primera línea el <em>PostScript name</em>. Si no vez el tipo de fuente que buscas es porque no la tienes instalada, así que haz doble click en el fichero de la fuente e instala, aparecerá inmediatamente.</p>


<p>Ahhh, me olvidaba, <code>FONT_SIZE</code> es una constante que he definido más arriba en el código para facilitarme las cosas por si posteriormente deseo cambiar ese valor, así me ahorro no tener que cambiarlos todos uno por uno. Pruébalo, te ahorrarás tiempo.</p>


<p>Esto es todo. Me iba a dormir pero al final he decidido terminar el tutorial :). La aplicación terminada luce así:</p>


<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo.png"><img title="custom-fonts-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/photo-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo.png"><br /> </a></p>


<p>Espero que os haya servido. En el siguiente botón pueden descargar los archivos del tutorial. No olviden compartir estos tutoriales con la mayor cantidad de gente posible a través de las redes sociales.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/532775fc78efad105994"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS: Usando NSUserDefaults para asignar configuraciones por defecto]]></title>
    <link href="http://ThXou.github.io/2012/07/31/ios-usando-nsuserdefaults-para-asignar-configuraciones-por-defecto/"/>
    <updated>2012-07-31T23:41:57+02:00</updated>
    <id>http://ThXou.github.io/2012/07/31/ios-usando-nsuserdefaults-para-asignar-configuraciones-por-defecto</id>
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/07/photo-1.png"><img title="MyDefaults-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/07/photo-1-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/07/photo-1.png"><br /> </a></p>


<p style="text-align: left;">Cada aplicación tiene un sistema de almacenamiento por defecto para cada usuario llamado <strong>User Default System</strong> (Desde ahora <strong>UDS</strong>), el cual está compuesto por una base de datos en la que, a través de unos parámetros y métodos, podemos almacenar y recuperar ciertos valores, que suelen ser pequeñas cantidades de datos que usamos comúnmente en nuestra aplicación. A estos valores por defecto se les llama: preferencias del usuario. Por ejemplo, podríamos querer permitirle a los usuarios elegir cuán periódicamente sincronizar ciertos datos con iCloud, este valor de tiempo lo podemos almacenar en el <strong>UDS</strong> y recuperarlo al inicio de la aplicación.</p>


<p>Podemos clasificar las preferencias de usuario en 2 categorías: las que cambian frecuentemente y las que no. En esta oportunidad trabajaremos con las que cambian frecuentemente, la otra categoría la veremos en artículos posteriores ya que requiere un poco más de profundidad.</p>


<p>La clase <code>NSUserDefaults</code> nos permite interactuar con el <strong>UDS</strong>, proveyendo diversos métodos para guardar y recuperar datos desde esta base de datos por defecto.</p>


<h2 dir="ltr">Algunas características de esta clase</h2>


<p dir="ltr">Solo existe una única instancia de esta clase por aplicación.</p>


<p>Una ventaja es el almacenamiento en caché de la información. Un sistema como éste implicaría abrir la base de datos constantemente, en concreto cada vez que el usuario pida información. Para evitar esta constante apertura, la clase almacena los datos en caché. El método <code><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html#//apple_ref/occ/instm/NSUserDefaults/synchronize">synchronize</a></code> es invocado periódicamente y se encarga de escribir los datos nuevos en caché y de actualizar los ya existentes, y esto lo hace de forma transparente al usuario. No obstante si no deseas esperar a la sincronización automática, puedes usar este método para actualizar los datos inmediatamente, teniendo cuidado de llamarlo sólo cuando hayas hecho alguna modificación. Así nos evitamos una sobrecarga de conexiones con la base de datos.</p>


<p>Otro punto importante a tener en cuenta es que todos los valores retornados desde la base de datos son inmutables (es decir, que no se pueden modificar), incluso aunque guardaras un valor mutable (por ejemplo una instancia de <code>NSMutableString</code>), al retornarlo al usuario sería inmutable.</p>


<h2 dir="ltr">Obteniendo y escribiendo datos</h2>


<p>Explicaré mejor el tema con una mini aplicación que he hecho llamada <em>MyDefaults</em>. Esta aplicación tiene ciertas características que mostrar como: la hora actual a intervalos de tiempo, un mensaje de bienvenida al inicio y la fecha y hora de la última vez que se abrió la aplicación. El primer dato que guardaremos será de tipo float y será el intervalo en segundos en el que se va a actualizar la hora; el segundo es de tipo booleano, nos permitirá definir si queremos, o no, mostrar el mensaje de bienvenida; el tercero es un string que contiene nuestro nombre para mostrarlo en el mensaje de bienvenida y en la vista principal; y el cuarto es de tipo <code>NSDate</code> para la última visita. Podremos personalizar cada uno de estos valores desde una ventana modal llamada: Preferencias.</p>


<p>Para interactuar con los datos de la base de datos, <code>NSUserDefaults</code> pone a nuestra disposición una serie de métodos de conveniencia. Ahora, qué datos se nos permite guardar y obtener?, concretamente los mismos que en una <em>Property List</em>: <code>NSString</code>, <code>NSNumber</code> (booleanos, integers, floats y doubles), <code>NSDate</code>, <code>NSArray</code> o <code>NSDictionary</code>. Para tipos diferentes a estos podemos archivarlos con <code>NSData</code>, que también nos permite datos de este tipo.</p>


<p>Como he dicho antes, solo hay una instancia de esta clase por aplicación, así que para acceder a ella usamos el método de clase <code><a href="http://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html#//apple_ref/occ/clm/NSUserDefaults/standardUserDefaults">standardUserDefaults</a>:</code></p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ya tenemos nuestra instancia de la clase, por lo tanto ya podemos obtener y guardar datos. Esto lo hacemos usando los métodos de conveniencia de los que hablé anteriormente (Al final de este artículo hay enlaces hacia la documentación para ver la relación entera de métodos disponibles). Nosotros vamos a obtener y a mostrar estos valores al iniciar el controlador <em>ViewController</em> en el método <code>viewDidLoad:</code>:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// obtenemos el nombre desde la base de datos</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">nombre</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">stringForKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kMiNombre</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// mostramos el mensaje de bienvenida con el nombre si el valor</span>
</span><span class='line'><span class="c1">// de la base de datos nos lo permite</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">mostrarMensaje</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">boolForKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kMostrarMensaje</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">mostrarMensaje</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="n">mensaje</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;MyDefaults&quot;</span>
</span><span class='line'>                                                  <span class="nl">message:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Hola %@, bienvenido a MyDefaults&quot;</span><span class="p">,</span> <span class="n">nombre</span><span class="p">]</span>
</span><span class='line'>                                                 <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                        <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;Ok&quot;</span>
</span><span class='line'>                                        <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mensaje</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">mensaje</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// obtenemos la fecha de la ultima visita</span>
</span><span class='line'><span class="n">NSDate</span> <span class="o">*</span><span class="n">ultimaVisita</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">objectForKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kUltimaVisita</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// como a esta key le asignamos por defecto nil, comprobamos que no sea (osea que haya alguna</span>
</span><span class='line'><span class="c1">// fecha), de lo contrario mostramos un mensaje alternativo</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ultimaVisita</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// formateamos la fecha y hora obtenida de la base de datos</span>
</span><span class='line'><span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">formatter</span> <span class="nl">setDateStyle:</span><span class="n">NSDateFormatterMediumStyle</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">formatter</span> <span class="nl">setTimeStyle:</span><span class="n">NSDateFormatterMediumStyle</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">lblVisita</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">formatter</span> <span class="nl">stringFromDate:</span><span class="n">ultimaVisita</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">formatter</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">self</span><span class="p">.</span><span class="n">lblVisita</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Hola, esta es la primera vez que accedes : )&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// guardamos la fecha de la última visita</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">forKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kUltimaVisita</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Como pueden observar estos métodos son muy intuitivos y son de la forma: <code><em><strong>tipo</strong></em>ForKey:</code>. Donde <em><strong>tipo</strong> </em>es el tipo de dato que quieres obtener, en nuestro caso es <code>float</code>, <code>bool</code>, <code>string</code> y <code>object</code> (para el de tipo <code>NSDate</code>). Las <em>Keys</em>, son simples strings que identifican a un valor en concreto dentro de la base de datos y no pueden haber 2 iguales. Yo he usado unos cuantos objetos <code>UILabel</code> conectados con el <em>Interface Builder</em> para mostrar estos datos de una mejor manera, como también he usado la clase <code>NSDateFormatter</code> para dar formato a la fecha que viene desde la base de datos en caso de que ya se haya guardado alguna antes. Los comentarios en verde te ayudarán a entender mejor cada parte del código.</p>


<p>Si van un poco más abajo en el código verán que hay un método llamado <code>viewWillApperar:</code>, este método es lanzado cuando la pantalla está a punto de ser mostrada. En este método usamos un objeto <code>NSTimer</code> para programar la actualización de la hora al intervalo de tiempo que hemos obtenido de la base de datos.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Cargamos el valor de la hora. Usaremos un timer para actualizar la hora cada x tiempo</span>
</span><span class='line'><span class="n">NSTimeInterval</span> <span class="n">interval</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">floatForKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kIntervaloHora</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// ponemos el timer en funcionamiento y se actualizará cada &amp;ldquo;interval&amp;rdquo; segundos</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="n">interval</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                                          <span class="nl">target:</span><span class="n">self</span>
</span><span class='line'>                                        <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">actualizaHora</span><span class="p">)</span>
</span><span class='line'>                                        <span class="nl">userInfo:</span><span class="nb">nil</span>
</span><span class='line'>                                         <span class="nl">repeats:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ya tenemos los datos mostrados en la UI (Interfaz de Usuario) para hacer todos los cambios que creamos convenientes (Hazlos!) y luego guardarlos. Para esto vamos al controlador <em>SettingsViewController</em> y ahí encontraremos el método <code>guardar:</code>, el cual, accionado por el botón <em>"Guardar"</em> de la barra de herramientas, nos guardará los datos en la caché para luego sincronizarlos, a través del método <code>syncronize</code>, con la base de datos:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">guardar:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Guardamos el intérvalo de actualización de la hora</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">setFloat:</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">txtHora</span><span class="p">.</span><span class="n">text</span> <span class="n">floatValue</span><span class="p">]</span> <span class="nl">forKey:</span><span class="s">@&quot;kIntervaloHora&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Guardamos el estado del UISwitch como un booleano</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">setBool:</span><span class="n">self</span><span class="p">.</span><span class="n">switchMsg</span><span class="p">.</span><span class="n">on</span> <span class="nl">forKey:</span><span class="s">@&quot;kMostrarMensaje&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Guardamos el nombre que hemos definido</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span><span class="n">self</span><span class="p">.</span><span class="n">txtNombre</span><span class="p">.</span><span class="n">text</span> <span class="nl">forKey:</span><span class="s">@&quot;kMiNombre&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sincronizamos la caché y la base de datos</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// cerramos la ventana modal</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">dismissModalViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Aquí usamos nuevamente métodos de conveniencia, los cuales tienen la forma: <code>set<em><strong>Tipo</strong></em>:forKey:</code>, donde <strong><em>tipo</em> </strong>puede ser de los tipos escalares (<code>integer</code>, <code>float</code>, <code>bool</code> o <code>double</code>), <code>NSUrl</code> u <code>object</code> para cualquier otro tipo de objeto de los mencionados más arriba.</p>


<p>Si nos fijamos, también tenemos redefinido el método <code>viewDidLoad:</code> como pasó en el controlador de la pantalla principal. Hacemos lo mismo, cargar los datos guardados para mostrarlos en la pantalla de preferencias.</p>


<h2>Registrando preferencias por defecto</h2>


<p>Eso sería todo con respecto a guardar y obtener datos de la base de datos del <strong>User Default System</strong>. No obstante he querido explicar brevemente como registrar preferencias por defecto para nuestra aplicación. Por ejemplo si es la primera vez que la ejecutamos, probablemente nos gustaría que la base de datos ya tenga unos valores almacenados por defecto. Esto lo hacemos en el método <code>application:didFinishLaunchingWithOptions:</code> del controlador principal <em>AppDelegate</em>, que es llamado inmediatamente después de terminar de cargar la aplicación:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">defaults</span> <span class="nl">boolForKey:</span><span class="err">@</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">kValoresGuardados</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;])</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">defaultValues</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                               <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">1.0</span><span class="p">],</span> <span class="s">@&quot;kIntervaloHora&quot;</span><span class="p">,</span>
</span><span class='line'>                               <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="s">@&quot;kMostrarMensaje&quot;</span><span class="p">,</span>
</span><span class='line'>                               <span class="s">@&quot;ThXou&quot;</span><span class="p">,</span> <span class="s">@&quot;kMiNombre&quot;</span><span class="p">,</span>
</span><span class='line'>                               <span class="nb">nil</span><span class="p">,</span> <span class="s">@&quot;kUltimaVisita&quot;</span><span class="p">,</span>
</span><span class='line'>                               <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="s">@&quot;kValoresGuardados&quot;</span><span class="p">,</span>
</span><span class='line'>                               <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">registerDefaults:</span><span class="n">defaultValues</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Al método <code>registerDefaults:</code> le pasamos un diccionario con los valores y las keys que queremos tener por defecto en nuestra base de datos al inicio de la aplicación. Es importante tener en cuenta de que para los valores de tipo escalar tenemos que usar instancias de <code>NSNumber</code> como se puede observar en el código. He añadido una nueva <em>key</em> llamada <code>@"kValoresGuardados"</code> para evitar que nos vuelva a guardar estos mismos valores cada vez que iniciemos la aplicación y que solo lo haga la primera vez.</p>


<h2>Y ahora que?</h2>


<p>Hoy hemos aprendido a usar la clase <code>NSUserDefaults</code> para a asignar preferencias y configuraciones por defecto para nuestra aplicación, así como una serie de métodos para interactuar con el <strong>User Default System</strong>. Para continuar aprendiendo sobre este tema te recomiendo que te pases <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html">por la documentación de Apple</a> acerca de esta clase y hagas todas las pruebas posibles hasta que entiendas correctamente su funcionamiento.</p>


<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/9bfb660d5c26adf2f1c1"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>

]]></content>
  </entry>
  
</feed>
