<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ThXou]]></title>
  <link href="http://www.thxou.com/atom.xml" rel="self"/>
  <link href="http://www.thxou.com/"/>
  <updated>2014-06-26T20:53:44+02:00</updated>
  <id>http://www.thxou.com/</id>
  <author>
    <name><![CDATA[Luis Cardenas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[CocoaPods: Como integrarlo en nuestros proyectos]]></title>
    <link href="http://www.thxou.com/2014/06/26/cocoapods-como-integrarlo-en-nuestros-proyectos/"/>
    
    <updated>2014-06-26T20:10:51+02:00</updated>
    <id>http://www.thxou.com/2014/06/26/cocoapods-como-integrarlo-en-nuestros-proyectos</id>
    
    <content type="html"><![CDATA[<p><div style="text-align:center;"><img src="http://www.thxou.com/wp-content/uploads/2014/06/cocoapods.png" /></div></p>

<p>CocoaPods es un herramienta de gestión de dependencias. Normalmente cuando usamos librerías de terceros, debemos copiar todos los ficheros necesarios de la librería directamente dentro de nuestro proyecto para poder utilizarla. Este modo de usar librerías tiene algunos inconvenientes, como por ejemplo que se hace difícil mantener la librería actualizada de nuevos cambios, teniendo que hacer el proceso manualmente cada vez que queramos actualizarla.</p>

<p>CocoaPods soluciona este problema proveyendo un sistema centralizado donde conviven todas las librerías, las trae a tu proyecto a petición y mantiene el entorno adecuado para el correcto control de las dependencias que puedan haber entre librerías y para que tu proyecto pueda compilar sin ningún problema.</p><!--more-->

<h2>Instalación</h2>

<p>Instalar CocoaPods y ponerse a trabajar con él es sumamente sencillo. Corre bajo Ruby, así que primero tendrías que instalar Ruby antes de CocoaPods. No obstante, si la versión de tu sistema operativo es de OS X Lion en adelante no necesitas instalar Ruby ya que este viene instalada de forma predeterminada. Aún así, es recomendable actualizar el administrador de paquetes RubyGems a la última versión. Para ello abre una ventana del Terminal y escribe el siguiente comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem update --system</span></code></pre></td></tr></table></div></figure>

<p>Una vez completado el proceso ya podemos instalar CocoaPods con el siguiente comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install cocoapods</span></code></pre></td></tr></table></div></figure>

<p>Ya casi estamos listos. Por último tenemos que ejecutar el siguiente comando. Lo que hará es copiar a tu ordenador el <a href="https://github.com/CocoaPods/Specs">repositorio de especificaciones</a> (Veremos esto de las especificaciones más adelante cuando creemos nuestra propia librería y veamos el proceso de subirlo al repositorio de CocoaPods), concretamente a la carpeta <code>~/.cocoapods/repos</code>. Si ya existe, simplemente actualizará el contenido de la carpeta:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod setup</span></code></pre></td></tr></table></div></figure>

<p>Si todo ha ido bien, entonces felicitate por el trabajo conseguido. Ya tienes CocoaPods instalado y listo para usarse.</p>

<h2>Integrando CocoaPods en nuestro proyecto</h2>

<p>Para esto vamos a crear un proyecto sencillo. Abre Xcode y ve al menú <code>File/New/Project…</code>, y elige la plantilla <code>Single View Application</code>. Ponle por nombre <code>CocoaPodsTest</code> y guardalo donde quieras, especialmente en un lugar fácil de acceder.</p>

<p>Una vez creado el proyecto, procede a cerrarlo. Si, aunque suene raro. Ya te explico el porque dentro de nada.</p>

<p>Abre una ventana del terminal y navega hacia el directorio del proyecto. Si lo guardaste en el escritorio, el comando lucirá algo así:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Desktop/CocoaPodsTest</span></code></pre></td></tr></table></div></figure>

<p>Luego ejecuta el siguiente comando (asegúrate de estar dentro del directorio del proyecto):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod init</span></code></pre></td></tr></table></div></figure>

<p>Este comando va a crear el fichero <code>Podfile</code> de tu proyecto. El fichero Podfile es el lugar donde vas a definir las librerías que usarás dentro de tu proyecto. También puedes definir varios targets y librerías diferentes para cada target. Vamos a editar este fichero para mostrar cómo añadir nuestras librerías. Para esto ábrelo usando tu editor favorito (no uses TextEdit en ningún caso).</p>

<p>Al abrirlo verás algo similar a esto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp"># Uncomment this line to define a global platform for your project</span>
</span><span class='line'><span class="cp"># platform :ios, &quot;6.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">target</span> <span class="s">&quot;CocoaPodsTest&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>Al crearse el fichero, siempre se crea especificando un target por defecto, en este caso <code>CocoaPodsTest</code>. La línea de arriba que está comentada nos dice a partir de que versión de iOS corre tu proyecto. Si tienes Xcode completamente actualizado, lo normal es que el proyecto que hayas creado al principio, corra a partir de la 7.1, por lo que tendrías que reemplazar esta línea por:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="p">,</span> <span class="s">&quot;7.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Ahora vamos a incluir nuestra primera librería. Para esto añade lo siguiente inmediatamente después de la línea <code>target "CocoaPodsTest" do</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">pod</span> <span class="err">&#39;</span><span class="n">LCAnimatedMenu</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="mf">1.0.0</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>De esta manera defines las librerías que deseas incluir en tu proyecto, una en cada línea. En este caso además de la librería, le estás diciendo a CocoaPods que versión en concreto quieres de esa librería. Puedes omitir la versión y CocoaPods incluirá la última versión disponible.</p>

<blockquote><p>Si quieres saber más acerca de la sintaxis de este fichero y sobre que configuraciones más avanzadas puedes incluir, sigue <a href="http://guides.cocoapods.org/using/the-podfile.html">este enlace</a> hacia la documentación oficial.</p></blockquote>

<p>Ahora guarda el fichero y cierra el editor.</p>

<p>El siguiente paso es decirle a CocoaPods que instale las librerias. Para esto escribe el siguiente comando en el Terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>

<p>Al finalizar el proceso de instalación saldrá un mensaje igual a este:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[!] From now on use `CocoaPodsTest.xcworkspace`.</span></code></pre></td></tr></table></div></figure>

<p>Si vas a usar CocoaPods de hoy en adelante, este es <strong>el mensaje más importante que tienes que recordar</strong>. Desde ahora, ya no abrirás más el fichero del proyecto para trabajar con él, sino el workspace que crea CocoaPods en el cual conviven todas las librería que vayas a instalar y tu proyecto también. Es por eso que más arriba te dije de cerrar el proyecto.</p>

<p>Abre el fichero <code>CocoaPodsTest.xcworkspace</code> y veamos como usar la librería que acabamos de incluir.</p>

<p>Dentro del workspace verás 2 proyectos, el tuyo y otro llamado Pods. En Pods están incluidas todas las librerías que hayas añadido y otros ficheros que no deberías de tocar jamás, a menos que sepas lo que estás haciendo, claro está. También vas a encontrar el fichero <code>Podfile</code> que editamos anteriormente. Desde ahora, cada vez que quieras añadir una librería nueva, puedes editar el fichero directamente desde Xcode.</p>

</h2>Learn To Fly</h2>

<p>Trabajar con las librerías que hemos añadido es idéntico a como lo hacíamos antes. Abre el fichero <code>ViewController.m</code> e importa la librería:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;LCAnimatedMenu.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;LCMenuItem.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Ahora que has importado las librerías a tu proyecto, hay que usar la API de la librería, exactamente como lo hacías antes. Ahora reemplaza el método <code>ViewDidLoad</code> con el siguiente trozo de código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>	
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">itemImage</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;item&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">ActionBlock</span> <span class="n">actionBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Botón presionado!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LCMenuItem</span> <span class="o">*</span><span class="n">item1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LCMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="n">itemImage</span> <span class="nl">withActionBlock:</span><span class="n">actionBlock</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LCMenuItem</span> <span class="o">*</span><span class="n">item2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LCMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="n">itemImage</span> <span class="nl">withActionBlock:</span><span class="n">actionBlock</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LCMenuItem</span> <span class="o">*</span><span class="n">item3</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LCMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage:</span><span class="n">itemImage</span> <span class="nl">withActionBlock:</span><span class="n">actionBlock</span><span class="p">];</span>
</span><span class='line'>    <span class="n">LCMenuItem</span> <span class="o">*</span><span class="n">item4</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LCMenuItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">LCAnimatedMenu</span> <span class="o">*</span><span class="n">menu</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LCAnimatedMenu</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems:</span><span class="err">@</span><span class="p">[</span><span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">menu</span><span class="p">.</span><span class="n">containerView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>En este código he incluido una imagen que obviamente no estará en el proyecto. Si quieres ver como luce puedes descargarla desde <a href="https://raw.githubusercontent.com/ThXou/LCAnimatedMenu/master/LCAnimatedMenu/Images.xcassets/item.imageset/item@2x.png">este enlace</a> y añadirla a la carpeta de <code>Images.xcassets</code> del proyecto.</p>

<p>Ya hemos terminado!. Ahora compila el proyecto para ver la librería en acción. Tan sencillo como esto.</p>

<h2>Conclusiones</h2>

<p>Tiene sus ventajas usar un administrador de dependencias como CocoaPods, la que más salta a la vista es el hecho de no tener que preocuparte del arrastre de ficheros de librerías con cada actualización, cosa que considero bastante tediosa la verdad, aunque todos sabemos que en realidad no es para tanto. No obstante hay otros beneficios como el hecho de ahorrarnos espacio dentro del proyecto y el hecho de evitarnos la tentación de modificar el código fuente de las librerías.</p>

<p>Con respecto a este último aspecto, en ocasiones me encuentro con que las librerías no se adaptan exactamente a lo que quiero, por lo que en algunos casos sí que deseo poder modificar el código (Puedes enviar una petición al desarrollador de la librería, pero claro, nunca sabes cuanto puede tardar en hacerse realidad tu deseo). Todo va a depender de tus necesidades en momentos específicos. No obstante aunque uses CocoaPods, aún puedes añadir librerías manualmente sin problemas, de modo que yo personalmente recomiendo usarlo.</p>

<p>Por último, en la segunda parte de este tutorial, aprenderemos sobre el proceso de envío de nuestra propia librería al repositorio de especificaciones de CocoaPods. Verás que es un proceso muy sencillo en un tutorial aún más corto que este.</p>

<p>Happy Coding!</p>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Encriptar strings usando encriptación AES-256 en Objective-C]]></title>
    <link href="http://www.thxou.com/2014/06/19/encriptar-strings-usando-encriptacion-aes-en-objective-c/"/>
    
    <updated>2014-06-19T20:44:40+02:00</updated>
    <id>http://www.thxou.com/2014/06/19/encriptar-strings-usando-encriptacion-aes-en-objective-c</id>
    
    <content type="html"><![CDATA[<p>Esta semana, mientras trabajaba en una aplicación, tuve la idea de &#8220;ocultar&#8221; algunos datos en forma de texto que no quería que fuesen vistos. Concretamente trabajaba con Core Data, y pues, para incrementar el nivel de seguridad, decidí encriptar ciertos datos que guardaba en Core Data, por el hecho de que cualquier usuario con Jailbreak puede ver los datos de Core Data que no han sido encriptados sin ningún problema. Esto me llevo a buscar algunas soluciones y pues, di con la encriptación AES256.</p>

<p>AES (Advanced Encryption Standard), es un algoritmo de encriptación de tipo simétrico. Esto quiere decir que se necesita una clave tanto para cifrar como para descifrar los datos encriptados. Esta clave puede ser cualquier texto que no exceda los 256 bits, pero obviamente que mientras más compleja sea la clave, más difícil será de romper mediante ataques fuerza bruta. De cara a que tu aplicación implemente capas de seguridad con cifrado, la elección de la clave es muy importante. Por ejemplo, aplicaciones geniales como 1Password utilizan este tipo de encriptación para sus datos, ya que tratan con datos tan sencibles como las tarjetas de crédito, contraseñas, etc.</p><!--more-->

<h2>Creando Nuestra Categoría</h2>

<p>Afortunadamente por internete campan unos cuantos algoritmos para implementar este tipo de encriptación en Objective-C, de manera que no tienes que implentar tu propio algoritmo, o si, a menos que seas experto en encriptación y busques hacer algo diferente. Yo encontré <a href="http://sl.thxou.com/?http://pastie.org/426530">una categoría de Objective-C</a> que hace el trabajo, lamentablemente he buscado y no he podido encontrar al autor, no obstante si lo llegas a encontrar tu, no dudes en comunicarlo.</p>

<p>Si sigues el enlace notarás que tenemos que crear la categoría para usarla en nuestro propio proyecto. Yo ya la he creado, por lo que podrás encontrarla ya implementada en el <a href="https://github.com/ThXou/AESEncryption-Tutorial">proyecto de ejemplo</a> de este tutorial. Tan solo tienes que copiar los ficheros <code>NSData+AES256.h</code> y <code>NSData+AES256.m</code> en tu propio proyecto y ya puedes empezar.</p>

<h2>Jugando con la categoría</h2>

<p>Primero que todo necesitamos importar el fichero de cabeceras para que nuestros nuevos métodos de NSData corran tranquilamente en nuestro proyecto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &quot;NSData+AES256.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Esta categoría tiene un par de método que nos servirán para encriptar y desencriptar contenido. Usan una clase llamada <code>CommonCrypto</code> creada por Apple y provista como una interfaz genérica para tipos de encriptación simétrica, como es el caso de AES. Entonces estos métodos son:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">AES256EncryptWithKey:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nf">AES256DecryptWithKey:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Hablemos del primero. Este meétodo devuelve un objeto NSData con el texto ya encriptado. Al ser el método de una categoría de NSData, necesitamos pasar nuestro string a encriptar a un objeto NSData. Con esto ya tendríamos casi hecho todo. No obstante, cuando trabajamos con Core Data, NSData es uno de los tipos que requiere algo más de trabajo al momento de usarlo, por lo que nos va a convenir más trabajar con objetos NSString que son más fáciles de manipular. Así que vamos a tener que pasar ese NSData a NSString:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">textToEncrypt</span> <span class="o">=</span> <span class="s">@&quot;A veces sueño que soy programador&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">textData</span> <span class="o">=</span> <span class="p">[</span><span class="n">textToEncrypt</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">encryptedData</span> <span class="o">=</span> <span class="p">[</span><span class="n">textData</span> <span class="nl">AES256EncryptWithKey:</span><span class="n">kEncryptionKey</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">encryptedString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">textData</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Encrypted String: %@&quot;</span><span class="p">,</span> <span class="n">encryptedString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>kEncryptionKey</code> es la clave que vas a usar para encriptar el contenido. Hay muchos sitios web que te ayudan a crear claves seguras, también puedes hacer tu propio algoritmo, eso depende de ti. En el objeto <code>encryptedData</code> tienes el texto encriptado. Al probar este código te darás cuenta que el NSLog no imprime nada. Esto es porque porque los datos encriptados con AES no se traducen bien a strings planos, por lo que puede que simplemente recibas una cadena <code>null</code>. De cara a trabajar con Core Data, es buena idea pasar el string encriptado a base64 ya que los string en base64 si que son completamente representables como caracteres ASCII y así nos evitamos cualquier inconveniente. Entonces podríamos quitar las 2 últimas líneas del código anterior y poner lo siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">base64String</span> <span class="o">=</span> <span class="p">[</span><span class="n">encryptedData</span> <span class="nl">base64EncodedStringWithOptions:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="c1">// luego puedes hacer un NSLog o guardarlo en Core Data directamente</span>
</span></code></pre></td></tr></table></div></figure>

<p>A parte de hacer la cadena encriptada fácilmente representable como string, pasarlo a base64 añade una capa más de encriptación que en algunos casos podría servir para confundir al que intente adivinar el texto. Pasarle <code>0</code> como opción, quiere decir que no queremos definir ninguna opción explicitamente.</p>

<p>Para desencriptar nuestro texto hay que proceder de manera inversa. Decodificamos el string codificado en base64 y lo pasamos a un objeto NSData, acto seguido procedemos a desencriptar los datos usando el segundo de los 2 métodos mencionados arriba y la misma clave que usamos para encriptar el texto, y luego pasamos el NSData resultante a NSString, ya sea para mostrarlo por pantalla o para lo que haga falta:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">decodedData</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSData</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBase64EncodedString:</span><span class="n">stream</span><span class="p">.</span><span class="n">url</span> <span class="nl">options:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">decryptedData</span> <span class="o">=</span> <span class="p">[</span><span class="n">decodedData</span> <span class="nl">AES256DecryptWithKey:</span><span class="n">kEncryptionKey</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">decryptedString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">decryptedData</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Decrypted String: %@&quot;</span><span class="p">,</span> <span class="n">decryptedString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>El proyecto de ejemplo que hice para este tutorial sigue exactamente el mismo patrón que he explicado anteriormente. La diferencia es que en el proyecto, una vez encriptado el texto, lo que hago es guardarlo en una entidad de Core Data, luego recupero estos datos y procedo a desencriptarlo y a mostrarlo con un NSLog:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// procedemos a encriptar el texto e imprimir el resultado</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">textToEncrypt</span> <span class="o">=</span> <span class="s">@&quot;contraseñasupersecreta&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">textData</span> <span class="o">=</span> <span class="p">[</span><span class="n">textToEncrypt</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">encryptedData</span> <span class="o">=</span> <span class="p">[</span><span class="n">textData</span> <span class="nl">AES256EncryptWithKey:</span><span class="n">kEncryptionKey</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">base64EncryptedPassword</span> <span class="o">=</span> <span class="p">[</span><span class="n">encryptedData</span> <span class="nl">base64EncodedStringWithOptions:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Contraseña Encriptada: %@&quot;</span><span class="p">,</span> <span class="n">base64EncryptedPassword</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creamos el objeto modelo y lo guardamos</span>
</span><span class='line'><span class="n">User</span> <span class="o">*</span><span class="n">user</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSEntityDescription</span> <span class="nl">insertNewObjectForEntityForName:</span><span class="s">@&quot;User&quot;</span>
</span><span class='line'>                                           <span class="nl">inManagedObjectContext:</span><span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'><span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="s">@&quot;ThXou&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">user</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">base64EncryptedPassword</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="n">saveContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ahora recuperamos el objeto que guardamos antes</span>
</span><span class='line'><span class="n">NSFetchRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFetchRequest</span> <span class="nl">fetchRequestWithEntityName:</span><span class="s">@&quot;User&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">users</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">managedObjectContext</span> <span class="nl">executeFetchRequest:</span><span class="n">request</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// desencriptamos el texto guardado y lo mostramos en pantalla</span>
</span><span class='line'><span class="n">User</span> <span class="o">*</span><span class="n">encryptedUser</span> <span class="o">=</span> <span class="n">users</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">decodedData</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSData</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBase64EncodedString:</span><span class="n">encryptedUser</span><span class="p">.</span><span class="n">password</span> <span class="nl">options:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSData</span> <span class="o">*</span><span class="n">decryptedData</span> <span class="o">=</span> <span class="p">[</span><span class="n">decodedData</span> <span class="nl">AES256DecryptWithKey:</span><span class="n">kEncryptionKey</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">decryptedString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">decryptedData</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Contraseña Desencriptada: %@&quot;</span><span class="p">,</span> <span class="n">decryptedString</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>Si aún no te has descargado el proyecto de ejemplo, hazlo desde <a href="https://github.com/ThXou/AESEncryption-Tutorial">este enlace</a>, luego ábrelo y ejecútalo. No hay configurado nada de la interfaz gráfica, por lo que solo verás los resultados en el debugger. Si todo va bien (debería), el resultado será el siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Contraseña Encriptada: JkDSEvGtzfygH8VxS3F9scomwCrdWFAHVBIbh8TpaYA=
</span><span class='line'>Contraseña Desencriptada: contraseñasupersecreta</span></code></pre></td></tr></table></div></figure>

<p>En la primera línea se puede ver la contraseña encriptada pero codificada en base64, y en la segunda la contraseña ya desencriptada. Si quieres ver el contenido codificado con base64, puedes usar alguna de las webs que hay por ahí, yo he usado <a href="http://sl.thxou.com/?http://www.base64decode.org/" target="_blank">esta</a>, pero tu puedes usar la que quieras.</p>

<h2>Un par de notas finales</h2>

<p>Esta solución de encriptación está muy bien ya que es fácil de implementar, no requiere ningún framework o librería externa porque usa las que vienen predefinidas en el sistema, pero sobre todo porque podría pasar los procesos de validación en la App Store sin tener que especificar o certificar la encriptacion.</p>

<p>Por motivos de organización, también podrías crear una nueva categoría de NSString que añada un par de métodos que te devuelvan los strings directamente en vez de tratar con NSData, sobre todo te va a ser útil si tienes que implementar encriptación en varias partes de tu proyecto.</p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Migración sencilla de modelos en Core Data]]></title>
    <link href="http://www.thxou.com/2013/11/12/migracion-sencilla-de-modelos-en-core-data/"/>
    
    <updated>2013-11-12T02:21:29+01:00</updated>
    <id>http://www.thxou.com/2013/11/12/migracion-sencilla-de-modelos-en-core-data</id>
    
    <content type="html"><![CDATA[<p>Probablemente los que ya habéis usado Core Data en vuestras aplicaciones, os habréis encontrado con que cada vez que modificas el modelo de datos, al volver a instalar la app en el simulador o dispositivo, la aplicación genera una excepción y se cierra. En el entorno de desarrollo, la solución inmediata es borrar la aplicación del simulador o dispositivo y volverla a instalar, no obstante esto no nos sirve de cara a actualizar nuestra app que ya está subida a la App Store, por razones obvias.</p><h2>El problema!</h2><p>Sucede que el sistema de almacenamiento en Core Data solo puede ser abierto por el mismo modelo que se ha usado para crearlo, es por eso que cuando cambias el modelo (añades algún atributo, entidad, etc), el modelo modificado deja de ser igual al modelo que se ha usado para crear el almacenamiento, por lo tanto, son incompatibles y el modelo nuevo resulta no apto para llevar a cabo la tarea.</p><p>La solución es llevar a cabo una migración entre versiones del modelo (la anterior y la modificada). Para hacer esta migración, Core Data usa un<strong> modelo de Mapeo</strong> que le permite saber que cambios tiene que realizar para que el nuevo modelo sea capaz de abrir el almacenamiento como lo hacía el modelo anterior.</p><p>Poniéndonos ya en materia, existen 2 tipos de migración:<strong> la migración automática</strong>, de la que hablaremos ahora, y <strong>la migración manual</strong>. Estas 2 tan solo difieren en una cosa: El modelo de mapeo usado para hacer la migración. Os paso a explicar más detalladamente el tema.</p><!-- more --><h2>Migración automática</h2><p>También se le conoce como migración ligera. Es el camino fácil para realizar la tarea, y consiste en que Core Data es quien provee el modelo de mapeo a usarse en la migración, hace esto intentando deducir los cambios que se han hecho a través de un análisis en los esquemas de los 2 modelos.</p><p>Este tipo de migración requiere que el modelo modificado tan solo haya sufrido sencillos cambios en su estructura. Ahora, que entiende Core Data como &#8220;sencillos cambios&#8221;?. Pues los siguientes:</p><ul><li>Añadir o quitar un atributo.</li><li>Cambiar la propiedad <code>optional</code> de los atributos.</li><li>Asignar un valor por defecto a un atributo.</li><li>Renombrar entidades o atributos usando el campo <em>Renaming ID</em>.</li></ul><p>Para casos más complejos es necesario usar la migración manual, en ese caso te toca a ti proveer el mapeo para la migración, proceso que se complica un poco, así que lo dejaremos para otra entrada.</p><h2>Añadiendo un nuevo modelo</h2><p>Vamos con una aplicación práctica para ver mejor como va el tema. Para esto, he creado un proyecto que usa Core Data con un modelo muy sencillo ya definido y que puedes <a href="http://sl.thxou.com/?https://app.box.com/s/2nuh2hgzxq09qtt49t5b">descargar aquí</a>.</p><p>Ya que para hacer una migración son imprescindibles 2 versiones de un modelo, vamos a crear otro diferente a la que ya tenemos en el proyecto yendo al menú <strong>Editor &gt; Add Model Version</strong>. Dejemos el nombre por defecto por esta vez y luego clic en <em>Finish</em>. Esto nos creará <em>Notes 2.xcdatamodel</em> y una especie de carpeta contenedora llamada <em>Notes.xcdatamodeld</em>, en la cual también verás incluido nuestro modelo por defecto.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-11-at-20.12.37.png"><img class="aligncenter size-full wp-image-2650" alt="Core Data Migration en ThXou" src="http://www.thxou.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-11-at-20.12.37.png" width="256" height="90" /></a></p><p>Si nos fijamos, uno de los modelos aparece con un check de color verde. Esto quiere decir que es ese el modelo que estamos usando actualmente. Como queremos usar el nuevo modelo a partir de ahora, seleccionamos la carpeta contenedora <em>Notes.xcdatamodeld</em> y en panel<em> File Inspector</em> de la derecha, en el apartado<em> Model Version</em>, cambiamos la opción<em> Current</em> a<em> Notes 2</em>, que es nuestro nuevo modelo.</p><p>Vamos a hacer un par de modificaciones a <em>Notes 2</em>. Selecciona la entidad <strong>Note</strong> y añade un nuevo atributo llamado <strong>descriptionText</strong> de tipo <strong>String</strong>. Ahora vamos a renombrar el atributo <strong>backgroundColor</strong> a solo <strong>background</strong>.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-11-at-23.58.32.png"><img class="aligncenter  wp-image-2651" alt="Core Data Migration in ThXou" src="http://www.thxou.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-11-at-23.58.32.png" width="526" height="134" /></a></p><p>Vamos a sanear cualquier error que pueda ocurrir después del cambio en el modelo de nuestra aplicación haciendo la migración, pero antes comentarte que al renombrar entidades o atributos es necesario definir el campo <em>Renaming ID</em>. Selecciona el atributo que hemos renombrado: <strong>background</strong>, y en el panel <em>Data Model Inspector</em> de la derecha, escribe en el campo <em>Renaming ID</em>, el nombre anterior del atributo, osea <strong>backgroundColor</strong> (Si no te acuerdas puedes mirar en la primera versión del modelo). Esto es obligatorio para cuando vayas a renombrar entidades o atributos.</p><p><a href="http://www.thxou.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-12-at-00.06.30.png"><img class="aligncenter size-full wp-image-2652" alt="Core Data Migration" src="http://www.thxou.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-12-at-00.06.30.png" width="254" height="83" /></a></p><h2>Haciendo la mudanza</h2><p>Lo que nos queda ahora es decirle a Core Data que haga la migración automática al iniciar la aplicación. Para esto nos tenemos que dirigir al <em>Core Data Stack</em> localizado en el fichero <em>AppDelegate.m</em>. En el vas a encontrar el método getter del Persistent Store Coordinator. Modifícalo con el siguiente código:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="p">)</span><span class="nf">persistentStoreCoordinator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">_persistentStoreCoordinator</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">applicationDocumentsDirectory</span><span class="p">]</span> <span class="nl">URLByAppendingPathComponent:</span><span class="s">@&quot;Notes.sqlite&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel:</span><span class="p">[</span><span class="n">self</span> <span class="n">managedObjectModel</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (2)</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="nl">NSMigratePersistentStoresAutomaticallyOption:</span><span class="err">@</span><span class="n">YES</span><span class="p">,</span> <span class="nl">NSInferMappingModelAutomaticallyOption:</span><span class="err">@</span><span class="n">YES</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">_persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="nb">nil</span> <span class="nl">URL:</span><span class="n">storeURL</span> <span class="nl">options:</span><span class="n">options</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// (1)</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Unresolved error %@, %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">userInfo</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">abort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">_persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Dentro hay que modificar el método <code>addPersistentStoreWithType:configuration:URL:options:error:</code>(1), que es quien crea el almacenamiento para la app, en concreto el parámetro <code>options:</code>, a quien por defecto se le pasa <code>nil</code>, pero nosotros le asignamos el diccionario <code>options</code> con las keys que van a decirle a Core Data que lleve a cabo la migración automática (2).</p><p>Hasta este punto, ya puedes poner a correr la aplicación que estés migrando, verás que todo marcha sobre ruedas. Si no te salta ningún error ni ocurre ningún problema es porque la migración se ha realizado satisfactoriamente.</p><h2>Como se si mi app puede migrar automáticamente?</h2><p>Esto es un extra, por si se te plantea la pregunta para tus proyectos. Hemos visto que hay 2 formas de hacer la migración: automática (Fácil) y manual (difícil), como saber si mi app puede migrar automáticamente?. La respuesta está en preguntarle a la clase <code>NSMappingModel</code> si es capaz o no de crear el <strong>modelo de mapeo</strong> por si mismo. Esto lo hacemos con el método<code> inferredMappingModelForSourceModel:destinationModel:error:</code>:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">miModeloPuedeMigrar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">modeloAntiguoURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;Notes&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">modeloAntiguo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">modeloAntiguoURL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">modeloNuevoURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">URLForResource:</span><span class="s">@&quot;Notes 2&quot;</span> <span class="nl">withExtension:</span><span class="s">@&quot;momd&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">modeloNuevo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectModel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithContentsOfURL:</span><span class="n">modeloNuevoURL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSMappingModel</span> <span class="o">*</span><span class="n">modeloDeMapeo</span> <span class="o">=</span>
</span><span class='line'>        <span class="p">[</span><span class="n">NSMappingModel</span> <span class="nl">inferredMappingModelForSourceModel:</span><span class="n">modeloAntiguo</span>
</span><span class='line'>                        <span class="nl">destinationModel:</span><span class="n">modeloNuevo</span> <span class="nl">error:</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// si Core Data es capaz de crear el modelo entonces </span>
</span><span class='line'>    <span class="c1">// retornamos YES de lo contrario NO</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">modeloDeMapeo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Este método lo puedes usar en el método<code> application:didFinishLaunchingWithOptions:launchOptions</code> del <em>AppDelegate.m</em>, con un <code>NSLog</code> que te devuelva SI o NO dependiendo del valor de retorno del método <code>miModeloPuedeMigrar</code>.</p>

<h2>Conclución</h2>

<p>Este tutorial, como dije antes, es para cuando tienes que hacer ciertos cambios de los listados arriba. Si lo tuyo requiere algo diferente te va a tocar optar por aprender a realizar un mapeo personalizado.</p>

<p>Ten en cuenta cuando renombres entidades, que las clases modelo asociadas no se cambian, por lo que es algo de lo que te tienes que ocupar tu manualmente o usando la herramienta de refactorización de Xcode.</p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Disponible la segunda beta de iOS 7 para desarrolladores]]></title>
    <link href="http://www.thxou.com/2013/06/25/disponible-la-segunda-beta-de-ios-7-para-desarrolladores/"/>
    
    <updated>2013-06-25T22:41:01+02:00</updated>
    <id>http://www.thxou.com/2013/06/25/disponible-la-segunda-beta-de-ios-7-para-desarrolladores</id>
    
    <content type="html"><![CDATA[<p>Ayer salió la segunda beta de iOS 7 para desarrolladores. Como se esperaba, viene con mejoras en el rendimiento y duración de la batería, así como también en el tema de la fluidez que comentaba en la entrada anterior en animaciones como la de la multitarea.</p><p>También, a diferencia de la beta 1, esta vez se ha lanzado la versión para iPad y iPad Mini, cubriendo así la totalidad de los dispositivos que faltaban y que se sabía eran compatibles con iOS 7.</p><p>Vuelve la aplicación de grabación de notas de voz retirada por Apple en la primera beta. Con la interfaz adaptada para iOS 7 y una nueva organización de las opciones que hacen un poco más fácil que antes el hecho de ver y manipular nuestras grabaciones y su duración.</p><p>Puedes descargarte la beta 2 de iOS 7 desde el la <a href="http://developer.apple.com/ios">web de desarrolladores de Apple</a> y directamente desde el dispositivo si ya tienes instalada la beta 1 a través de OTA entrando en <strong>Ajustes &gt; General &gt; Actualización de Software</strong>.</p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Un vistazo al nuevo iOS 7]]></title>
    <link href="http://www.thxou.com/2013/06/18/un-vistazo-al-nuevo-ios-7/"/>
    
    <updated>2013-06-18T11:42:00+02:00</updated>
    <id>http://www.thxou.com/2013/06/18/un-vistazo-al-nuevo-ios-7</id>
    
    <content type="html"><![CDATA[<p>El pasado lunes 10, como ya sabéis, &#8220;tito Tim&#8221; lanzó el nuevo sistema operativo <strong>iOS 7,</strong> junto con un buen puñado de novedades entre la que destaca la completamente renovada interfaz gráfica (ver imagen superior) y un conjunto de nuevas funciones que pretenden hacernos la vida más fácil a los usuarios.</p><p>Hubiera escrito antes este resumen, pero he preferido pasar unos días trasteando con la primera beta para ver que tal y poder dar una opinión más consistente sobre el nuevo OS. Así que sin mayor dilación paso a describir algunos aspectos.</p><h2>La &#8220;fluidez&#8221; del SO y la suerte de ser la beta 1</h2><p>Si hay algo que tienen las betas es que puedes mostrar al público un trasto inútil y quedarte tan ancho mientras recibes feedback. Yo soy de los que me comí las 2 horas de Keynote y también vi cuan fluido iba todo en el iPhone de pruebas, mientras mostraban el Safari, el scrolling, acceso a multitarea, etc etc., pues definitivamente ellos no tenían instalada la misma beta que el mortal desarrollador de apps se puede descargar. Hay cocas no tan fluidas como me esperaba, como el hecho de abrir y cerrar la multitarea o las carpetas, que son cosas básicas y deberían de ir bien sobre todo ejecutadas en un iPhone 5, pero bueno, por suerte es una primera beta y yo supongo que los de Apple ya habrán tomado nota de fallos como estos.</p><p>Lo que si hay que rescatar es la notable mejora en el encendido del dispositivo, el SO carga muy rápido en comparación con sus predecesores.</p><!-- more --><h2>La pantalla de bloqueo</h2><p>Empecemos por el principio, con una de las cosas que me gusta del nuevo iOS. Botón de cámara mostrado sutilmente, fecha y hora con un trazo fino y el &#8221;<em>slide to unlock</em>&#8221; que para mi no necesitaba una caja contenedora sino solo lo que muestra el nuevo iOS, dejan ver claramente el fondo de pantalla que para mi es importante.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/06/screen-lock.png"><img class="aligncenter size-medium wp-image-2581" alt="iOS 7 Screen lock en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/screen-lock-171x300.png" width="171" height="300" /></a></p><p>Lo que son las notificaciones también me molan, a pesar de que abarcan más espacio que antes, me gustan más que las anteriores. De igual forma la pantalla de bloqueo con código, también me parece acertada, sobre todo ese efecto de dejar ver trozos del fondo de pantalla al pulsar los números, me agrada.</p><h2>Control Center</h2><p>A mi, que he tenido Jailbreak, me parece una imitación mediocre de SBSettings. Como podéis ver en la imagen de arriba, posee accesos directos NO personalizables a ciertas funciones del sistema, como: activar/desactivar el modo avión, el Wifi, Bluetooth, Do Not Disturb, etc., yo me pregunto, donde está el de activar/desactivar el 3G y la localización?, costaba tanto poner un ScrollView con más de las funciones importantes?.</p><p>Yendo al final hay otra línea NO personalizable de accesos directos a aplicaciones. A ver, lo de la linterna está genial, pero y la calculadora que la uso una vez por semana para calcular en cuanto hay que dividir la paga del campo de futbol sala?, porque no poner un área para elegir los iconos que quiero poner?. Esperemos que elegir sea una opción en la beta 2, la 3 o la versión final, seguro que más de uno estará de acuerdo conmigo.</p><p>Alguna cosa más que me causa rechazo es que se me abra el Control Center al momento de presionar el botón &#8220;123&#8221; del teclado y luego arrastrar para elegir algo de la segunda pantalla. Me irrita un poco eso, por lo demás, el diseño también me gusta.</p><h2>Notification Center</h2><p>Como dije antes, el nuevo estilo de las notificaciones aunque sea más grande, me gusta. Hay cosas que aún faltan por pulir como que el calendario del Notification Center no me muestra las cosas del día por lo menos hasta que no quedan un par de horas para que se cumplan o el fallo de distribución de las pestañas en modo landscape, por lo demás satisface mis gustos.</p><h2>Nuevos iconos de gominola</h2><p>Aunque es muy cierto que apostar por lo simple es siempre un acierto para mi, se puede uno exceder en simpleza hasta limites &#8220;Tim Cookeanos&#8221;. A veces al desbloquear mi iPhone con iOS 7 me siento como entrando en una tienda de chuches, sobre todo al ver el icono de Game Center (desterrado por fuerza mayor a una pantalla poco concurrida).</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/06/Screen-Shot-2013-06-18-at-01.08.26.png"><img class="aligncenter size-medium wp-image-2587" alt="Iconos de iOS 7 en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/Screen-Shot-2013-06-18-at-01.08.26-300x166.png" width="300" height="166" /></a></p><p>Bromas a parte, me gusta la apuesta de Apple por la simpleza, no obstante no me termina de enganchar del todo ya que los nuevos iconos hacen que tenga nostalgia por los anteriores :&#8217;c. Pienso que podían habérselo currado más con algunos como el de Game Center, Cámara, Recordatorios, el de bolsa -que parece que hubieran activado la opción &#8220;Invertir Colores&#8221; de la accesibilidad y hubieran hecho una captura de pantalla-, hacen que sienta un poco como que me han querido &#8220;vender la moto&#8221;, aunque de hecho, ya me la han vendido!.</p><p>Pese a todo esto, no está del todo mal, es mejorable pero no está mal, por suerte aún queda trozo para la release final y a ver si nos sorprenden, que por lo que leo por ahí, están retocando los iconos. Ya veremos.</p><h2>iTunes Radio</h2><p>Es un nuevo servicio de música vía streaming que se integra en la aplicación de iTunes, el cual pretende ser directo competidor de servicios geniales como Spotify o pandora. Su punto fuerte es que tiene un sistema inteligente que te ofrece música para escuchar basada en tu historial, tus gustos, artistas preferidos; en sí todo lo que sueles escuchar, útil si eres de los que como yo van buscando nueva música para oír. Podrás elegir entre 200 estaciones, compartir las canciones con amigos, etc.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/06/iTunes-radio.png"><img class="aligncenter size-medium wp-image-2578" alt="iTunes Radio en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/iTunes-radio-171x300.png" width="171" height="300" /></a></p><p>Dicen que es gratis, yo de momento no dejo de ver precios en las imágenes de la <a href="http://www.apple.com/itunes/itunes-radio/">Web oficial</a>, ya veremos que nos trae. Solo estará disponible en Estados Unidos por el momento, pero como paso con iTunes Match, se espera que vaya aumentando su presencia en varios países con el tiempo.</p><h2>Multitarea androide</h2><p>Saltaba rebosante de felicidad por la nueva multitarea hasta que un compañero con un Android 4 me mostró lo que parece ser &#8220;el original&#8221;. Yo que quieres que te diga, se parecen mucho, obviamente se ve mejor en el iPhone, pero me parece que alguien se ha querido copiar, no diré quien ¬¬.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/06/multitarea.png"><img alt="Multitarea de iOS 7 en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/multitarea-170x300.png" width="170" height="300" /></a></p><p>A pesar de la decepción, me gusta también. Creo que tienen que permitir que se cierre la multitarea al presionar fuera de las aplicaciones (en el fondo de pantalla quiero decir) y que la animación sea más fluida, y lo que sería un puntazo es ver un botón para cerrarlas todas de golpe, aunque igual se lo están reservando para iOS 20, quien sabe.</p><p>Lo otro es que chupa muchísima batería. Supongo que será por que ahora TODAS las aplicaciones se mantienen en segundo plano y no se cierran, y por consiguiente el procesador tiene trabajito extra y pues, de algo se tiene que alimentar. La solución rápida a este problema es ir cerrando las aplicaciones que no vayamos a utilizar. De nada.</p><h2>Cámara</h2><p>Para mi es una de las aplicaciones que más ha cambiado para bien (excepto el icono). Por lo menos en mi iPhone, el enfoque y las fotos se hacen más rápido, y la nueva utilidad de aplicar filtros a las fotos, antes y/o después de tomarlas, con la opción de descartar los cambios, es un puntazo. Se carga algunas aplicaciones que tengo de filtros y tal, pero bueno, espacio que me ahorro.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/06/camara.png"><img class="aligncenter size-medium wp-image-2591" alt="Cámara en iOS 7 en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/camara-171x300.png" width="171" height="300" /></a></p><p>Esa característica de arrastrar para cambiar el modo me parece muy acertada, no le veía el porque a tener que buscar el botón de panorama en vez de simplemente ver la opción y hacer la foto. También se ha añadido un nuevo tipo de toma cuadrada.</p><h2>Fotos</h2><p>Las novedades de la aplicación de fotos se centran en agrupar las fotografías. En principio se agrupan por años. De una sola vez puedes ver todas (literalmente) las fotos que has hecho cada año. Cada año está compuesto por colecciones que están organizadas por rangos de fechas o nombres de eventos, todo esto es organizado automáticamente. La pestaña de álbumes organiza un poco el carrete y crea un nuevo álbum para los vídeos y las fotografías en panorama.</p><p style="text-align: center;"><img class="aligncenter size-medium wp-image-2589" alt="Fotos en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/Screen-Shot-2013-06-18-at-01.42.36-170x300.png" width="170" height="300" /></p><p>La pestaña &#8220;Shared&#8221; te permite crear un Stream, el cual no es más que una forma de compartir tus fotografías y vídeos de forma privada a través de iCloud con las personas que desees. No he podido probar del todo esta característica debido a que al añadir lo que sea, sale un mensaje de alerta que dice que estará disponible muy pronto. Es una beta, no hay que perder los nervios aún.</p><h2>AirDrop</h2><p>Compartir por Bluetooth. Una característica que se pedía desde que salió el iPhone allá en 2007, ya es una realidad en el 2013, SOLO 6 años después, que maravilla!. Puedes compartir fotos, vídeo, pases, contactos y mús&#8230;Oh wait!, música no.</p><p>No solo usa el Bluetooth sino también puede usar la red Wi-Fi para enviar los datos, y lo hace todo encriptado para mayor seguridad. También puedes ponerte en estado visible o invisible según creas conveniente. Puedes acceder a AirDrop desde cualquier parte del dispositivo, inclusive desde cualquier aplicación, esto es debido a que está permanentemente integrado en el Control Center.</p><p>Como programador de iOS le veo utilidad para compartir datos entre dispositivos desde mi aplicación, como usuario creo que la usaré la misma cantidad de veces que la voy usando desde hace 4 años, cero.</p><h2>Safari</h2><p>Safari es otra de las aplicaciones que ha cambiado para bien. Ahora es más a pantalla completa, los botones y las barras se ocultan hasta que hagas scroll. Las páginas abiertas se muestran diferente, como en 3D y con una animación muy chula, para mi gusto está genial.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2013/06/safari.png"><img class="aligncenter size-medium wp-image-2592" alt="Safari en iOS7 en el Blog de ThXou" src="http://www.thxou.com/wp-content/uploads/2013/06/safari-170x300.png" width="170" height="300" /></a></p><p>Incorpora una utilidad nueva llamada <strong>iCloud Keychain</strong>, la cual nos permite almacenar nuestras contraseñas, cuentas de usuario y hasta tarjetas de crédito, en iCloud. Luego Safari recoge estos datos y los muestra automáticamente (según tus preferencias, claro) cuando entras a algún sitio que las requiere. Puede parecer poco seguro pero no lo es, toda esta transmisión de datos confidenciales se hace con una encriptación AES de 256-bits.</p><p>En cuanto a la fluidez al hacer scroll que nos mostraban en la Keynote, aún no veo mucho el cambio la verdad, no he notado nada.</p><h2>Otras novedades</h2><p>[one_half]La <strong>App Store</strong> ha incorporado actualizaciones automáticas de las aplicaciones cuando estás conectado a una red Wi-Fi. Bien visto para mi. Luego también hay un nuevo apartado que nos muestra aplicaciones cercanas a nuestra posición actual. A mi no me ha funcionado por el momento.[/one_half]</p><p>[one_half_last]<strong>Siri</strong> ha aprendido nuevas cosas y ahora se integra con servicios como Twitter, iTunes Radio, Wikipedia o Bing. Posee una interfaz completamente re diseñada y su voz es un poco más humana que antes, vamos! que se entiende mejor.[/one_half_last]</p><h2>Conclusión</h2><p>Es la primera beta, y como tal se puede permitir algunos fallos como los de rendimiento, cuelgues, fluidez y algunos bugs que hacen que las aplicaciones nativas se cierren inesperadamente. Con respecto a la interfaz de usuario, poco puede cambiar de cara a la versión final, lo mejor va a ser empezar a acostumbrarse cuanto antes a lo nuevo.</p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Literales en Objective-C]]></title>
    <link href="http://www.thxou.com/2013/03/18/literales-en-objective-c/"/>
    
    <updated>2013-03-18T19:04:13+01:00</updated>
    <id>http://www.thxou.com/2013/03/18/literales-en-objective-c</id>
    
    <content type="html"><![CDATA[<p>Los literales son simplemente unos valores que los programadores podemos escribir &#8220;tal cual&#8221; en el código. En Objective-C (y por lo tanto en C) ya conocemos algunos ejemplos de esto con los valores primitivos:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">float</span> <span class="n">altura</span> <span class="o">=</span> <span class="mf">23.5</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">piezas</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Estos son: un literal float y un literal int respectivamente. Estos literales son comunes en la mayoría de los lenguajes, no obstante Objective-C tiene sus propios literales a parte de los mencionados, concretamente los que están basados en objetos:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">tarea</span> <span class="o">=</span> <span class="err">@”</span><span class="n">Buscar</span> <span class="n">piso</span><span class="err">”</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Claro, a simple vista podemos decir: Vaya chorrada, lo he usado mil veces!, pero detente un momento a pensar en el ahorro que implica en líneas de código el hecho de tenerlos: como escribirías un número &#8220;sin números&#8221;?, algo aún más terrorífico, plantearse escribir un string de miles de caracteres &#8220;sin strings&#8221;.</p><p>Dicho esto, es fácil darse cuenta de que los literales son una pieza fundamental de cualquier lenguaje por lo que nos ahorran, a parte de por los casos vistos, por la legibilidad en el código, así que vamos a conocer unos cuantos más pero específicos de Objective-C.</p><!-- more --><h2>La nueva moda en literales</h2><p>Hasta la salida de la versión 4.0 del compilador LLVM de Apple, Objective-C aún estaba un poco en pañales con respecto a lo que se refiere a literales. Mientras lenguajes basados en C como Perl o Python ya habían incluido literales para colecciones y más, Objective-C se resistía. Ahora eso ya es parte del pasado y vamos a ver cuales son las novedades en literales.</p><h3>Literales para colecciones</h3><h4>NSArray</h4><p>Clang, el front end de LLVM, introdujo la sintaxis <code>@[ ]</code> para definir arrays, en el cual solo se deben incluir objetos separados por comas. Ojo!, solo objetos, nada de tipos escalares. Así, lo que antes escribíamos así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">ciudades</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Barcelona&quot;</span><span class="p">,</span> <span class="s">@&quot;Lima&quot;</span><span class="p">,</span> <span class="s">@&quot;Lyon&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ahora nos queda así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">ciudades</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="err">@”</span><span class="n">Barcelona</span><span class="err">”</span><span class="p">,</span> <span class="err">@”</span><span class="n">Lima</span><span class="err">”</span><span class="p">,</span> <span class="err">@”</span><span class="n">Lyon</span><span class="err">”</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Al ser una característica del lenguaje ya no es necesario definir el centinela nil, de hecho si lo pones como valor, tu ordenador explotará, ya que se realiza una validación como para el método <code>[NSArrayarrayWithObjects:count:]</code>, en el que se requiere que ningún objeto sea nil. Por lo tanto si quieres pasar nil como valor tendrás que hacerlo con el objeto <code>[NSNull null]</code>, que es su equivalente.</p><h4>NSDictionary</h4><p>Aquí se introduce la sintaxis <code>@{ }</code>, similar a la de JSON o Javascript, pero con el @ característico de Objective-C. Esta sintaxis crea un diccionario de pares key-value, donde key tiene que ser un objeto que implemente el protocolo NSCopying (los string de toda la vida, vamos!) y value, como en el caso anterior, sólo pueden ser punteros a objetos Objective-C. Algo como:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">usuario</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="err">@”</span><span class="n">ThXou</span><span class="err">”</span><span class="p">,</span> <span class="err">@”</span><span class="n">nombre</span><span class="err">”</span><span class="p">,</span> <span class="err">@”</span><span class="n">Barcelona</span><span class="err">”</span><span class="p">,</span> <span class="err">@”</span><span class="n">ubicacion</span><span class="err">”</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ahora se escribiría:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">usuario</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="err">@”</span><span class="n">nombre</span><span class="err">”</span> <span class="o">:</span> <span class="err">@”</span><span class="n">ThXou</span><span class="err">”</span><span class="p">,</span> <span class="err">@”</span><span class="n">ubicacion</span><span class="err">”</span> <span class="o">:</span> <span class="err">@”</span><span class="n">Barcelona</span><span class="err">”</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>
<p>Como en el caso de los arrays, aquí tampoco es necesaria la centinela nil.</p><h4>NSSet</h4><p>Pobre, se olvidaron de él. No se ha introducido nada para esta colección, no obstante con los literales de NSArray se puede aprovechar mucho para NSSet cuando necesitamos pasarlos como argumentos de los métodos inicializadores y métodos de conveniencia.</p><h2>Literales de NSNumber</h2><p>Para los que no sabéis cómo definir NSNumber, pues es una clase que nos permite envolver valores escalares (otros literales de tipo <code>int</code>, <code>bool</code>, <code>float</code>, etc) en objetos Objective-C.</p><p>Ahora, cualquier valor escalar que empiece por el símbolo ‘@’ devolverá un objeto NSNumber inicializado con ese valor. Esto ya lo veíamos con los strings de C. Cuando escribíamos algo como:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">queja</span> <span class="o">=</span> <span class="s">@&quot;El billete de metro está caro&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<p>En realidad estamos convirtiendo un string en C a un objeto NSString con codificación UTF-8. Este literal está desde los inicios, pero para los otros valores escalares usábamos el método <code>numberWith<em>Tipo</em>:</code> para inicializar los objetos NSNumber. Ahora haremos:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">bool</span> <span class="o">=</span> <span class="err">@</span><span class="n">NO</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithBool:NO]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="kt">char</span> <span class="o">=</span> <span class="sc">@&#39;d&#39;</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithChar:’d’]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">unsignedInt</span> <span class="o">=</span> <span class="err">@</span><span class="mi">23</span><span class="n">U</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithUnsignedInt:23U]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="kt">int</span> <span class="o">=</span> <span class="err">@</span><span class="mi">23</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithInt:23]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="kt">long</span> <span class="o">=</span> <span class="err">@</span><span class="mi">23L</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithLong:23L]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">longlong</span> <span class="o">=</span> <span class="err">@</span><span class="mi">23L</span><span class="n">L</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithLongLong:23LL]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="kt">float</span> <span class="o">=</span> <span class="err">@</span><span class="mf">5.2303F</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithFloat:5.2303F]</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="kt">double</span> <span class="o">=</span> <span class="err">@</span><span class="mf">2.2808</span><span class="p">;</span> <span class="c1">// es equivalente a [NSNumber numberWithDouble:2.2808]</span>
</span></code></pre></td></tr></table></div></figure>
<p>Me encanta este literal, por lo menos a mi me ayuda haciendo más legible el código, sobre todo cuando tengo que hacer una lectura rápida.</p><h2>Expresiones “en caja” (Boxed Expressions)</h2><p>Si la intuición os ha llevado a pensar: ¿Y qué pasa si hago <code>@2+2</code>, el compilador me lo pillará sin enfadarse?. Pues no, ya que hay una nueva sintaxis para esto y es envolver nuestras expresiones entre paréntesis: <code>@()</code>. Esto nos devolvería un objeto NSNumber inicializado con el resultado de la expresión que está entre estos. Y lo que antes hacíamos así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">piMedios</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithDouble:</span><span class="n">M_PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ahora lo hacemos así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">piMedios</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">M_PI</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
<p>Mucho más claro y sencillo. Lo genial es que también funciona pasándole propiedades de algunos objetos Objective-C que devuelven valores escalares. Por ejemplo si tenías que guardar en Core Data el valor de un objeto UISwitch, lo hacíamos así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">tarea</span><span class="p">.</span><span class="n">completado</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">mySwitch</span><span class="p">.</span><span class="n">on</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ahora también lo puedes hacer simplemente así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">tarea</span><span class="p">.</span><span class="n">completado</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">mySwitch</span><span class="p">.</span><span class="n">on</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
<p>También funciona para enumeraciones:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span> <span class="n">Barcelona</span><span class="p">,</span> <span class="n">Lima</span><span class="p">,</span> <span class="n">Lyon</span> <span class="p">}</span> <span class="n">Ciudad</span><span class="p">;</span>
</span><span class='line'><span class="n">NSNumber</span> <span class="o">*</span><span class="n">ciudad</span> <span class="o">=</span> <span class="err">@</span><span class="p">(</span><span class="n">Lyon</span><span class="p">);</span> <span class="c1">// nos devolverá 1 y es equivalente a [NSNumber numberWithInt:((int)Lyon)]</span>
</span></code></pre></td></tr></table></div></figure>
<p>En este caso, para poder usar algún valor de la enumeración tenemos que envolverlo también como si se tratara de una expresión para poder usarlo como literal.</p><h2>Subíndices de objeto (Object Subscripting)</h2><p>Esta última tanda de literales de la que vamos a hablar suple una necesidad en mi que vengo deseando ver desde que dejé C++ para embarcarme en Objective-C, y tiene que ver con la forma de acceder y obtener datos de colecciones, concretamente de arrays y diccionarios.</p><h3>Subíndices para Arrays</h3><p>Para los arrays podemos usar un index para referirnos a la posición de un objeto dentro de ese array, tal como se hacía en C con valores escalares:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">ciudades</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;Barcelona&quot;</span><span class="p">,</span> <span class="s">@&quot;Lima&quot;</span><span class="p">,</span> <span class="s">@&quot;Lyon&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">ciudad</span> <span class="o">=</span> <span class="n">ciudades</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span> <span class="c1">// ciudad = @&quot;Lyon&quot;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Aquí se nos devuelve el elemento en la posición 2 que es <code>@"Lyon"</code>. Esto el compilador lo traduce por su equivalente en Objective-C: <code>[ciudades objectAtIndexedSubscript:2]</code>, lo cual es exactamente lo mismo que hacer: <code>[ciudades objectAtIndex:2]</code>.</p><p>De la misma forma, si tenemos un array mutable, entonces podemos hacer asignación directa de valores con esta misma sintaxis:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ciudades</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;Roma&quot;</span><span class="p">;</span> <span class="c1">// el array quedaría: @[@&quot;Barcelona&quot;, @&quot;Roma&quot;, @&quot;Lyon&quot;]</span>
</span></code></pre></td></tr></table></div></figure>
<p>El valor en la posición 1 es cambiado por el nuevo. Aquí el compilador hace una traducción al método <code>[ciudades setObject:@"Roma" atIndexedSubscript:1]</code></p><h3>Subíndices para diccionarios</h3><p>Para los diccionarios en vez de usar un index usamos keys para obtener los valores:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">usuario</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;nombre&quot;</span> <span class="o">:</span> <span class="s">@&quot;ThXou&quot;</span><span class="p">,</span> <span class="s">@&quot;ubicacion&quot;</span> <span class="o">:</span> <span class="s">@&quot;Barcelona&quot;</span><span class="p">};</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">ubicacion</span> <span class="o">=</span> <span class="n">usuario</span><span class="p">[</span><span class="s">@&quot;ubicacion&quot;</span><span class="p">];</span> <span class="c1">// ubicacion = @&quot;Barcelona&quot;</span>
</span></code></pre></td></tr></table></div></figure>
<p>El compilador hace la traducción a <code>[usuario objectForKeyedSubscript:@"ubicacion"]</code>, el cual es a su vez equivalente a <code>[usuario objectForKey:@"ubicacion"]</code>.</p><p>Como en los arrays, pasa lo mismo para los diccionarios mutables y podemos reemplazar el valor correspondiente a la key que referenciemos:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">usuario</span><span class="p">[</span><span class="s">@&quot;nombre&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;ThXou soy yo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// el diccionario quedaría: @{@&quot;nombre&quot; : @&quot;ThXou soy yo&quot;, @&quot;ubicacion&quot; : @&quot;Barcelona&quot;}</span>
</span></code></pre></td></tr></table></div></figure>
<p>La traducción correspondiente es <code>[usuario setObject:@"ThXou soy yo" forKeyedSubscript:@"nombre"]</code>.</p>

<h2>Conclusión</h2>

<p>Esta nueva sintaxis como se puede observar, ayuda a que nuestro código sea más legible, a la par que nos ahorra tiempo escribiendo sus métodos equivalentes. Va a ser hora de pasarnos a la nueva moda, nunca es tarde aunque ya lleve unos cuantos meses rulando por internet. Es muy importante recordar pasar únicamente objetos al momento de crear objetos usando literales, como también no pasar nunca un <code>nil</code> como un valor.</p><h2>Fuentes:</h2><ul><li><a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">http://clang.llvm.org/docs/ObjectiveCLiterals.html</a></li><li><a href="http://www.mikeash.com/pyblog/friday-qa-2012-06-22-objective-c-literals.html">http://www.mikeash.com/pyblog/friday-qa-2012-06-22-objective-c-literals.html</a></li></ul>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[NSNotificationCenter y las notificaciones]]></title>
    <link href="http://www.thxou.com/2013/02/21/nsnotificationcenter-y-las-notificaciones/"/>
    
    <updated>2013-02-21T14:12:51+01:00</updated>
    <id>http://www.thxou.com/2013/02/21/nsnotificationcenter-y-las-notificaciones</id>
    
    <content type="html"><![CDATA[<p>Vuelvo a la carga con los tutes sobre iOS después de un tiempo ausente por proyectos personales.</p><p>Esta vez os voy a hablar sobre otro tipo de notificaciones, diferentes a las notificaciones locales que <a href="http://www.thxou.com/2012/01/31/programando-notificaciones-locales-con-uilocalnotification/">vimos hace un tiempo</a>. Estas nuevas notificaciones básicamente encapsulan información acerca de algún tipo de evento. Hay objetos que registran estas notificaciones en lo que podemos llamar una &#8220;tabla de notificaciones&#8221;, esta tabla está administrada por un centro de notificaciones, que es un objeto <code>NSNotificationCenter</code>. Luego tenemos objetos que se registran como &#8220;Observadores&#8221; de estas notificaciones, de manera de que cuando una de estas notificaciones es lanzada, todos los observadores &#8220;se enteran&#8221; de esto y normalmente llevan a cabo alguna acción.</p><p>Podría parecer un poco chungo, pero no lo es para nada. Te pongo un ejemplo práctico. Imagina un portal de noticias. Los usuarios entran a este portal y pueden suscribirse a las categorías de noticias que ellos prefieran. Una vez sale una noticia relacionada con categoría a la que el usuario se ha suscrito, entonces le llega un correo electrónico avisándole que hay una nueva noticia, así el usuario puede decidir que hacer en ese momento. Pues bien, si hacemos una comparación sacamos que el usuario que se suscribe a las noticias es el &#8220;Observador&#8221;, el portal de noticias sería el &#8220;centro de notificaciones&#8221; (<code>NSNotificationCenter</code>) y el correo electrónico sería la notificación lanzada por el centro de notificaciones.</p><!-- more --><h2>A tocar código, que es lo que mola</h2><p>Últimamente escribir tanto texto sin una sola línea de código me da alergia, así que vamos a escribir unas cuantas líneas.</p><p>De toda la clase <code>NSNotificationCenter</code>, normalmente solo vamos a usar 4 métodos. El primero es para inicializar nuestro centro de notificaciones. Cada aplicación viene con uno por defecto y para acceder a el usamos un método de clase que lo que hace simplemente es crear un singleton:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSNotificationCenter</span> <span class="o">*</span><span class="n">center</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ya tenemos nuestra instancia en el objeto <code>center</code>. El segundo método nos va a permitir registrar una notificación en el centro de notificaciones. A este método le pasamos el nombre de nuestra notificación y un objeto que es el que envía la notificación, normalmente <code>self</code>:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">center</span><span class="err"> </span><span class="nl">postNotificationName:</span><span class="s">@&quot;kTestNotification&quot;</span> <span class="nl">object:</span><span class="n">self</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Se podrían separar estas notificaciones en 2 tipos: las personalizadas (como esta) y las que emite el sistema. En las que emite el sistema (por ejemplo cuando el dispositivo es girado o el teclado de un textField es mostrado), no necesitamos usar el método anterior ya que el sistema lo hace solo, nosotros solo tenemos que añadirnos como observadores de esas notificaciones y esperar, así que esto es lo que haremos ahora.</p><h2>Registrándonos como observadores</h2><p>Antes vimos el método para registrar una notificación llamada <code>kTestNotification</code> en el centro de notificaciones. Bien, ahora nos haremos &#8220;Observadores&#8221; de esta notificación para que cuando sea registrada (Osea, cuando sea ejecutado el método anterior), nosotros podamos llevar a cabo alguna acción en ese mismo instante:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">center</span> <span class="nl">addObserver:</span><span class="n">self</span>
</span><span class='line'>		   <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleNotification:</span><span class="p">)</span>
</span><span class='line'>			   <span class="nl">name:</span><span class="s">@&quot;kTestNotification&quot;</span>
</span><span class='line'>			 <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>El gustillo de este tipo de notificaciones para mi está en que, suponiendo el caso de que tu aplicación tenga 100 controladores, no importa en cual de estos 100 controladores registres la notificación, añadiendo tu clase como observador serás capaz de enterarte cuando sea registrada, en cualquier momento y en cualquier controlador.</p><p>Cuando el centro de notificaciones avisa a los observadores sobre una notificación lo hace de manera síncrona. Esto quiere decir que vas a tener que esperar primero a que todos los observadores reciban sus notificaciones antes de poder hacer algo. Esto se puede solucionar registrando las notificaciones de forma asíncrona usando <code>NSNotificationQueue</code> en vez de <code>NSNotificationCenter</code>, pero esto ya es otro tema del que hablaremos en otra oportunidad.</p><p>Al añadirnos como observadores también definimos un método a ejecutarse cuando la notificación sea registrada:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleNotification:</span><span class="p">(</span><span class="n">NSNotification</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hey tu!, se ha disparado la notificación!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Aquí simplemente mostramos por consola un texto, pero tu puedes usarlo para lo que quieras, cosas como mostrar un controlador, cerrar una conexión a Internet, etc.</p><h2>Liberando la memoria</h2><p>Lo único que nos queda ahora es liberar la memoria removiendo el observador que hemos asignado antes:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">dealloc</span><span class="err"> </span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// liberamos la memoria que ocupa el observador</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">removeObserver:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span><span class="err"> </span><span class="n">dealloc</span><span class="p">];</span> <span class="c1">// quita esta línea si usas ARC</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Como vez, no estamos utilizando el objeto <code>center</code>, y a decir verdad para ahorrarte una innecesaria línea de código te recomiendo no crear un objeto <code>NSNotificationCenter</code>, sino usar la forma: <code>[[NSNotificationCenter defaultCenter] ...</code> , como en el código de arriba.</p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Trabajando con el Social Framework: SLRequest, publicar en Twitter y obtener el Timeline]]></title>
    <link href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline/"/>
    
    <updated>2012-09-20T16:57:56+02:00</updated>
    <id>http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline</id>
    
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-20-at-14.23.29.png"><img class="size-full wp-image-2359" title="totweet-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-20-at-14.23.29.png" alt="" width="319" height="479" /></a></p>
<p>Seguint amb els tutorials sobre iOS 6, avui ens toca Twittear (o com s&#8217;escrigui) i mostrar el nostre timeline de Twitter en una aplicació.</p>

<p>Abans quan volíem comunicar-nos amb Twitter i obtenir dades i actualitzar-los calia fer una connexió a través de OAuth amb uns tokens i secret-keys, això normalment es podia digerir millor usant algun framework o classe externa que servia d&#8217;interfície de connexió entre el client i el servei. Des de l&#8217;arribada del framework de Twitter i la integració amb iOS 5 les coses es van posar extraordinàriament més fàcils, això ens va permetre l&#8217;intercanvi de dades amb Twitter en tan sol pocs passos.</p>

<p>En el Social *Framework tenim una classe anomenada <code>SLRequest</code>, molt similar a <code>TWRequest</code> del framework de twitter. Aquesta classe encapsula les propietats d&#8217;una petició HTTP en mètodes fàcils d&#8217;utilitzar, amb els quals enviem peticions a Twitter per poder obtenir i actualitzar dades dels nostres comptes configurats en el dispositiu.</p>

<p>Bàsicament enviem una petició HTTP amb uns paràmetres que configuren el que volem dur a terme en el servei, si Twitter diu que no hi ha problema, rebem una resposta amb unes dades que hem de manipular i mostrar a l&#8217;usuari, en cas contrari rebem una informació d&#8217;error.</p><!-- more -->
<h2>Autenticant la petició</h2>
<p>Com els deia paràgrafs enrere, abans calia usar tokens i secret-keys per autenticar-nos en Twitter i així poder validar les nostres peticions. Amb el Social Framework fem el mateix però de forma automàtica, més transparent a l&#8217;usuari, i en certa forma al desenvolupador, ja que en cap moment hem de manipular tokens.</p>

<p>Des de iOS 5 tenim el Accounts Framework, el qual proveeix un sistema centralitzat de comptes d&#8217;usuari. A través de l&#8217;es emmagatzemen tots els comptes de Twitter (I d&#8217;altres serveis) configurades en el dispositiu: informació d&#8217;usuari i contrasenya i altra, això ens permet saltar-nos aquesta típica finestra d&#8217;inici de sessió sense haver de preocupar-nos per proveir un sistema per emmagatzemar nosaltres mateixos les credencials.</p>

<p>Hi ha poques coses que podem fer sense autenticació d&#8217;usuari, i obtenir el timeline és una d&#8217;elles. No obstant això, per fer que això funcioni amb qualsevol compte, centralitzarem totes les peticions en els comptes obtinguts de la base de dades de comptes del dispositiu. Comencem:</p>

<p>El primer serà importar els frameworks:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Accounts/Accounts.h&gt;</span>
</span><span class='line'><span class="cp">#import &lt;Social/Social.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Després fem la màgia d&#8217;obtenir els comptes del dispositiu amb el Accounts Framework:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ACAccountStore</span><span class="err"> </span><span class="o">*</span><span class="n">accountStore</span><span class="err"> </span><span class="o">=</span> <span class="p">[[</span><span class="n">ACAccountStore</span><span class="err"> </span><span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creguem un objecte accountType especificant que solament volem obtenir els comptes de Twitter</span>
</span><span class='line'><span class="n">ACAccountType</span><span class="err"> </span><span class="o">*</span><span class="n">accountType</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">accountStore</span><span class="err"> </span><span class="nl">accountTypeWithAccountTypeIdentifier:</span><span class="n">ACAccountTypeIdentifierTwitter</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">accountStore</span><span class="err"> </span><span class="nl">requestAccessToAccountsWithType:</span><span class="n">accountType</span>
</span><span class='line'>                                      <span class="nl">options:</span><span class="nb">nil</span>
</span><span class='line'>                                   <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span><span class="err"> </span><span class="n">granted</span><span class="p">,</span> <span class="n">NSError</span><span class="err"> </span><span class="o">*</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="err"> </span><span class="p">(</span><span class="n">granted</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// guardem els comptes de twitter en un array </span>
</span><span class='line'>        <span class="n">NSArray</span><span class="err"> </span><span class="o">*</span><span class="n">accountsArray</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">accountStore</span><span class="err"> </span><span class="nl">accountsWithAccountType:</span><span class="n">accountType</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// armem la petició aquí</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="err"> </span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error no se pudo acceder a las cuentas: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>

<p>El que fem aquí és crear una instància de la base de dades de comptes. Després a través de la classe <code>ACAccountType</code> diem que solament volem els comptes de Twitter, passant-li la constant  <code>ACAccountTypeIdentifierTwitter</code> com a argument en la inicialització. Tot seguit demanem accés a les comptes amb el mètode <code>requestAccessToAccountsWithType:options:completion:</code>. Aquest mètode té com a argument el bloc <code>completion:</code>, el qual és un handler (Un objecte &#8220;manipulador&#8221; per així dir-ho) en els paràmetres del qual és retornada la resposta del mètode. Si tot va bé emmagatzemem tots els comptes obtinguts en el array <code>accountsArray</code> o vam mostrar un error en cas contrari. Simple.</p>

<p>Recorda aquesta dinàmica d&#8217;executar un mètode i rebre una resposta per ser manipulada en un bloc, perquè ho veuràs molt sovint des d&#8217;ara.</p>
<h2>Construint la petició per obtenir el timeline</h2>
<p>Amb el Social Framework és definitivament molt més fàcil construir una petició HTTP. Sabem que està composta per:</p>
<ol>
	<li>Una URL que identifica l&#8217;operació que volem realitzar en el servei.</li>
	<li>Un mètode de petició, que pot ser GET, POST o DELETE.</li>
	<li>I uns paràmetres de configuració.</li>
</ol>
<p>El mètode <code>requestForServiceType:requestMethod:URL:parameters:</code> passa totes aquestes dades com els seus arguments i això ens permet crear la petició en tan sol una línia de codi si així ho desitgem.</p>

<p>El que nosaltres volem és obtenir el timeline, per tant necessitem anar a la <a title="Versión 1.1 de la API de Twitter" href="http://securelink.thxou.com/?https://dev.twitter.com/docs/api/1.1" target="_blank">documentació oficial</a> per veure el que hem d&#8217;usar. En entrar en l&#8217;enllaç i seleccionar l&#8217;operació de la qual volem veure els detalls (en aquest cas és: <code>GET</code> <code>statuses/home_timeline</code>), veurem en l&#8217;apartat <strong>Resourse Information</strong> certa informació molt important:
<p style="text-align: center;"><img class="size-full wp-image-2326 aligncenter" title="twitter-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-11-at-17.08.28.png" alt="" width="249" height="392" /></p>
Tenim el mètode de la petició (GET), el format de resposta (JSON) i l&#8217;objecte de resposta (Tweets). Després està l&#8217;apartat <strong>Resource URL</strong> que és la URL que li passarem i l&#8217;apartat <strong>Parameters</strong>, que conté els paràmetres per configurar-la. Usant aquesta informació construïm la petició:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// guardem el compte</span>
</span><span class='line'><span class="n">ACAccount</span><span class="err"> </span><span class="o">*</span><span class="n">twitterAccount</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">accountsArray</span><span class="err"> </span><span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">cuenta</span> <span class="o">=</span> <span class="n">twitterAccount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// creguem la petició</span>
</span><span class='line'><span class="n">NSURL</span><span class="err"> </span><span class="o">*</span><span class="n">url</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span><span class="err"> </span><span class="nl">URLWithString:</span><span class="s">@&quot;https://api.twitter.com/1.1/statuses/home_timeline.json&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSDictionary</span><span class="err"> </span><span class="o">*</span><span class="n">parametros</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span><span class="err"> </span><span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                                <span class="s">@&quot;25&quot;</span><span class="p">,</span> <span class="s">@&quot;count&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">SLRequest</span> <span class="o">*</span><span class="n">request</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">SLRequest</span> <span class="nl">requestForServiceType:</span><span class="n">SLServiceTypeTwitter</span>
</span><span class='line'>                                        <span class="nl">requestMethod:</span><span class="n">SLRequestMethodGET</span>
</span><span class='line'>                                                  <span class="nl">URL:</span><span class="n">url</span>
</span><span class='line'>                                           <span class="nl">parameters:</span><span class="n">parametros</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// associem el compte a la petició</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span><span class="err"> </span><span class="nl">setAccount:</span><span class="n">twitterAccount</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

<p>Per motius de brevetat tan solament utilitzarem el primer compte de les quals hi ha en el array.</p>

<p>He creat la propietat <code>cuenta</code> de tipus <code>ACAccount</code>, en ella emmagatzemem aquest compte per posteriorment poder enviar-la al controlador des del qual publicarem un missatge d&#8217;estat (el que és un Tweet) al nostre timeline, això més endavant.</p>

<p>Com poden veure tenim un diccionari per als paràmetres. El meu solament té una key: <code>count</code>, aquesta ens permet limitar la quantitat de tweets que ens va a retornar el timeline que per defecte és 20, però jo l&#8217;he posat a 25. En la documentació de la API estan tots els paràmetres que podem usar per configurar la petició.</p>

<p>El següent és assignar-li a la propietat <code>account</code> de la nostra petició, el compte que hem triat del array i amb la qual volem treballar per mostrar el timeline i altres coses.</p>
<h2>Enviant la petició i manipulant els resultats</h2>
<p>Una vegada construïda la petició procedim a enviar-la. Per a això usem el mètode <code>performRequestWithHandler:</code> que envia la petició i recull els resultats en el seu únic argument. Est és al seu torn un bloc, el qual és executat una vegada estan disponibles les dades de la resposta.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// realitzem la petició especificant un mètode per manipular la resposta</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span><span class="err"> </span><span class="nl">performRequestWithHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span><span class="err"> </span><span class="o">*</span><span class="n">responseData</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span><span class="err"> </span><span class="o">*</span><span class="n">urlResponse</span><span class="p">,</span> <span class="n">NSError</span><span class="err"> </span><span class="o">*</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="err"> </span><span class="p">(</span><span class="n">responseData</span><span class="err"> </span><span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">tweets</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span><span class="err"> </span><span class="nl">JSONObjectWithData:</span><span class="n">responseData</span>
</span><span class='line'>                                                      <span class="nl">options:</span><span class="n">kNilOptions</span>
</span><span class='line'>                                                        <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>

<p>Aquest bloc té 3 paràmetres, el més important és <code>responseData</code>, perquè és el que va a contenir els tweets. Aquests tweets estan en format JSON com vam veure abans, per tant necessitem parsearlos i així passar-los a un format manipulable en Objective-C. Per fer això existeix la classe <code>NSJSONSerialization</code>, que agafa les dades en <code>NSData</code> (en aquest cas <code>responseData</code>), els parsea i retorna. Aquestes dades retornades els emmagatzemem en el array <code>tweets</code>, que a continuació usarem per mostrar-los a l&#8217;usuari.</p>

<blockquote><p>Pots aprendre més sobre com parsear dades en format JSON i la classe <code>NSJSONSerialization</code> en el nostre pràctic tutorial sobre el tema fent <a href="http://www.thxou.com/2012/09/11/parsear-y-crear-ficheros-en-formato-json-en-ios/"><strong>clic aquí</strong></a>.</p></blockquote>

<h2>Mostrant els resultats</h2>
<p>Bé, ja tenim fet gairebé tot el treball, ara solament ens queda mostrar els resultats, i para això tenim l&#8217;objecte <code>tweetsTableView</code>. A causa que ja tenim tots els Tweets en un array, és relativament senzill mostrar-los en el tableView, per això anem directament a implementar els mètodes convenients:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="err"> </span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="nv">tableView</span><span class="err"> </span><span class="nl">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="err"> </span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tweets</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">UITableViewCell</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="n">tableView</span><span class="err"> </span><span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span><span class="err"> </span><span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span><span class="err"> </span><span class="n">NSString</span><span class="err"> </span><span class="o">*</span><span class="n">CellIdentifier</span><span class="err"> </span><span class="o">=</span> <span class="s">@&quot;Cell&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UITableViewCell</span><span class="err"> </span><span class="o">*</span><span class="n">cell</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">tableView</span><span class="err"> </span><span class="nl">dequeueReusableCellWithIdentifier:</span><span class="n">CellIdentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span><span class="err"> </span><span class="p">(</span><span class="n">cell</span><span class="err"> </span><span class="o">==</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cell</span><span class="err"> </span><span class="o">=</span> <span class="p">[[[</span><span class="n">UITableViewCell</span><span class="err"> </span><span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithStyle:</span><span class="n">UITableViewCellStyleSubtitle</span><span class="err"> </span><span class="nl">reuseIdentifier:</span><span class="n">CellIdentifier</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span><span class="err"> </span><span class="o">*</span><span class="n">tweet</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tweets</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">tweet</span><span class="err"> </span><span class="nl">objectForKey:</span><span class="s">@&quot;text&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">detailTextLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[[</span><span class="n">tweet</span><span class="err"> </span><span class="nl">objectForKey:</span><span class="s">@&quot;user&quot;</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;screen_name&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// carreguem les imatges dels quals envien el tweet, de forma asíncrona</span>
</span><span class='line'>    <span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="err"> </span><span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.thxou.totweet&quot;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_queue_t</span> <span class="n">main</span> <span class="o">=</span> <span class="n">dispatch_get_main_queue</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSURL</span><span class="err"> </span><span class="o">*</span><span class="n">imageURL</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span><span class="err"> </span><span class="nl">URLWithString:</span><span class="p">[[</span><span class="n">tweet</span><span class="err"> </span><span class="nl">objectForKey:</span><span class="s">@&quot;user&quot;</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;profile_image_url&quot;</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">NSData</span> <span class="o">*</span><span class="n">imageData</span><span class="err"> </span><span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfURL:</span><span class="n">imageURL</span><span class="p">];</span>
</span><span class='line'>        <span class="n">dispatch_async</span><span class="p">(</span><span class="n">main</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>            <span class="n">cell</span><span class="p">.</span><span class="n">imageView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span><span class="err"> </span><span class="nl">imageWithData:</span><span class="n">imageData</span><span class="p">];</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="n">dispatch_release</span><span class="p">(</span><span class="n">queue</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Aquí hi ha algunes línies que els sonaran a xinès, no obstant això explicaré una mica per damunt que està succeint.</p>

<p>Al parsearse les dades aquests són emmagatzemats en el array <code>tweets</code>, però els tweets dins del, són emmagatzemats en forma de diccionaris, fàcilment recuperables usant la classe <code>NSDictionary</code>. Llavors recuperem cada camp d&#8217;aquest array en un diccionari que jo he anomenat <code>tweet</code> per fer-ho més identificable (en realitat això és el que representa). Com ja saben, accedim als valors d&#8217;un diccionari a través de keys, però quines són aquestes keys?, ens anem a la <a href="https://dev.twitter.com/docs/platform-objects/tweets">documentació oficial</a> i ho mirem allí. El que fem és simplement mostrar el text del tweet com a títol i el nom &#8220;del que tweetea&#8221; com subtitulo en cada cel·la.</p>

<p>Per mostrar la imatge el que fem és usar el <strong>GCD</strong> (Grand Central Dispatch) d&#8217;Apple. A grans trets explicar-los que la descàrrega de dades de la xarxa sempre deuria ser de forma asíncrona, això és perquè és un procés que triga una mica a dur-se a terme i per tant no pot fer-se en el mateix thread (fil) ja que podem bloquejar-ho, i això deixaria inutilitzable la interfície d&#8217;usuari fins que es completi el procés, cosa que pel bé dels nostres usuaris, no volem. Doncs aquest problema ho soluciona el <strong>GCD</strong>, fent que certs mètodes s&#8217;executin de forma asíncrona (en un altre fil o thread), d&#8217;aquesta forma evitem bloquejar la interfície d&#8217;usuari.</p>
<h2>Enviant un tweet</h2>
<p>Doncs fer això és una mica més del mateix. Jo he creat un nou controlador per fer això anomenat <code>EnviarTweetViewController</code>, el qual es mostra en una finestra modal i té un TextView i dos botons: un per enviar el tweet i un altre per cancel·lar l&#8217;operació.</p>

<p>El d&#8217;enviar el tweet executa el mètode <code>enviarTweet:</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">enviarTweet:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// comprovem si el camp per escriure el tweet no està buit</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tweet</span><span class="p">.</span><span class="n">text</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;https://api.twitter.com/1.1/statuses/update.json&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">parametros</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                                    <span class="n">self</span><span class="p">.</span><span class="n">tweet</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">@&quot;status&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">SLRequest</span> <span class="nl">requestForServiceType:</span><span class="n">SLServiceTypeTwitter</span>
</span><span class='line'>                                                <span class="nl">requestMethod:</span><span class="n">SLRequestMethodPOST</span>
</span><span class='line'>                                                          <span class="nl">URL:</span><span class="n">url</span>
</span><span class='line'>                                                   <span class="nl">parameters:</span><span class="n">parametros</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// assignem el compte que usarem per publicar el tweet</span>
</span><span class='line'>        <span class="p">[</span><span class="n">request</span> <span class="nl">setAccount:</span><span class="n">self</span><span class="p">.</span><span class="n">cuenta</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">[</span><span class="n">request</span> <span class="nl">performRequestWithHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">responseData</span><span class="p">,</span> <span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">urlResponse</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'>         <span class="p">{</span>
</span><span class='line'>             <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">resultado</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">responseData</span>
</span><span class='line'>                                                                       <span class="nl">options:</span><span class="n">kNilOptions</span>
</span><span class='line'>                                                                         <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>         <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">cancelar:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Com podeu observar es fa exactament el mateix. Tan solament canvien els paràmetres, la URL i el mètode de la petició, i tot això el podem trobar en la documentació oficial.</p>

<p>A diferència de l&#8217;anterior, aquí no accedim a tots els comptes del dispositiu, sinó que simplement passem a aquest controlador el compte que hem obtingut abans, així ens assegurem que el compte que està seleccionada és des de la qual s&#8217;envia el tweet i sobre la qual es fan les operacions sol·licitades. No hi ha misteri.</p>
<h2>Conclusió</h2>
<p>El procediment per dur a terme totes aquestes accions en Twitter porten la mateixa estructura. Tan solament varien els paràmetres, la URL i el mètode de la petició. Pel que, si volem fer qualsevol cosa,  hem d&#8217;anar a la documentació i mirar el que necessitem. Després reemplaçar les dades que hem vist abans amb els nous, enviar la petició i mostrar a l&#8217;usuari les dades obtingudes. Així de fàcil és treballar amb el Social Framework.</p>

<p>Ara pots passar-te per la <a href="http://securelink.thxou.com/?https://developer.apple.com/library/ios/documentation/Social/Reference/SLRequest_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40012234">documentació d&#8217;Apple</a> sobre aquest tema i també visitar el nostre tutorial sobre com parsear i manipular fitxers JSON de forma nativa i així estendre una mica més els teus coneixements.</p>
<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/c0bb4xgyatv10t5nhvll"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Trabajando con el Social Framework de iOS 6: Publicar en Twitter y Facebook]]></title>
    <link href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-facebook/"/>
    
    <updated>2012-09-20T02:00:25+02:00</updated>
    <id>http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-facebook</id>
    
    <content type="html"><![CDATA[<p>Aquí les traigo un tutorial bastante fresco sobre el recién nacido<strong> iOS 6</strong>. Como sabéis cada nuevo iOS trae consigo muchas novedades y este no va a ser la excepción, tenemos cientos de nuevas APIs y cambios con respecto a iOS 5, y por si fuera poco también tenemos 3 nuevos frameworks para estudiar e implementar en nuestras apps. Queda aún trabajo por hacer.</p><p>Hoy voy a comenzar con el primero de una serie de tutoriales para ir introduciéndonos en el mundillo de iOS 6 poco a poco. Empezaré con uno de los 3 nuevos frameworks que incluye este nuevo iOS: el <strong>Social Framework</strong>.</p><p>Este framework reemplaza al de Twitter y se hace más generico para ser compatible con las redes sociales de Facebook y Sina Weibo (la de los chinos). Lo genial es que implementarlo en nuestras apps es sencillo, nosotros de momento vamos a publicar nuestro estado en Twitter y Facebook a través de la interfaz nativa del framework. Tiene otras aplicaciones como mostrar el timeline y hacer follows en Twitter y cosas así, pero estas las veremos más adelante ya que son un poco (y solo un poco) más complejas.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-31-at-17.31.57.png"><img class="aligncenter size-full wp-image-2285" style="border: 2px solid black; margin-top: 15px; margin-bottom: 15px;" title="social-framework-ios6-thxou" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-31-at-17.31.57-e1346428236807.png" alt="" width="319" height="194" /></a></p><p>Una de las 2 clases que componen el Social Framework es <code>SLComposeViewController</code>, esta clase te permite mostrar una vista al usuario desde la cual el puede componer y publicar un mensaje en cualquiera de las redes sociales mencionadas arriba, incluyendo una imagen o URL con el mensaje.</p><!--more--><h2 dir="ltr">Empezando con iOS 6 y el framework</h2><p>Lo primero es tener Xcode 4.5 y el SDK de iOS 6 instalado, luego tener una cuenta de facebook y/o twitter configurada en el dispositivo.</p><p>Abrimos Xcode 4.5 y añadimos el <em>Social Framework</em> a nuestro proyecto. Para esto como ya sabemos nos vamos a la raiz del proyecto, seleccionamos nuestro target y en la pestaña <strong>Summary</strong> encontraremos el apartado <strong>Linked Frameworks and Libraries </strong>desde donde podemos agregarlo.</p><p>Acto seguido importamos en nuestro controlador la correspondiente cabecera y ya estamos listo para empezar a usarlo:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Social/Social.h&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Diferencias con el framework de Twitter</h2><p>Este nuevo framework es casi idéntico al anterior de Twitter, a grandes razgos la única diferencia que vamos a encontrar es en la forma de inicializar la clase, ya que en esta nueva tenemos que especificar el tipo de servicio al que nos estamos refiriendo, este servicio está definido en la propiedad <code>serviceType</code> y puede tener los siguientes valores:</p><ul><li><code id="jumpTo_14">SLServiceTypeFacebook</code></li><li><code id="jumpTo_15">SLServiceTypeTwitter</code></li><li><code id="jumpTo_16">SLServiceTypeSinaWeibo</code></li></ul><p>Uno para cada red social, vamos. Por lo tanto, mientras en el de Twitter hacíamos una inicialización normal con alloc e init, en este nuevo le pasamos el servicio, de manera que nos queda así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">SLComposeViewController</span> <span class="o">*</span><span class="n">twitter</span> <span class="o">=</span> <span class="p">[</span><span class="n">SLComposeViewController</span> <span class="nl">composeViewControllerForServiceType:</span><span class="n">SLServiceTypeTwitter</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Luego hay que hacer la comprobación de que el servicio es accesible y de si hay por lo menos una cuenta configurada para ese servicio en concreto en el dispositivo:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">SLComposeViewController</span> <span class="nl">isAvailableForServiceType:</span><span class="n">SLServiceTypeTwitter</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Esto devuelve <code>YES</code> o <code>NO</code> dependiendo de la configuración que haya. Si nos devuelve <code>YES</code> vamos a mostrar la interfaz, de lo contrario mostraremos un error.</p><h2>Mostrando la interfaz</h2><p>Supongamos que todo ha ido bien hasta ahora en el código, pues ya estamos listos para mostrar al usuario la intefaz, así que primero vamos a dar algunos valores iniciales a los campos. Este paso si que es idéntico al del framework de Twitter ya que tiene las mismas propiedades con los mismos nombres:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// ponemos un texto inicial para la publicación</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">setInitialText:</span><span class="n">self</span><span class="p">.</span><span class="n">tvPost</span><span class="p">.</span><span class="n">text</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// añadimos una imagen a nuestra publicación</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">addImage:</span><span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;logo_thxou.png&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// añadimos también una URL</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">addURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// asignamos el completionHandler para manipular los resultados del envío</span>
</span><span class='line'><span class="p">[</span><span class="n">twitter</span> <span class="nl">setCompletionHandler:</span><span class="n">completionHandler</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// por último mostramos la interfaz de publicación</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">twitter</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Tener muy en cuenta de asignar las propiedades antes de presentar la vista al usuario, de lo contrario os va a retornar un <code>NO</code> y la imagen o URL no se va a cargar junto con el mensaje. También os puede retornar <code>NO</code> si la imagen es demasiado grande o si hay demasiados caracteres en la URL, no obstante esto depende de las restricciones de que Twitter y Facebook ponen en las respectivas páginas oficiales de sus APIs.</p><p>Hecho todo esto presentamos al usuario la interfaz como lo haríamos con cualquier controlador.</p><h2>Manipular los resultados</h2><p>Lo único que nos queda por hacer es comunicarle al usuario si se ha enviado correctamente la publicación o no, para esto tenemos los resultados del envío devueltos en el argumento <code>result</code> de la propiedad <code>completionHandler</code> de la clase. Esta propiedad es un objeto de tipo bloque y es llamada justo antes de cerrase la interfaz de envío. Ya que el bloque es lo último que se va a ejecutar, tenemos que cerrar la interfaz dentro de este bloque:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// manipulamos los mensajes de error si hay usando la propiedad completionHandler</span>
</span><span class='line'><span class="n">SLComposeViewControllerCompletionHandler</span> <span class="n">completionHandler</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">SLComposeViewControllerResult</span> <span class="n">result</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">SLComposeViewControllerResultCancelled:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;La publicación ha sido cancelada.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">SLComposeViewControllerResultDone:</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Se ha publicado satisfactoriamente.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>
<h2>Conclusión</h2><p>Como hemos podido observar es realmente sencillo mostrar la interfaz de envío por defecto al usuario. No obstante esto tiene sus limitaciones evidentes, como la de querer saltarse la interfaz y enviar directamente el mensaje a Twitter. En el <a href="http://www.thxou.com/2012/09/20/trabajando-con-el-social-framework-de-ios-6-publicar-en-twitter-y-obtener-el-timeline/">siguiente tutorial</a> veremos como hacer todo esto y alguna cosa más, es un poco más complejo, pero como veréis el framework lo hace todo mucho más sencillo y hace mucho trabajo por nosotros.</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/qv5nu4k6jh00fhttgz89"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[iOS 6 Golden Master ya disponible para los desarrolladores]]></title>
    <link href="http://www.thxou.com/2012/09/13/ios-6-golden-master-ya-disponible-para-los-desarrolladores/"/>
    
    <updated>2012-09-13T01:02:46+02:00</updated>
    <id>http://www.thxou.com/2012/09/13/ios-6-golden-master-ya-disponible-para-los-desarrolladores</id>
    
    <content type="html"><![CDATA[<p><a href="http://www.thxou.com/2012/09/05/keynote-para-el-12-de-setiembre/">Tal y como se esperaba</a>, hoy ha habido keynote y con muchas novedades interesantes: iPhone 5, nuevo iPod Nano, iOS 6, etc. Para todos los desarrolladores también ha salido la versión Golden Master del iOS 6 y la pueden descargar desde ya.</p><p>Para los que no lo saben, una versión Golden Master es una versión &#8220;casi&#8221; final, osea que es muy probable que la versión final sea similar o igual a esta.</p><p>Según Apple, la versión final de iOS 6 estará viendo la luz el <strong>19 de setiembre</strong> y estará disponible únicamente para el iPhone 3GS, iPhone 4, iPhone 4S, iPod Touch 4G, iPad 2 y el nuevo iPad.</p><p>Aquí en el blog presentaremos tutoriales sobre iOS 6 el mismo día de la salida de la versión final, por lo tanto si eres desarrollador y quieres ir estando al tanto de lo nuevo de este OS, no olvides volver periódicamente.</p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Parsear y crear ficheros en formato JSON en iOS]]></title>
    <link href="http://www.thxou.com/2012/09/11/parsear-y-crear-ficheros-en-formato-json-en-ios/"/>
    
    <updated>2012-09-11T13:36:19+02:00</updated>
    <id>http://www.thxou.com/2012/09/11/parsear-y-crear-ficheros-en-formato-json-en-ios</id>
    
    <content type="html"><![CDATA[<p>Desde la salida de iOS 5 Apple incluyó en su API la clase <code>NSJSONSerialization</code>, la cual nos permite convertir objetos JSON en objetos de Objective-C (que ya tocaba también) y viceversa de manera sencilla.</p>

<p>Para los que no saben que es JSON (JavaScript Object Notation), es un tipo de sintaxis que nos permite representar porciones grandes o pequeñas de datos para poder almacenarlos y/o intercambiarlos con otros entornos. Mucho más sencillo y pequeño que XML y además más rápido de parsear. Usa exactamente la misma sintaxis que usa JavaScript para crear objetos pero es totalmente independiente del lenguaje. Esta y otras cosas son las cosas que lo hacen atractivo para empresas como Twitter, Yahoo, Google, etc., que ya tienen sus APIs adaptadas a JSON desde hace un tiempo, además que facilita las cosas al programador y ahora veremos hasta que punto.</p>
<h2>La sintaxis de JSON</h2>
Es muy sencillo aprender la notación de JSON ya que tan solo hay 3 cosas para considerar:
<ol>
	<li>Los datos son pares de nombres y valores separados por comas.</li>
	<li>Los objetos están encerrados entre llaves ({ }).</li>
	<li>Los arrays están encerrados entre corchetes ([ ]).</li>
</ol>
<p>Esto se cumple para todo en el fichero, también para los objetos que van anidados dentro de los arrays. No obtante solo se permiten cierto tipo de objetos, y son: <code>NSString</code>,  <code>NSNumber</code>,  <code>NSArray</code>,  <code>NSDictionary</code> o <code>NSNull</code>, de manera que si quieres meter objetos como por ejemplo <code>NSDate</code>, vas a tener que convertirlos a <code>NSString</code>antes o algún objeto compatible. Un fichero de JSON luce así por dentro:</p><!--more-->

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;nombre&quot;</span> <span class="o">:</span> <span class="s">&quot;ThXou&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;web&quot;</span> <span class="o">:</span> <span class="s">&quot;thxou.com&quot;</span>
</span><span class='line'>    <span class="s">&quot;aficiones&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="s">&quot;titulo&quot;</span> <span class="o">:</span> <span class="s">&quot;Fútbol&quot;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="s">&quot;titulo&quot;</span> <span class="o">:</span> <span class="s">&quot;Snowboard&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Aquí podemos identificar que todo eso es un objeto (va encerrado entre { }) y luego tiene varios datos, entre ellos un array (aficiones) que contiene a su vez 2 objetos con un dato por objeto (título). Se cumplen los 3 puntos de arriba en todos los casos, esto es algo a considerar siempre. También hay que considerar que el nivel más alto del fichero JSON debe ser o un <code>NSDictionary</code> o un <code>NSArray</code>para que este sea válido.</p>
<h2>Parseando JSON desde una URL</h2>
<p>Nuestra información en JSON está alojada en un sitio web, así que tenemos primero que descargar esta información y convertirla en un objeto manipulable, por eso usamos el método <code>dataWithContentsOfURL:options:error:</code> y hacemos la conversión a <code>NSData</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// creamos un botón para generar el JSON</span>
</span><span class='line'>    <span class="n">UIBarButtonItem</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Generar JSON&quot;</span>
</span><span class='line'>                                                             <span class="nl">style:</span><span class="n">UIBarButtonItemStylePlain</span>
</span><span class='line'>                                                            <span class="nl">target:</span><span class="n">self</span>
</span><span class='line'>                                                            <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">generarJSON:</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">navigationItem</span><span class="p">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="n">json</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">json</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// indicamos la url desde donde tomaremos los datos</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://dl.dropbox.com/u/270074/iOSTutorials/JSON/test.json&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">urlData</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSData</span> <span class="nl">dataWithContentsOfURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">empezarAParsear:</span><span class="n">urlData</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Simplemente usamos el método <code>viewDidLoad:</code> para descargar esta información al inicio de la carga del controlador. Hay que saber que la descarga de información en el hilo principal (Main thread) podría bloquear la interfaz gráfica, a nosotros no nos sucede debido a que descargamos muy poca información. Si vas a descargar grandes cantidades de datos es necesario hacerlo en segundo plano.</p>

<p>Antes de iniciar la descarga creamos un botón que más adelante nos va a permitir generar datos en formato JSON a partir de lo que ya tenemos parseado. Luego de la descarga, toda la información va a estar contenida en un objeto <code>NSData</code>. La clase <code>NSJSONSerialization</code> tiene el método <code>JSONObjectWithData:options:error:</code>, el cual nos permite parsear el contenido de este objeto.</p>

<p>Como hemos dicho antes el nivel más alto del ficher0 en JSON debe ser un diccionario o un array, en nuestro caso es un diccionario con una única key llamada <em>comunidades</em>; esta a su vez es un array con otros objetos dentro. Por lo tanto vamos a parsear la información directamente a un objeto <code>NSDictionary</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">empezarAParsear:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">urlData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// parseamos los datos de la URL</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">jsonDic</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">urlData</span>
</span><span class='line'>                                                            <span class="nl">options:</span><span class="n">kNilOptions</span>
</span><span class='line'>                                                              <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// si hubo algún error en el parseo lo mostramos</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">error</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;ERROR: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">error</span> <span class="n">localizedDescription</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">comunidades</span> <span class="o">=</span> <span class="p">[</span><span class="n">jsonDic</span> <span class="nl">objectForKey:</span><span class="s">@&quot;comunidades&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>La propiedad <code>comunidades</code> almacena el array contenido en el fichero bajo la key <em>comunidades</em>. El paso que queda ahora es mostralo. Como puede observar, uno de los argumentos del método <code>JSONObjectWithData:</code> es <code>options:</code>. Este argumento puede tener 3 valores diferentes según la configuración que se quiera tener en cuenta al momento de parsear el fichero. Yo he puesto <code>kNilOptions</code>que equivale a 0, o a no elegir ninguna opción más concretamente, pero tu podría elegir entre estos 3:</p>
<ol>
	<li><code><strong>NSJSONReadingMutableContainers:</strong></code> Los arrays y diccionarios son creados como objetos mutables, es decir que pueden ser cambiados en cualquier momento, incluso antes de comenzar el parseo.</li>
	<li><code><strong>NSJSONReadingMutableLeaves:</strong></code> Todos los strings contenidos serán creados como mutables.</li>
	<li><code><strong>NSJSONReadingAllowFragments:</strong></code> Permite el parseo de objetos en el nivel más alto del fichero pero no sean arrays o diccionarios.</li>
</ol>
<h2>Mostrando el contenido</h2>
<p>Para que se vea más claro he usado un <code>TableView</code> para mostrar los datos parseados. Primero obtenemos la información de cada comunidad en el diccionario <code>comunidad</code> y segundo la vamos mostrando formateada a medida que se van recorriendo las filas de la <code>TableView</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">comunidad</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">comunidades</span> <span class="nl">objectAtIndex:</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">comunidad</span> <span class="nl">objectForKey:</span><span class="s">@&quot;nombre&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">subtitle</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Superficie: %@ - %@%%&quot;</span><span class="p">,</span>
</span><span class='line'>                      <span class="p">[</span><span class="n">comunidad</span> <span class="nl">objectForKey:</span><span class="s">@&quot;superficie&quot;</span><span class="p">],</span>
</span><span class='line'>                      <span class="p">[</span><span class="n">comunidad</span> <span class="nl">objectForKey:</span><span class="s">@&quot;porcentaje&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">detailTextLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">subtitle</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Todo esto lo hacemos en el método <code>tableView:cellForRowAtIndexPath:</code> el cual va ser el encargado de llenar los campos del <code>TableView</code> con la información correspondiente.</p>
<p style="text-align: center;"><img class="aligncenter size-full wp-image-2318" style="margin-top: 20px; margin-bottom: 20px;" title="json-data-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-11-at-01.58.03.png" alt="" width="418" height="244" /></p>

<h2>Generando datos en formato JSON</h2>
<p>Ahora haremos el proceso inverso. Ahora convertiremos datos de un array a datos en formato JSON. Para hacer esto hay un botón en la barra de navegación del TableView que creamos en el <code>viewDidLoad:</code>, y que al ser presionado ejecuta el método <code>generarJSON:</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">generarJSON:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// generamos los datos en JSON</span>
</span><span class='line'>    <span class="n">NSData</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">dataWithJSONObject:</span><span class="n">self</span><span class="p">.</span><span class="n">comunidades</span>
</span><span class='line'>                                                   <span class="nl">options:</span><span class="n">NSJSONWritingPrettyPrinted</span>
</span><span class='line'>                                                     <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// convertimos los datos a un string para poder mostrarlos</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">jsonString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">json</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// los mostramos en un alertView</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alerta</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="nb">nil</span>
</span><span class='line'>                                                     <span class="nl">message:</span><span class="n">jsonString</span>
</span><span class='line'>                                                    <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                           <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;Ok&quot;</span>
</span><span class='line'>                                           <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alerta</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">alerta</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">jsonString</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>Para no hacer mucho más largo este tutorial simplemente hemos convertido toda la información que ya estaba parseada nuevamente a formato JSON, esto lo hemos hecho con el método <code>dataWithJSONObject:options:error</code>. Este método también tiene un argumento <code>options:</code>, pero en este caso solo tiene una opción:</p>
<ol>
	<li><strong><code>NSJSONWritingPrettyPrinted:</code></strong> Con esta opción se hace la conversión pero la devuelve en un formato más legible y ordenado (tal y como verás al presionar el botón). Si por el contrario deseas compactar más el string devuelto (sin espacios ni tabuladores), puedes pasarle la opción <code>kNilOptions</code>.</li>
</ol>
<p>Luego de hacer la conversión mostramos los datos en una ventana de alerta.</p>

<p>Hay otro método que se puede usar para comprobar si es que la información que deseamos convertir a JSON se puede convertir o no. Este método es <code>isValidJSONObject:</code> y devuelve <code>YES</code> si es posible hacer la conversión y <code>NO</code> de lo contrario. Su uso es muy sencillo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">NSJSONSerialization</span> <span class="nl">isValidJSONObject:</span><span class="n">self</span><span class="p">.</span><span class="n">comunidades</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// realizamos la conversión</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// mostramos un error</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Conclusión</h2>
<p>Es muy sencillo implementar esta funcionalidad como han podido ver. Tan solo hay un par de métodos que realmente usamos de esta clase, el resto son arreglos que nos permiten mostrar el contenido de acuerdo a nuestros gustos.</p>

<p>Recordar que no todos los formatos se pueden convertir a JSON, para los que no, hay que hacer otro tipo de conversiones. Un ejemplo es si vamos a pasar un objeto <code>NSDate</code>, podemos usar el método <code>stringFromDate:</code> de la clase <code>NSDateFormatter</code> para convertirlo a un string, y luego volver a recuperarlo con el método <code>dateFromString:</code>.</p>

<p>Esto es todo. Cualquier duda no dudéis en usar los comentarios.</p>
<p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/h0aqzhe33t86icmkqxkm"><img title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Keynote para el 12 de setiembre]]></title>
    <link href="http://www.thxou.com/2012/09/05/keynote-para-el-12-de-setiembre/"/>
    
    <updated>2012-09-05T23:00:49+02:00</updated>
    <id>http://www.thxou.com/2012/09/05/keynote-para-el-12-de-setiembre</id>
    
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/09/entrada-iphone5.jpeg"><img class="size-full wp-image-2308" title="entrada-iphone5-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/entrada-iphone5.jpeg" alt="" width="535" height="480" /></a></p><p>Parece que ya está confirmada a los medios una <strong>Keynote para el día 12 de setiembre</strong>, fecha tan esperada por algunos por la posible salida del iPhone 5 e iOS 6. Lo del iPhone 5 no está confirmado pero la sombra de la imagen de arriba sugiere mucho no?, esperemos que así sea y no nos llevemos una decepción como con la salida del iPhone 4S. El evento se va a realizar en el Yerba Buena Center en San Francisco según los medios a las 10 de la mañana de allí, 19:00 hora española.</p><p>Se espera el iOS 6 ya que 12 de setiembre es la fecha de caducidad de la beta 4 del SO, aquí en el blog tendremos preparados unos cuantos tutoriales para que vayáis aprendiendo sobre los nuevos frameworks de iOS 6 el día mismo de la salida.</p><p>Se estima que el dispositivo esté listo para la venta en Estados Unidos como en las otras ocasiones para el día<strong> 21 de setiembre</strong>, y si los cálculos son buenos, lo tendremos por España más o menos por el <strong>5 de Octubre</strong>.</p><p>A ver si los que tenemos dispositivos antiguos, el iPhone 3GS en mi caso, ya podemos jubilarlos por uno como este.</p><p style="text-align: right;">Fuente | <a href="http://securelink.thxou.com/?http://www.actualidadiphone.com/2012/09/05/posibles-fechas-de-lanzamiento-del-nuevo-iphone/">ActualidadIphone</a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Aprender a usar URL Schemes en iOS - URL personalizada]]></title>
    <link href="http://www.thxou.com/2012/09/03/aprender-a-usar-url-schemes-en-ios-url-personalizada/"/>
    
    <updated>2012-09-03T22:40:06+02:00</updated>
    <id>http://www.thxou.com/2012/09/03/aprender-a-usar-url-schemes-en-ios-url-personalizada</id>
    
    <content type="html"><![CDATA[<p>Las URL Schemes permiten a las aplicaciones comunicarse, enviar y recibir mensajes y ejecutar acciones entre si a través de una URL personalizada. Pongamos un ejemplo, tenemos una aplicación que permite mostrar direcciones en el mapa, pues podríamos usar URL Schemes para que cualquier aplicación pudiera abrir direcciones en el mapa de nuestra aplicación.</p><p>Apple también tiene sus propias URL Schemes y seguramente las habrás visto en acción en páginas web que contienen números de teléfono y estos aparecen como enlaces, y cuando presionas en ellos se lanza la aplicación teléfono que hace una llamada a ese número, pues bien, aquí se utiliza la URL <code>tel:</code>. También están <code>mailto:</code> (para el correo),<code> sms:</code> y peticiones con <code>http</code> para los mapas y la aplicación de YouTube.</p><h2>Registrando nuestra URL Scheme</h2><p>Nosotros vamos a definir nuestra propia URL y para hacer esto hay 2 formas. La primera es a través del fichero <em>info.plist</em>. Como ya sabéis, este fichero esta compuesto por pares key-valor, así que añadimos una nueva key llamada <code>CFBundleURLTypes</code> (Al presionar enter aparecerá &#8221;<em>URL types</em>&#8221;). Veremos que es un array de diccionarios y solo contiene uno y dentro una key llamada &#8221;<em>URL Identifier</em>&#8221; (Su nombre original es <code>CFBundleURLName</code>), cuyo valor puede ser cualquiera, Apple recomienda que para que sea completamente único podríamos usar el de nuestro <em>Bundle Identifier</em>, en el caso de la app de ejemplo de este tutorial es: <code>com.thxou.scheme</code>.</p><p>Ahora agregamos a este diccionario una nueva key llamada <code>CFBundleURLSchemes</code> para definir el nombre de nuestra URL, al presionar enter su nombre cambiará a &#8221;<em>URL Schemes</em>&#8221;. En este array de strings vamos a definir nuestras URL (Porque puede haber más de una) poniendo el nombre con el que queremos que se abra nuestra app. Al poner el nombre hay que tener en cuenta 2 cosas:</p><ol><li>Cuidar que el nombre no sea uno de los ya definidos por Apple, ya que ellos dan prioridad a las aplicaciones nativas antes que a la tuya.</li><li>Cuidar que el nombre no sea el de cualquier otra aplicación, el SO actualmente no sabe como reconocer cual es la aplicación a la que pertenece el URL Scheme, por lo tanto puede que ninguna App se abra.</li></ol><p>El esquema final debe lucir más o menos así:</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-03-at-16.53.39.png"><img class="size-full wp-image-2293" title="url-scheme-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-03-at-16.53.39-e1346693423467.png" alt="" width="470" height="108" /></a></p><p>Si ahora mismo escribes <code>scheme://</code> en Safari, se abrirá inmediatamente la aplicación.</p><p>La segunda forma es más fácil. Ir a la raíz del proyecto, seleccionar el target de nuestra aplicación, luego la pestaña <strong>Info</strong> y al final de todo veremos el apartado <strong>URL Types</strong>, desde aquí también podemos añadir nuevas URL Schemes presionando el botón de abajo llamado <strong>Add</strong> y seleccionando <strong>Add URL Type</strong>.</p><p style="text-align: center;"><img class="size-full wp-image-2294" title="url-scheme-add-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/09/Screen-Shot-2012-09-03-at-17.07.25.png" alt="" width="195" height="144" /></p><h2>Recibiendo la URL</h2><p>Como en principio se abrirá la aplicación y no hará nada, vamos a pasarle información en esa URL y a mostrarla en la vista principal. El encargado de manipular la URL que viene desde afuera es el delegado de la aplicación (el AppDelegate de toda la vida) y para hacer esto necesita implementar el método <code>application:openURL:sourceApplication:annotation</code>. La secuencia que sigue la aplicación cuando se le pide que abra una URL es la siguiente:</p><p style="text-align: center;"><img class="wp-image-2295" style="margin-top: 10px; margin-bottom: 10px;" title="schemes" src="http://www.thxou.com/wp-content/uploads/2012/09/schemes.png" alt="" width="409" height="264" /></p><p>Este es el proceso cuando la aplicación no está abierta. Si está abierta la única posibilidad es que esté en background, así que en vez de la parte de inicialización, se ejecuta el método <code>applicationWillEnterForegound:</code>, esto se debe a que se necesita que la aplicación esté ejecutándose en primer plano, entonces la aplicación es pasada a este estado y luego es ejecutado el método <code>application:openURL:sourceApplication:annotation</code>.</p><p>Para no hacer las cosas más complicadas vamos a pasar simples textos a través de la URL, es solo para mostrar el funcionamiento de este sistema. La URL que vamos a ejecutar desde Safari va a ser: <code>scheme://cualquiercosa/parametro1/parametro2</code>. Ahora nos toca implementar el método correspondiente:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">openURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span> <span class="nf">sourceApplication:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">sourceApplication</span> <span class="nf">annotation:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">annotation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// comprobamos que se ha recibido una url</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([[</span><span class="n">url</span> <span class="n">scheme</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;scheme&quot;</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// obtenemos el host de la url. En este caso será &quot;cualquiercosa&quot;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">urlHost</span> <span class="o">=</span> <span class="p">[</span><span class="n">url</span> <span class="n">host</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// obtenemos el path de la url por partes. No se cuenta el host</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">urlComponents</span> <span class="o">=</span> <span class="p">[</span><span class="n">url</span> <span class="n">pathComponents</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// componemos el string a mostrar</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">texto</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Contenido de la URL:</span><span class="se">\n\n</span><span class="s">Host: %@</span><span class="se">\n</span><span class="s">Parámetros:</span><span class="se">\n</span><span class="s">1. %@</span><span class="se">\n</span><span class="s">2. %@&quot;</span><span class="p">,</span> <span class="n">urlHost</span><span class="p">,</span> <span class="p">[</span><span class="n">urlComponents</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="n">urlComponents</span> <span class="nl">objectAtIndex:</span><span class="mi">2</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// lanzamos un alertView que nos muestre el string</span>
</span><span class='line'>        <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;URL Scheme&quot;</span>
</span><span class='line'>                                                        <span class="nl">message:</span><span class="n">texto</span>
</span><span class='line'>                                                       <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                              <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;Ok&quot;</span>
</span><span class='line'>                                              <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">alert</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// si no hay URL retornamos NO</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Después de esto, desde cualquier aplicación pueden enviar información a tu aplicación que tu puedas manipular con solo ejecutar este código desde un botón:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;scheme://cualquiercosa/parametro1/parametro2&quot;</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>
<p>No solo he querido explicar como trabajar con esto, sino también un poco de lo que ocurre detrás, últimamente me estoy aficionando a eso e igual me alargo un poco en los artículos, pero es necesario saber de que va la cosa para aprender bien. A por el próximo : ).</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/li4um1xus3jcpvdcgp3s"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[iOS: Enviar correo electrónico desde la aplicación]]></title>
    <link href="http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion/"/>
    
    <updated>2012-08-07T19:06:11+02:00</updated>
    <id>http://www.thxou.com/2012/08/07/ios-enviar-correo-electronico-desde-la-aplicacion</id>
    
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo-1.png"><img title="photo-1" src="http://www.thxou.com/wp-content/uploads/2012/08/photo-1-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo-1.png"><br /> </a></p><p>Mientras trabajaba en mi aplicación <a href="http://itunes.apple.com/us/app/listed/id461792168?ls=1&amp;mt=8">Listed</a> quise que los usuarios pudieran enviar sus listas por correo, y la verdad pensé que iba a ser difícil de hacer pero no fue así.</p><p>Apple provee una clase llamada <code>MFMailComposeViewController</code> dentro del framework <em>MessageUI</em> que hace muy sencillo el hecho de enviar correos sin tener que salir de la aplicación siquiera, esto, a través de la misma interfaz que usas en la aplicación Mail. Además te permite definir el contenido inicial de los campos del correo y también enviar uno o varios archivos adjuntos, como también provee de funcionalidad para responder a los eventos del usuario como enviar, cancelar o guardar un mensaje de correo.</p><p>La aplicación que toca esta vez va a permitir a los usuarios enviar un correo electrónico desde la aplicación. Usando el único método del delegado <code>MFMailComposeViewControllerDelegate</code>, vamos a mostrar al usuario mensajes dependiendo de si el correo se ha enviado, cancelado, guardado en borradores o ha fallado en el envío.</p><p>[note]<strong>Nota:</strong>Es importante resaltar que cuando hablo de envío, me refiero a que el correo ha sido puesto en la cola de envío (carpeta de Salida en Mail), <strong>no que ya se ha enviado</strong>. Lo mismo para cuando cancelamos el envío, en realidad quiere decir que el correo no se ha puesto en la cola de envío.[/note]</p><h2>Preparando el terreno</h2><p>Para este proyecto he creado uno de tipo <em>Single View Application</em> y le he puesto de nombre &#8221;<em>emailMe</em>&#8221;.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-07-at-16.02.39.png"><img title="framwork-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-07-at-16.02.39.png" alt="" width="258" height="96" /></a></p><p>Lo primero que haremos será añadir el framework <em>MessageUI</em> a nuestra aplicación, luego vamos a definir un <em>Outlet</em> <code>UILabel</code> y una acción, así como también hacemos a <em>ViewController</em> <a href="http://www.thxou.com/2012/04/29/aprendiendo-sobre-delegacion-protocolos-y-la-clase-uialertview/">conforme al protocolo</a> <code>MFMailComposeViewControllerDelegate</code>. Para esto vamos al fichero ViewController.h y ponemos el siguiente código:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &amp;lt;UIKit/UIKit.h&amp;gt;</span>
</span><span class='line'><span class="cp">#import &amp;lt;MessageUI/MessageUI.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">interface</span><span class="err"> </span><span class="n">ViewController</span><span class="err"> </span><span class="o">:</span> <span class="n">UIViewControler</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MFMailComposeViewControllerDelegate</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UILabel</span><span class="err"> </span> <span class="o">*</span><span class="n">estado</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span><span class="err"> </span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="kt">IBOutlet</span><span class="err"> </span><span class="n">UILabel</span><span class="err"> </span><span class="o">*</span><span class="n">estado</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">enviarCorreo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
<p>Acto seguido pasamos a la interfaz de usuario, así que abrimos el fichero <em>ViewController.xib</em> y añadimos simplemente 2 objetos, uno de tipo <code>UIButton</code> y otro <code>UILabel</code>. El botón es para abrir la ventana modal desde donde escribiremos el correo y el label es para mostrar el estado del envío. Una vez añadidos, conectamos el <code>UILabel</code> con el código. Hacemos esto presionando la tecla <em>Ctrl</em> y arrastrando el cursor desde el <em>File&#8217;s Owner</em> hasta el objeto <code>UILabel</code> en el Interface Builder y luego seleccionando el correspondiente de la lista que aparece.</p><h2>Implementación de la funcionalidad</h2><p>Hay un método al que siempre tenemos que llamar antes de mostrar la interfaz de envío de correo, y es: <code>canSendMail</code>, este nos va a servir para verificar si el dispositivo del usuario está habilitado para usar esta característica. En caso contrario, yo he decidido mostrar una alerta diciendo que el dispositivo no soporta el envío de correo.</p><p>Abrimos el ViewController.m para implementar nuestro método creado anteriormente:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">synthetize</span> <span class="n">estado</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">enviarCorreo:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// verificamos si es posible enviar correo desde este dispositivo</span>
</span><span class='line'>    <span class="k">if</span><span class="err"> </span><span class="p">([</span><span class="n">MFMailComposeViewController</span><span class="err"> </span><span class="n">canSendMail</span><span class="p">])</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">MFMailComposeViewController</span> <span class="o">*</span><span class="n">email</span><span class="err"> </span><span class="o">=</span> <span class="p">[[[</span><span class="n">MFMailComposeViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">email</span><span class="p">.</span><span class="n">mailComposeDelegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// definimos el asunto del correo</span>
</span><span class='line'>        <span class="p">[</span><span class="n">email</span><span class="err"> </span><span class="nl">setSubject:</span><span class="s">@&quot;Te envío una Web que mola&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// definimos el contenido inicial del correo</span>
</span><span class='line'>        <span class="n">NSMutableString</span><span class="err"> </span><span class="o">*</span><span class="n">cuerpo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableString</span><span class="err"> </span><span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="err">       </span> <span class="p">[</span><span class="n">cuerpo</span><span class="err"> </span><span class="nl">appendString:</span><span class="s">@&quot;Hey!, he encontrado esta web y me ha gustado : )&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;a href=&#39;http://www.thxou.com&#39;&amp;gt;http://www.thxou.com&amp;lt;/a&amp;gt;&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// asignamos el cuerpo del mensaje y le decimos que lo interprete como HTML</span>
</span><span class='line'>        <span class="p">[</span><span class="n">email</span><span class="err"> </span><span class="nl">setMessageBody:</span><span class="n">cuerpo</span> <span class="nl">isHTML:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">cuerpo</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// adjuntamos una imagen desde nuestro bundle</span>
</span><span class='line'>        <span class="n">UIImage</span><span class="err"> </span><span class="o">*</span><span class="n">imagen</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span><span class="err"> </span><span class="nl">imageNamed:</span><span class="s">@&quot;logo-thxou.png&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSData</span><span class="err"> </span><span class="o">*</span><span class="n">imagenData</span><span class="err"> </span><span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">imagen</span><span class="p">);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">email</span> <span class="nl">addAttachmentData:</span><span class="n">imagenData</span><span class="err"> </span><span class="nl">mimeType:</span><span class="s">@&quot;image/png&quot;</span> <span class="nl">fileName:</span><span class="s">@&quot;thxoulogo&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// mostramos la ventana modal con la interfaz de envío de correo</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="err"> </span><span class="nl">presentViewController:</span><span class="n">email</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="err"> </span><span class="p">{</span>
</span><span class='line'>        <span class="c1">// mostramos una alerta si el dispositivo no puede enviar correo</span>
</span><span class='line'>        <span class="n">UIAlertView</span><span class="err"> </span><span class="o">*</span><span class="n">alert</span><span class="err"> </span><span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span><span class="err"> </span><span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Error&quot;</span>
</span><span class='line'>                                                        <span class="nl">message:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Tu dispositivo no soporta esta característica&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'>                                                       <span class="nl">delegate:</span><span class="nb">nil</span>
</span><span class='line'>                                              <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;OK&quot;</span>
</span><span class='line'>                                              <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">alert</span><span class="err"> </span><span class="n">show</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">alert</span><span class="err"> </span><span class="n">release</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Como veis es muy sencillo implementar esta funcionalidad en una aplicación, con lo poco que hemos escrito ya es posible enviar un correo, no obstante aún nos falta la parte de manipular los eventos que dije al principio.</p><p>El método <code>setMessageBody:isHTML:</code> como puedes observar te permite asignar un contenido inicial para el correo. Si deseas que este contenido sea interpretado como código HTML, lo haces a través etiqueta <code>isHTML:</code>, la cual te permite especificarlo.</p><p>Luego tenemos el método <code>addAttachmentData:mimeType:fileName:</code> que nos va a permitir enviar datos adjuntos al correo. El primer argumento requiere un objeto de tipo <code>NSData</code>, así que lo que sea que queramos enviar tiene que estar primero convertido a este tipo de datos, en mi caso el logo de la web en formato <em>.png</em>.</p><p>El segundo argumento (<code>mimeType:</code>) es el tipo MIME del archivo que vamos a enviar, esto no te lo tienes que inventar ya que es un stardard predefinido y puedes ver el tipo MIME correspondiente a tu archivo en <a href="http://www.iana.org/assignments/media-types/">http://www.iana.org/assignments/media-types/</a>. El tercer argumento es simplemente el nombre que deseas que tenga el archivo cuando sea transferido a su destino. Puedes repetir este método para cada uno de los archivos que desees adjuntar.</p><p>Hay otros métodos como <code>setToRecipients:</code>, <code>setCcRecipients:</code> y <code>setBccRecipients:</code> que cumplen exactamente la misma función que en un correo ordinario.</p><h2>Manipulando el resultado del envío</h2><p>Como se puede ver en la línea 8 del código de arriba, asignamos como delegado a la clase <em>ViewController</em>, por lo tanto esta va a ser la encargada de cerrar la ventana desde donde enviamos el correo y manipular los resultados del envío, por lo tanto se espera que también implemente el método delegado <code>mailComposeController:didFinishWithResult:error:</code> de la clase <code>MFMailComposeViewControllerDelegate</code>. Nosotros si lo haremos:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">mailComposeController:</span><span class="p">(</span><span class="n">MFMailComposeViewController</span><span class="o">*</span><span class="p">)</span><span class="nv">controller</span><span class="err"> </span><span class="nl">didFinishWithResult:</span><span class="p">(</span><span class="n">MFMailComposeResult</span><span class="p">)</span><span class="n">result</span><span class="err"> </span><span class="nl">error:</span><span class="p">(</span><span class="n">NSError</span><span class="o">*</span><span class="p">)</span><span class="n">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="err"> </span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MFMailComposeResultCancelled:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;La operación ha sido cancelada&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MFMailComposeResultSaved:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;El correo ha sido guardado en la carpeta borradores&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MFMailComposeResultSent:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Correo puesto en la cola de envío satisfactoriamente&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">MFMailComposeResultFailed:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">estado</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;No se ha podido enviar o guardar el correo debido a un error&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="err"> </span>   <span class="c1">// cerramos la ventana modal de envío de correo</span>
</span><span class='line'>    <span class="p">[</span><span class="n">controller</span><span class="err"> </span><span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Dependiendo de cual sea el evento, se devuelve un código de resultado diferente, esto nos permite personalizar la respuesta en cada caso.</p><h2>Conclusión</h2><p>Hoy hemos aprendido a enviar un mensaje de correo electrónico desde la misma aplicación. También hemos aprendido a mostrar la interfaz de envío con unos valores iniciales por defecto, así como a interceptar los mensajes de estado del envío del correo. Con respecto a esta clase, no hay mucho más que aprender, tan solo queda un par de cosas relacionadas con los mensajes de error en el método delegado, pero por lo demás, si haz comprendido bien este tutorial, ya puedes decir que dominas la clase <code>MFMailComposeViewController</code> :). No obstante para más detalle acerca de esta clase puedes pasarte por <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/MessageUI/Reference/MFMailComposeViewController_class/Reference/Reference.html#//apple_ref/occ/cl/MFMailComposeViewController">la documentación</a> un momento, que siempre viene bien.</p><p>Espero que les haya gustado y servido. Cualquier duda, objeción o sugerencia la espero en los comentarios.</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/78f56fb99c4d9929957d"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[iOS: Textos con fuente personalizada usando UIFont]]></title>
    <link href="http://www.thxou.com/2012/08/02/ios-textos-con-fuente-personalizada-usando-uifont/"/>
    
    <updated>2012-08-02T03:48:07+02:00</updated>
    <id>http://www.thxou.com/2012/08/02/ios-textos-con-fuente-personalizada-usando-uifont</id>
    
    <content type="html"><![CDATA[<p>Es muy probable que ya te hayas encontrado con algunas aplicaciones que no utilizan el tipo de fuente por defecto del sistema, y que esto, junto con una buena interfaz gráfica, lucen mucho mejor. No tengo ni idea como estos desarrolladores lo han hecho, pero aquí te muestro una forma sencilla de hacerlo usando un método llamado <code>fontWithName:size:</code> de la clase <code>UIFont</code>. Este método de clase nos devuelve un objeto de fuente para un nombre y tamaño personalizado y lo aplicamos a la propiedad font de algunos objetos como: <code>UILabel</code>, <code>UITextField</code>, <code>UITextView</code>, <code>UIButton</code>, etc. Las fuentes personalizadas están disponibles desde iOS 3.2 en adelante, incluido iOS 5, así que asumo que cumples los requisitos para seguir el tutorial sin problemas.</p><p>Vamos a crear un proyecto desde cero para mostrar paso a paso el sencillo procedimiento que hay que seguir para configurar las fuentes y luego utilizarlas. Lo primero es crear un nuevo proyecto, yo he usado un <em>Single View Application</em> y le he puesto de nombre<em> ChangeFont.</em></p><h2>Paso 1. Añadiendo las fuentes</h2><p>Una vez tengamos nuestro proyecto ya creado, vamos a buscar las fuentes que queremos utilizar dentro de nuestra aplicación. Para esto pueden ir a páginas web como <em>fontreactor</em>, que es el lugar de donde yo saqué las mías para hacer este tutorial. Las fuentes deben tener extensión <em><strong>.ttf</strong> u</em> <strong><em>.otf</em></strong>.</p><p>Una vez ya las tengamos descargadas, arrastramos los archivos con extensión <em>.ttf</em> u <em>.otf</em> al árbol de directorios de nuestra aplicación en XCode (El Bundle). Nos saldrá una ventana como esta:</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/copy-to-bundle.png"><img class="aligncenter  wp-image-2225" title="copy-to-bundle-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/copy-to-bundle.png" alt="" width="518" height="350" /></a></p><p>Si no está seleccionado desde antes, pues selecciona la opción: &#8221;<strong>Copy items into destination group&#8217;s folder (id needed)</strong>&#8221;, esto hará que las fuentes (en general cualquier fichero) se copien también en el Bundle de la aplicación y no solo se guarde una referencia a la ubicación original. Aquí también hay algo que notar, y es que en el apartado &#8221;<em>add to targets</em>&#8221;, los targets aparecen sin seleccionar. No seleccionar uno causará que no se muestren las fuentes cambiadas y esto es un problema que más tarde puede ser difícil de descubrir, por lo tanto nosotros lo seleccionaremos y luego daremos click en &#8221;<em>Finish</em>&#8221;.</p><p>En caso de que se te pasara por alto marcar el target en alguna otra aplicación, la solución es seleccionar en la lista de directorios de la izquierda, la raíz del proyecto. Luego seleccionar el target (ChangeFont en nuestro caso) y después ir al apartado &#8221;<strong>Build Phases</strong>&#8221; (Fases de construcción). Aquí encontraremos la fase &#8221;<strong>Copy Bundle Resourses</strong>&#8221;. Cuando la aplicación es compilada para mostrarse en el simulador (o el dispositivo), esta fase se encarga de copiar todo lo que tenemos en la lista al Bundle del ejecutable de la aplicación. Así, al no seleccionar el target anteriormente, no añadimos las fuentes a esta lista y por lo tanto le dijimos a XCode que no incluya las fuentes cuando se compile el proyecto.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-02-at-00.52.03.png"><img class="aligncenter  wp-image-2226" title="Screen Shot 2012-08-02 at 00.52.03" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-02-at-00.52.03.png" alt="" width="563" height="236" /></a></p><p>Así que si no lo hicimos ya, hacemos clic en el botón &#8221;<strong>+</strong>&#8221; y añadimos las fuentes al <em>Copy Bundle Resourses</em>.</p><h2>Paso 2. Configurar el archivo info.plist</h2><p>Lo siguiente será añadir una nueva <em>key</em> al archivo <em>info.plist</em> de la aplicación. Lo abrimos y añadimos una nueva entrada llamada <code>UIAppFonts</code> (Al presionar enter, cambiará automáticamente de nombre a &#8221;<em>Fonts provided by application</em>&#8221;). Esta <em>key</em> es en realidad un array, y en cada campo de este array escribiremos el nombre exacto de cada una de las fuentes que hayamos añadido a nuestro Bundle, con la extensión del fichero incluida como se puede ser en la siguiente imagen.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png"><img title="Screen Shot 2012-08-01 at 21.06.33" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png" alt="" width="499" height="118" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-21.06.33.png"><br /> </a></p><p>Esto sería todo lo que a configurar las fuentes se refiere. Ahora pasemos a tocar un poco de código.</p><h2>Paso 3. Coding!</h2><p>Para mostrar los resultados de esto, he creado 5 Outlets <code>UILabel</code> y los he conectado con sus respectivos <code>UILabel</code> en el <em>Interface Builder</em>, así que lo único que nos queda es asignar a la propiedad <code>font</code> de estos labels, la fuente que queremos utilizar, y como expliqué en el primer párrafo de este artículo, esto lo hacemos a través del método <code>fontWithName:size:</code> de la clase <code>UIFont</code>:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// asignando las fuentes</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente1</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="s">@&quot;appleberry&quot;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente2</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="s">@&quot;BilloDream&quot;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente3</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="s">@&quot;SweetHomeOklahoma&quot;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente4</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="s">@&quot;asongforjennifer&quot;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fuente5</span> <span class="nl">setFont:</span><span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontWithName:</span><span class="s">@&quot;thebeautifulones&quot;</span> <span class="nl">size:</span><span class="n">FONT_SIZE</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Aquí viene lo interesante. Como podéis ver, en la etiqueta <code>fontWithName:</code> se muestra un nombre relacionado, pero no idéntico, al nombre de las fuentes que están en el Bundle. Bien, esto es porque el string con nombre de la fuente que se le tiene que pasar como argumento a este método no es el del nombre del fichero sino el &#8221;<strong>PostScript name</strong>&#8221;. Para saber cual es el <em>PostScript name</em> de una fuente solo tenemos que abrir la aplicación &#8221;<em>Font Book</em>&#8221; que viene con el sistema operativo (Usar spotlight para encontrarlo):</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-20.29.36.png"><img class="aligncenter  wp-image-2228" title="Font-Book-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/Screen-Shot-2012-08-01-at-20.29.36.png" alt="" width="605" height="337" /></a></p><p>Al abrirla tenemos que seleccionar la fuente de la que queremos saber el <em>PostScript name</em> y listo, en la sección de más a la derecha veremos una descripción detallada de la fuente y en la primera línea el <em>PostScript name</em>. Si no vez el tipo de fuente que buscas es porque no la tienes instalada, así que haz doble click en el fichero de la fuente e instala, aparecerá inmediatamente.</p><p>Ahhh, me olvidaba, <code>FONT_SIZE</code> es una constante que he definido más arriba en el código para facilitarme las cosas por si posteriormente deseo cambiar ese valor, así me ahorro no tener que cambiarlos todos uno por uno. Pruébalo, te ahorrarás tiempo.</p><p>Esto es todo. Me iba a dormir pero al final he decidido terminar el tutorial :). La aplicación terminada luce así:</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo.png"><img title="custom-fonts-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/08/photo-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/08/photo.png"><br /> </a></p><p>Espero que os haya servido. En el siguiente botón pueden descargar los archivos del tutorial. No olviden compartir estos tutoriales con la mayor cantidad de gente posible a través de las redes sociales.</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/532775fc78efad105994"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[iOS: Usando NSUserDefaults para asignar configuraciones por defecto]]></title>
    <link href="http://www.thxou.com/2012/07/31/ios-usando-nsuserdefaults-para-asignar-configuraciones-por-defecto/"/>
    
    <updated>2012-07-31T23:41:57+02:00</updated>
    <id>http://www.thxou.com/2012/07/31/ios-usando-nsuserdefaults-para-asignar-configuraciones-por-defecto</id>
    
    <content type="html"><![CDATA[<p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/07/photo-1.png"><img title="MyDefaults-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/07/photo-1-200x300.png" alt="" width="200" height="300" /></a><a href="http://www.thxou.com/wp-content/uploads/2012/07/photo-1.png"><br /> </a></p><p style="text-align: left;">Cada aplicación tiene un sistema de almacenamiento por defecto para cada usuario llamado <strong>User Default System</strong> (Desde ahora <strong>UDS</strong>), el cual está compuesto por una base de datos en la que, a través de unos parámetros y métodos, podemos almacenar y recuperar ciertos valores, que suelen ser pequeñas cantidades de datos que usamos comúnmente en nuestra aplicación. A estos valores por defecto se les llama: preferencias del usuario. Por ejemplo, podríamos querer permitirle a los usuarios elegir cuán periódicamente sincronizar ciertos datos con iCloud, este valor de tiempo lo podemos almacenar en el <strong>UDS</strong> y recuperarlo al inicio de la aplicación.</p><p>Podemos clasificar las preferencias de usuario en 2 categorías: las que cambian frecuentemente y las que no. En esta oportunidad trabajaremos con las que cambian frecuentemente, la otra categoría la veremos en artículos posteriores ya que requiere un poco más de profundidad.</p><p>La clase <code>NSUserDefaults</code> nos permite interactuar con el <strong>UDS</strong>, proveyendo diversos métodos para guardar y recuperar datos desde esta base de datos por defecto.</p><h2 dir="ltr">Algunas características de esta clase</h2><p dir="ltr">Solo existe una única instancia de esta clase por aplicación.</p><p>Una ventaja es el almacenamiento en caché de la información. Un sistema como éste implicaría abrir la base de datos constantemente, en concreto cada vez que el usuario pida información. Para evitar esta constante apertura, la clase almacena los datos en caché. El método <code><a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html#//apple_ref/occ/instm/NSUserDefaults/synchronize">synchronize</a></code> es invocado periódicamente y se encarga de escribir los datos nuevos en caché y de actualizar los ya existentes, y esto lo hace de forma transparente al usuario. No obstante si no deseas esperar a la sincronización automática, puedes usar este método para actualizar los datos inmediatamente, teniendo cuidado de llamarlo sólo cuando hayas hecho alguna modificación. Así nos evitamos una sobrecarga de conexiones con la base de datos.</p><p>Otro punto importante a tener en cuenta es que todos los valores retornados desde la base de datos son inmutables (es decir, que no se pueden modificar), incluso aunque guardaras un valor mutable (por ejemplo una instancia de <code>NSMutableString</code>), al retornarlo al usuario sería inmutable.</p><h2 dir="ltr">Obteniendo y escribiendo datos</h2><p>Explicaré mejor el tema con una mini aplicación que he hecho llamada <em>MyDefaults</em>. Esta aplicación tiene ciertas características que mostrar como: la hora actual a intervalos de tiempo, un mensaje de bienvenida al inicio y la fecha y hora de la última vez que se abrió la aplicación. El primer dato que guardaremos será de tipo float y será el intervalo en segundos en el que se va a actualizar la hora; el segundo es de tipo booleano, nos permitirá definir si queremos, o no, mostrar el mensaje de bienvenida; el tercero es un string que contiene nuestro nombre para mostrarlo en el mensaje de bienvenida y en la vista principal; y el cuarto es de tipo <code>NSDate</code> para la última visita. Podremos personalizar cada uno de estos valores desde una ventana modal llamada: Preferencias.</p><p>Para interactuar con los datos de la base de datos, <code>NSUserDefaults</code> pone a nuestra disposición una serie de métodos de conveniencia. Ahora, qué datos se nos permite guardar y obtener?, concretamente los mismos que en una <em>Property List</em>: <code>NSString</code>, <code>NSNumber</code> (booleanos, integers, floats y doubles), <code>NSDate</code>, <code>NSArray</code> o <code>NSDictionary</code>. Para tipos diferentes a estos podemos archivarlos con <code>NSData</code>, que también nos permite datos de este tipo.</p><p>Como he dicho antes, solo hay una instancia de esta clase por aplicación, así que para acceder a ella usamos el método de clase <code><a href="http://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html#//apple_ref/occ/clm/NSUserDefaults/standardUserDefaults">standardUserDefaults</a>:</code></p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ya tenemos nuestra instancia de la clase, por lo tanto ya podemos obtener y guardar datos. Esto lo hacemos usando los métodos de conveniencia de los que hablé anteriormente (Al final de este artículo hay enlaces hacia la documentación para ver la relación entera de métodos disponibles). Nosotros vamos a obtener y a mostrar estos valores al iniciar el controlador <em>ViewController</em> en el método <code>viewDidLoad:</code>:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// obtenemos el nombre desde la base de datos</span>
</span><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">nombre</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">stringForKey:</span><span class="s">@&quot;kMiNombre&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// mostramos el mensaje de bienvenida con el nombre si el valor</span>
</span><span class='line'><span class="c1">// de la base de datos nos lo permite</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="n">mostrarMensaje</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">boolForKey:</span><span class="s">@&quot;kMostrarMensaje&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">mostrarMensaje</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">mensaje</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;MyDefaults&quot;</span>
</span><span class='line'>                                                      <span class="nl">message:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;Hola %@, bienvenido a MyDefaults&quot;</span><span class="p">,</span> <span class="n">nombre</span><span class="p">]</span>
</span><span class='line'>                                                     <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                            <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;Ok&quot;</span>
</span><span class='line'>                                            <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mensaje</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">mensaje</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// obtenemos la fecha de la ultima visita</span>
</span><span class='line'><span class="n">NSDate</span> <span class="o">*</span><span class="n">ultimaVisita</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">objectForKey:</span><span class="s">@&quot;kUltimaVisita&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// como a esta key le asignamos por defecto nil, comprobamos que no sea (osea que haya alguna</span>
</span><span class='line'><span class="c1">// fecha), de lo contrario mostramos un mensaje alternativo</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ultimaVisita</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// formateamos la fecha y hora obtenida de la base de datos</span>
</span><span class='line'>    <span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="nl">setDateStyle:</span><span class="n">NSDateFormatterMediumStyle</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="nl">setTimeStyle:</span><span class="n">NSDateFormatterMediumStyle</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">lblVisita</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">formatter</span> <span class="nl">stringFromDate:</span><span class="n">ultimaVisita</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">formatter</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">lblVisita</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Hola, esta es la primera vez que accedes : )&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// guardamos la fecha de la última visita</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">forKey:</span><span class="s">@&quot;kUltimaVisita&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Como pueden observar estos métodos son muy intuitivos y son de la forma: <code><em><strong>tipo</strong></em>ForKey:</code>. Donde <em><strong>tipo</strong> </em>es el tipo de dato que quieres obtener, en nuestro caso es <code>float</code>, <code>bool</code>, <code>string</code> y <code>object</code> (para el de tipo <code>NSDate</code>). Las <em>Keys</em>, son simples strings que identifican a un valor en concreto dentro de la base de datos y no pueden haber 2 iguales. Yo he usado unos cuantos objetos <code>UILabel</code> conectados con el <em>Interface Builder</em> para mostrar estos datos de una mejor manera, como también he usado la clase <code>NSDateFormatter</code> para dar formato a la fecha que viene desde la base de datos en caso de que ya se haya guardado alguna antes. Los comentarios en verde te ayudarán a entender mejor cada parte del código.</p><p>Si van un poco más abajo en el código verán que hay un método llamado <code>viewWillApperar:</code>, este método es lanzado cuando la pantalla está a punto de ser mostrada. En este método usamos un objeto <code>NSTimer</code> para programar la actualización de la hora al intervalo de tiempo que hemos obtenido de la base de datos.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Cargamos el valor de la hora. Usaremos un timer para actualizar la hora cada x tiempo</span>
</span><span class='line'><span class="n">NSTimeInterval</span> <span class="n">interval</span> <span class="o">=</span> <span class="p">[</span><span class="n">defaults</span> <span class="nl">floatForKey:</span><span class="s">@&quot;kIntervaloHora&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ponemos el timer en funcionamiento y se actualizará cada &quot;interval&quot; segundos</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="n">interval</span>
</span><span class='line'>                                              <span class="nl">target:</span><span class="n">self</span>
</span><span class='line'>                                            <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">actualizaHora</span><span class="p">)</span>
</span><span class='line'>                                            <span class="nl">userInfo:</span><span class="nb">nil</span>
</span><span class='line'>                                             <span class="nl">repeats:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ya tenemos los datos mostrados en la UI (Interfaz de Usuario) para hacer todos los cambios que creamos convenientes (Hazlos!) y luego guardarlos. Para esto vamos al controlador <em>SettingsViewController</em> y ahí encontraremos el método <code>guardar:</code>, el cual, accionado por el botón <em>&#8220;Guardar&#8221;</em> de la barra de herramientas, nos guardará los datos en la caché para luego sincronizarlos, a través del método <code>syncronize</code>, con la base de datos:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">guardar:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Guardamos el intérvalo de actualización de la hora</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="nl">setFloat:</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">txtHora</span><span class="p">.</span><span class="n">text</span> <span class="n">floatValue</span><span class="p">]</span> <span class="nl">forKey:</span><span class="s">@&quot;kIntervaloHora&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Guardamos el estado del UISwitch como un booleano</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="nl">setBool:</span><span class="n">self</span><span class="p">.</span><span class="n">switchMsg</span><span class="p">.</span><span class="n">on</span> <span class="nl">forKey:</span><span class="s">@&quot;kMostrarMensaje&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Guardamos el nombre que hemos definido</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="nl">setObject:</span><span class="n">self</span><span class="p">.</span><span class="n">txtNombre</span><span class="p">.</span><span class="n">text</span> <span class="nl">forKey:</span><span class="s">@&quot;kMiNombre&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// sincronizamos la caché y la base de datos</span>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="c1">// cerramos la ventana modal</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="nl">dismissModalViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Aquí usamos nuevamente métodos de conveniencia, los cuales tienen la forma: <code>set<em><strong>Tipo</strong></em>:forKey:</code>, donde <strong><em>tipo</em> </strong>puede ser de los tipos escalares (<code>integer</code>, <code>float</code>, <code>bool</code> o <code>double</code>), <code>NSUrl</code> u <code>object</code> para cualquier otro tipo de objeto de los mencionados más arriba.</p><p>Si nos fijamos, también tenemos redefinido el método <code>viewDidLoad:</code> como pasó en el controlador de la pantalla principal. Hacemos lo mismo, cargar los datos guardados para mostrarlos en la pantalla de preferencias.</p><h2>Registrando preferencias por defecto</h2><p>Eso sería todo con respecto a guardar y obtener datos de la base de datos del <strong>User Default System</strong>. No obstante he querido explicar brevemente como registrar preferencias por defecto para nuestra aplicación. Por ejemplo si es la primera vez que la ejecutamos, probablemente nos gustaría que la base de datos ya tenga unos valores almacenados por defecto. Esto lo hacemos en el método <code>application:didFinishLaunchingWithOptions:</code> del controlador principal <em>AppDelegate</em>, que es llamado inmediatamente después de terminar de cargar la aplicación:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">defaults</span> <span class="nl">boolForKey:</span><span class="s">@&quot;kValoresGuardados&quot;</span><span class="p">])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">defaultValues</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                                   <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">1.0</span><span class="p">],</span> <span class="s">@&quot;kIntervaloHora&quot;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="s">@&quot;kMostrarMensaje&quot;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="s">@&quot;ThXou&quot;</span><span class="p">,</span> <span class="s">@&quot;kMiNombre&quot;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="nb">nil</span><span class="p">,</span> <span class="s">@&quot;kUltimaVisita&quot;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="s">@&quot;kValoresGuardados&quot;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">defaults</span> <span class="nl">registerDefaults:</span><span class="n">defaultValues</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Al método <code>registerDefaults:</code> le pasamos un diccionario con los valores y las keys que queremos tener por defecto en nuestra base de datos al inicio de la aplicación. Es importante tener en cuenta de que para los valores de tipo escalar tenemos que usar instancias de <code>NSNumber</code> como se puede observar en el código. He añadido una nueva <em>key</em> llamada <code>@"kValoresGuardados"</code> para evitar que nos vuelva a guardar estos mismos valores cada vez que iniciemos la aplicación y que solo lo haga la primera vez.</p><h2>Y ahora que?</h2><p>Hoy hemos aprendido a usar la clase <code>NSUserDefaults</code> para a asignar preferencias y configuraciones por defecto para nuestra aplicación, así como una serie de métodos para interactuar con el <strong>User Default System</strong>. Para continuar aprendiendo sobre este tema te recomiendo que te pases <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSUserDefaults_Class/Reference/Reference.html">por la documentación de Apple</a> acerca de esta clase y hagas todas las pruebas posibles hasta que entiendas correctamente su funcionamiento.</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/9bfb660d5c26adf2f1c1"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[iOS: Aprendiendo sobre delegación, protocolos y la clase UIAlertView]]></title>
    <link href="http://www.thxou.com/2012/04/29/aprendiendo-sobre-delegacion-protocolos-y-la-clase-uialertview/"/>
    
    <updated>2012-04-29T21:25:25+02:00</updated>
    <id>http://www.thxou.com/2012/04/29/aprendiendo-sobre-delegacion-protocolos-y-la-clase-uialertview</id>
    
    <content type="html"><![CDATA[<p>En esta ocasión he querido hablar sobre la <code>delegacion</code>, un patrón muy común en Cocoa Touch que a muchos principiantes se nos puede atragantar, como ha sido mi caso. Es en si un concepto muy sencillo de entender, pero claro está, dependiendo de quien te lo explique. Espero explicarlo bien para que todos lo puedan entender, si no es así, decídmelo en los comentarios.</p><p>El concepto <code>delegación</code> en Cocoa Touch se refiere especificamente a que tu &#8220;delegas&#8221; a un objeto y lo dotas con la capacidad de responder a ciertos eventos ocurridos en otro objeto en particular. Este concepto es facilmente comprensible si lo miras desde el punto de vista de la necesidad que hay de que &#8220;alguien&#8221; deba recibir y manipular la información de ciertos eventos en ciertos objetos. Un ejemplo claro lo vemos en el GPS. Como podemos saber si el GPS ya encontró nuestra localización?, la información devuelta por el GPS está allí, pero alguien tiene que recibirla y trabajar con ella para poder mostrar esa localización. Pues, ese alguien es el delegado. El proceso de delagación se hace a través de la <strong><em>propiedad</em> <code>delegate</code></strong>. Esta propiedad no es común en todas las clases, solo algunas como <code>UIAccelerometer</code>, <code>UIActionSheet</code>, <code>CLLocationManager</code>, etc. la tienen ya que emiten mensajes para sus eventos. Entonces, asignamos a la <em>propiedad</em> <code>delegate</code> de un objeto la clase que queremos que sea la encargada de manipular los eventos de ese objeto y listo, el delegado ya está preparado para recibirlos y manipularlos.</p><p>Los eventos están representados en código a través de funciones (Métodos) las cuales son llamadas cada vez que el evento ocurre. El objeto delegado se encarga de implementar estas funciones para la cantidad de eventos que se envían dependiendo de cada objeto. Cada objeto delegado solo puede recibir mensajes para eventos de un solo objeto en particular, y estos pueden ser más de uno.</p><h2>Aplicación práctica</h2><p>Well. Siguiendo con mi idea de que todo se aprende mejor si lo llevamos a la práctica, he desarrollado una pequeña aplicación que utiliza la clase <code>UIAlertView</code> para mostrar una ventana como la que vimos en la <a title="Programando notificaciones locales con UILocalNotification" href="http://www.thxou.com/2012/01/31/programando-notificaciones-locales-con-uilocalnotification/">entrada anterior sobre notificaciones locales</a>. Esta ventana tiene unos botones, al presionarlos se altera el texto que hay en una etiqueta (<code>UILabel</code>) que está en la vista principal. Así de sencillo.</p><p>La clase <code>UIAlertView</code> nos permite representar una ventana de alerta en una vista en concreto y lo hacemos así:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">ventana</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;Mi Ventana&quot;</span>
</span><span class='line'>                                                      <span class="nl">message:</span><span class="s">@&quot;Aprendiendo sobre delegación en thxou.com&quot;</span>
</span><span class='line'>                                                     <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                            <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;Cancelar&quot;</span>
</span><span class='line'>                                            <span class="nl">otherButtonTitles:</span><span class="s">@&quot;Limpiar Etiqueta!&quot;</span><span class="p">,</span> <span class="s">@&quot;Opción 1&quot;</span><span class="p">,</span> <span class="s">@&quot;Opción 2&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>El método <code>initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles</code> se encarga de crear el objeto llamado <code>ventana</code>, que es una instancia de <code>UIAlertView</code>, con una información por defecto. Pues bien, <code>ventana</code> tiene botones y al presionarlos se envía el mensaje <code><a href="http://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UIAlertViewDelegate_Protocol/UIAlertViewDelegate/UIAlertViewDelegate.html#//apple_ref/occ/intfm/UIAlertViewDelegate/alertView:clickedButtonAtIndex:">alertView:clickedButtonAtIndex:</a>.</code>Cuando este mensaje es enviado se ejecuta el comportamiento por defecto que es simplemente cerrar la ventana de alerta.</p><p>Vamos a fijarnos en la etiqueta <code>delegate</code> del método en el código de arriba. Sabemos que pulsar un botón en la ventana es un evento que dispara el mensaje <code><a href="http://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UIAlertViewDelegate_Protocol/UIAlertViewDelegate/UIAlertViewDelegate.html#//apple_ref/occ/intfm/UIAlertViewDelegate/alertView:clickedButtonAtIndex:">alertView:clickedButtonAtIndex:</a></code>. Bien, al asignar <em>self</em> a la etiqueta <code>delegate</code> le estamos diciendo a <code>ventana</code> cual va a ser el encargado de gestionar sus eventos, en nuestro caso (Y como veréis en la mayoría de los casos) es <em>self</em>, nuestra misma clase <code>ViewController</code>.</p><p>[note]Veremos que en la mayoría de los casos el delegado es asignado de esta manera:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">objeto</span> <span class="nl">setDelegate:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'><span class="c1">//O también</span>
</span><span class='line'><span class="n">objeto</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<p>Este código cumple la misma función que en nuestro ejemplo.<br /> [/note]</p><p>Ya que no queremos que al presionar los botones se ejecute el comportamiento por defecto, nuestra clase <code>ViewController</code> necesita implementar este método disparado por el evento y así le decimos a <code>ventana</code> que hacer cuando se presione un botón.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">alertView:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span> <span class="nf">clickedButtonAtIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">buttonIndex</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">buttonIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">mensaje</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">mensaje</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Haz seleccionado la opción 1&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">mensaje</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Haz seleccionado la opción 2&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>La variable buttonIndex contiene los indices para cada uno de los botones que contiene la ventana de alerta. Así que podemos hacer cosas diferentes dependiendo de el &#8220;caso&#8221;.</p><p>Este método, como ya hemos explicado, no es de nuestro delegado, simplemente estamos habilitados para personalizar la respuesta a un evento usando este método, pero no lo creamos nosotros ni definimos la cabecera del método. Por lo tanto el compilador nos va a lanzar una excepción al momento de compilar el código y la aplicación va a petar. Para evitar esto, tenemos que hacer que nuestro delegado &#8220;sea conforme&#8221; al protocolo donde está definido este método (relacionado a un evento) y todos los disparados por la ventana de alerta.</p><p style="text-align: center;"><a href="http://www.thxou.com/wp-content/uploads/2012/04/grafic-delegation.png"><img class=" wp-image-2185 aligncenter" title="grafic-delegation" src="http://www.thxou.com/wp-content/uploads/2012/04/grafic-delegation.png" alt="" width="463" height="248" /></a></p><p style="text-align: center;"><small>Representación del patrón delegate</small></p><p><strong>Los protocolos son simples listas de métodos sin implementar</strong>. No son clases, pero si heredan de clases, tampoco podemos hacer instancias de ellos ni crear variables de instancia dentro de ellos. Sus métodos son implementados en las clases que &#8220;son conformes&#8221; a ese protocolo. Un <strong>protocolo delegado</strong> es aquel usado para la delegación, y en nuestro caso vamos a necesitar el protocolo delegado de <code>UIAlertView</code> que implementa el método <code><a href="http://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UIAlertViewDelegate_Protocol/UIAlertViewDelegate/UIAlertViewDelegate.html#//apple_ref/occ/intfm/UIAlertViewDelegate/alertView:clickedButtonAtIndex:">alertView:clickedButtonAtIndex:</a></code>, y este es: <code>UIAlertViewDelegate</code>. Cuando ocurre un evento en el objeto, se envía el mensaje correspondiente del protocolo delegado.</p><p>En un <strong>protocolo delegado</strong> podemos encontrarnos 2 tipos de métodos. Unos manipulan actualizaciones de información, como por ejemplo en el caso del GPS al principio, la localización será diferente siempre que te muevas, por lo tanto el método devolverá información diferente cada vez; Y otros, se envían como respuestas a entradas del usuario, como en nuestro caso, cuando el usuario pulsa un botón de la ventana de alerta. Hay algunos métodos que podrían entrar en una tercera categoría, y es el caso de <code><a href="http://developer.apple.com/library/ios/DOCUMENTATION/UIKit/Reference/UIAlertViewDelegate_Protocol/UIAlertViewDelegate/UIAlertViewDelegate.html#//apple_ref/occ/intfm/UIAlertViewDelegate/alertViewShouldEnableFirstOtherButton:">alertViewShouldEnableFirstOtherButton:</a></code>. En este método, la ventana de alerta pregunta al delegado si tiene que mostrar habilitado o deshabilitado el primero de los botones. La respuesta del delegado puede ser simplemente <code>YES</code> o <code>NO</code>. En nuestro caso he puesto <code>NO</code>, para que veas el comportamiento que tiene este método.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">alertViewShouldEnableFirstOtherButton:</span><span class="p">(</span><span class="n">UIAlertView</span> <span class="o">*</span><span class="p">)</span><span class="nv">alertView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Ya solo nos queda hacer que nuestro delegado &#8220;sea conforme&#8221; a <code>UIAlertViewDelegate</code>. Esto lo hacemos en la cabecera de nuestra clase ViewController.h en la declaración <code>@interface</code>, entre signos de mayor y menor.</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UIViewController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">UIAlertViewDelegate</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">@private</span>
</span><span class='line'>    <span class="n">UILabel</span> <span class="o">*</span><span class="n">mensaje</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>He creado una etiqueta <code>UILabel</code> para mostrar mensajes dependiendo de que botón ha sido pulsado llamada: <code>mensaje</code>.</p><p>Listo, ya hemos terminado. Yo te recomiendo que analices el código y hagas cambios, muchos cambios, para que veas como funciona la clase y su protocolo delegado. Encontrarás enlaces a la documentación de Apple sobre este tema más abajo. En esta misma aplicación de ejemplo intenta añadir más métodos de <code>UIAlertViewDelegate</code> y así saber como funcionan.</p><p>Espero haberte ayudado a comprender este tema. Cualquier duda o sugerencia utiliza los comentarios.</p><p><a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIAlertView_Class/UIAlertView/UIAlertView.html">UIAlertView</a> | <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/UIAlertViewDelegate_Protocol/UIAlertViewDelegate/UIAlertViewDelegate.html">UIAlertViewDelegate</a></p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/7f6fa46bc386d08c6100"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[iOS: Programando notificaciones locales con UILocalNotification]]></title>
    <link href="http://www.thxou.com/2012/01/31/programando-notificaciones-locales-con-uilocalnotification/"/>
    
    <updated>2012-01-31T03:02:05+01:00</updated>
    <id>http://www.thxou.com/2012/01/31/programando-notificaciones-locales-con-uilocalnotification</id>
    
    <content type="html"><![CDATA[<p><img class="alignright" title="notifyme-thxou.com" src="http://www.thxou.com/wp-content/uploads/2012/01/Screen-shot-2012-01-30-at-20.05.49.png" alt="" width="310" height="264" />Aquí estamos otra vez con un nuevo tutorial. Esta vez intentaré explicarles de manera teórica y práctica el proceso para programar una notificación local. Es relativamente sencillo de implementar y hay pocas opciones que configurar. La clase <code>UILocalNotification</code> te permite representar notificaciones locales como la de la imagen (similares a las notificaciones Push que trabajan con un servidor externo, no hablaremos de esto ahora), que tu aplicación podría programar para que sean presentadas a tus usuarios en una fecha y hora determinadas. El sistema operativo es el encargado de gestionar estas notificaciones y permite programar hasta <strong>64 notificaciones</strong> por aplicación. Esta clase adopta el protocolo <code>NSCopying</code>, y una de sus ventajas es que nos permite copiar notificaciones ya programadas, también modificarlas y cancelarlas. Todo en el cuadro de notificación, excepto el color, se puede personalizar al completo: puedes definir un título, el texto de la notificación, cuantos botones va a tener, un sonido personalizado el cual se reproduzca al mostrarse, etc. Todas estas opciones las vamos a aprender a configurar nosotros mismos a continuación con un ejemplo práctico.</p><h2>Llevándolo a la práctica</h2><p>He creado otra mini-app llamada notifyme que te puedes descargar desde el botón enorme del final de este artículo (Muy recomendado descargarla y seguir el toturial con ella). Lo que vas a aprender con esta app es a <strong>programar una notificación local con configuraciones personalizadas y recibir un texto juntamente con la notificación para mostrarla al usuario</strong>, en este caso, la mostraremos en un cuadro de texto de la pantalla principal, pero también se podría mostrar como una alerta.</p><p>Abrimos la aplicación en Xcode y en el <em>Project Navigator </em>podemos ver nuestro controlador de la aplicación: AppDelegate.h y .m, y también el controlador de la vista principal ViewController.h y .m. Abrimos el ViewController.m y nos vamos al método:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">programarNotificacion</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">localNot</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILocalNotification</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">fireDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">pickerCaducidad</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">timeZone</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimeZone</span> <span class="n">defaultTimeZone</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">alertBody</span> <span class="o">=</span> <span class="s">@&quot;Mi primera notificación&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">alertAction</span> <span class="o">=</span> <span class="s">@&quot;Mostrar&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">soundName</span> <span class="o">=</span> <span class="n">UILocalNotificationDefaultSoundName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">applicationIconBadgeNumber</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">userDict</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">textoNotificacion</span><span class="p">.</span><span class="n">text</span> <span class="nl">forKey:</span><span class="n">kNotificationTextKey</span><span class="p">];</span>
</span><span class='line'>    <span class="n">localNot</span><span class="p">.</span><span class="n">userInfo</span> <span class="o">=</span> <span class="n">userDict</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">scheduleLocalNotification:</span><span class="n">localNot</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">localNot</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Este método es la parte principal de nuestra aplicación ya que es el que va a programar la notificación, así que voy a explicarles las partes que lo componen y su configuración.</p><p>Como ya sabemos, para trabajar con clases hay que hacerlo a través de objetos, y estos objetos los creamos a través de instancias de clases, así que lo que hacemos primero es crear una instancia de la clase <code>UILocalNotification</code> llamada &#8221;<em>localNot</em>&#8221;. Esta instancia va a representar esta notificación en la cola de notificaciones del sistema operativo. Bien, este objeto tiene las siguientes propiedades:</p><ul><li><strong>fireDate:</strong> La fecha y hora exacta en la que deseamos mostrar la notificación.</li><li><strong>timeZone:</strong> Trabaja juntamente con fireDate y sirve para que la notificación se muestre adaptada para una zona horaria específica. Nosotros usamos <code>defaultTimeZone</code> que utiliza la zona horaria de la aplicación.</li><li><strong>alertBody:</strong> Es el cuerpo del mensaje que se muestra junto con la notificación.</li><li><strong>alertAction:</strong> Es el texto del botón de acción. En la imagen dice &#8221;<em>Mostrar</em>&#8221; y al pulsarlo va a abrir la aplicación.</li><li><strong>soundName:</strong> El sonido personalizado que quieres que se reproduzca al mostrarse la notificación. <code>UILocalNotificationDefaultSoundName</code> espeficica el sonido por defecto del sistema, pero podemos poner el que nosotros queramos, siempre y cuando dure <strong>30 segundos</strong> y sean de formato <code>aiff</code>, <code>wav</code> o <code>caf.</code></li><li><strong>applicationIconBadgeNumber:</strong> Si os habéis fijado, hay aplicaciones que muestran un circulo rojo en la parte superior derecha del icono de la app. A esto se refiere esta propiedad. Es un entero de tipo <code>NSInteger</code> al que podemos asignarle un número.</li><li><strong>userInfo:</strong> Esta propiedad es un diccionario tipo <code>NSDictionary</code>, en la que podemos guardar información para luego recuperarla cuando se muestre nuestra app después de presionar el botón de acción.</li></ul><p>Existen otras propiedades más, aparte de las usadas en esta aplicación, algunas un poco menos importantes pero que te las explico en una línea:</p><ul><li><strong>repeatInterval:</strong> Sirve para reprogramar la notificación en un intervalo de tiempo específico.</li><li><strong>repeatCalendar:</strong> El calendario en el que la aplicación se basará para reprogramar la notificación.</li><li><strong>hasAction:</strong> Es un propiedad de tipo <code>BOOL</code>, que especifica si se muestra o no el botón de acción.</li><li><strong>alertLaunchImage:</strong> La imagen que se muestra inmediatamente cuando se presiona el botón de acción.</li></ul><p>Aquí cabe explicar un poco el campo <strong>userInfo</strong>. Yo he creado una constante a la que he llamado <strong><code>kNotificationTextKey</code></strong> para usarla como el texto que quiero que acompañe a la notificación. La he declarado en el AppDelegate.h y luego asignado un string que es el nombre con el que se guardará juntamente con la aplicación. También la he declarado como <strong><code>extern</code></strong>, para que esté disponible fuera de la clase AppDelegate. Como podéis ver, el valor de esta constante es el que escribimos en el UITextField de la interfaz gráfica (textoNotificacion).</p><p>Explicado esto, es el momento de <strong>enviar la notificación (nuestro objeto &#8221;<em>localNot</em>&#8221;) al sistema operativo</strong> para que la gestione. Para esto utilizamos un método de la clase <code>UIApplication</code> llamado <code>scheduleLocalNotification:localNot</code>. Este método utiliza el valor del campo <strong>fireDate</strong> para programar la notificación y que se muestre en una fecha y hora concretas. Otro método que también interesa es <code>presentLocalNotificationNow:</code>, el cual muestra la notificación inmediatamente por pantalla.</p><p>En este mismo archivo podemos ver el método: <strong><code>-(IBAction)prepararNotificacion:(id)sender</code></strong>. Lo que va a hacer es, a parte de ejecutar el método de arriba, cancelar todas las notificaciones programadas anteriormente utilizando el método de  <code>UIApplication</code> llamado <code>cancelAllLocalNotifications</code>. Si por el contrario, solo queremos hacerlo para una notificación específica utilizaremos <code>cancelLocalNotification:localNot</code>.</p><h2>Mostrando la notificación</h2><p>Vale, ya hemos programado  la notificación, ahora nos toca recibir y manipular la información que trae consigo la notificación cuando se muestra, así podemos personalizarla más a nuestro gusto. Hay <strong>2 estados</strong> en los que podría encontrarse la aplicación al recibir la notificación: <strong>cuando está visible y cuando está cerrada</strong>. Como ya sabemos, al presionar en el botón de acción (o deslizar el dedo cuando el dispositivo está bloqueado) se abre la aplicación, al abrirse, dependiendo de en cual de estos 2 estados se encuentra, se ejecutan 2 métodos de UIApplication. Estos métodos los podemos encontrar ya implementados en el archivo del controlador principal de la aplicación <strong>AppDelegate.m</strong>. Si la aplicación no está visible se ejecuta el método <code>application:didFinishLaunchingWithOptions:</code>. El siguiente código es lo que he añadido al predeterminado para manipular los datos de la notificación:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="c1">//Notificaciones</span>
</span><span class='line'>    <span class="n">application</span><span class="p">.</span><span class="n">applicationIconBadgeNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UILocalNotification</span> <span class="o">*</span><span class="n">notification</span> <span class="o">=</span> <span class="p">[</span><span class="n">launchOptions</span> <span class="nl">objectForKey:</span>
</span><span class='line'>                                         <span class="n">UIApplicationLaunchOptionsLocalNotificationKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">notification</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">reminderText</span> <span class="o">=</span> <span class="p">[</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span>
</span><span class='line'>                                  <span class="nl">objectForKey:</span><span class="n">kNotificationTextKey</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">_viewController</span> <span class="nl">despliegaNotificacion:</span><span class="n">reminderText</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Nota que el método tiene un parámetro llamado <code>launchOptions</code>. Este parámetro es un diccionario (<code>NSDictionary</code>) que lleva consigo información acerca del porque de que se haya abierto la aplicación. En este caso, cuando uno de los motivos es una notificación, esta se guarda en una constante del sistema designada para esto: <code>UIApplicationLaunchOptionsLocalNotificationKey</code>. Si esta constante contiene la notificación, entonces este ha sido el motivo de su apertura, así que guardamos esta notificación en un puntero que hemos llamado &#8221;<em>notification</em>&#8221;. Si os acordáis, antes guardamos un texto en la constante <strong><code>kNotificationTextKey</code></strong>, por lo que ahora lo recuperamos en el string <code>reminderText</code>.</p><p>Si se da el otro caso, en el que la aplicación está visible entonces se ejecuta otro método de <code>UIApplication</code> llamado <code>application:didReceiveLocalNotification:</code>. No se muestran alertas ni se reproducen sonidos, pero si se puede tratar con la información que viene con la notificación:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didReceiveLocalNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="n">application</span><span class="p">.</span><span class="n">applicationIconBadgeNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="n">NSString</span> <span class="o">*</span><span class="n">reminderText</span> <span class="o">=</span> <span class="p">[</span><span class="n">notification</span><span class="p">.</span><span class="n">userInfo</span>
</span><span class='line'>                              <span class="nl">objectForKey:</span><span class="n">kNotificationTextKey</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">_viewController</span> <span class="nl">despliegaNotificacion:</span><span class="n">reminderText</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Aquí hacemos similar al anterior método. Quitamos el <code>badgeNumber</code> y luego recuperamos el texto de la constante <code>kNotificationTextKey</code> en el string <code>reminderText</code>.</p><p>No obstante, y para finalizar, la siguiente línea:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="p">[</span><span class="n">_viewController</span> <span class="nl">despliegaNotificacion:</span><span class="n">reminderText</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>
<p>Utiliza el objeto <code>_viewController</code>, creado automáticamente por Xcode al crear un nuevo proyecto, para comunicarse con el controlador de nuestra vista principal (ViewController.h y .m), cuya clase tiene implementado el método <strong><code>despliegaNotificacion:</code></strong>, todo esto con el fin de mostrarnos el texto recuperado en <code>reminderText</code> en la pantalla principal.</p><p>Pongan en marcha la aplicación para verla en funcionamiento. No temas cambiar el código y probar tus propias ideas. Hazlo, y si sale mal entonces aprende de tus errores. Si bien es cierto este tutorial se pudo haber hecho en menos palabras, he querido detallarlo para que puedan comprender realmente como funciona. Si me dejo algo, o digo algo en lo que me estoy equivocando, agradecería mucho vuestro feedback :). Disfruten y compartan este artículo. Hasta otra!.</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/s2oi1l7m4zhyvipv7kl6"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Programando para iOS: Patrón de diseño MVC al detalle]]></title>
    <link href="http://www.thxou.com/2011/11/04/programando-para-ios-patron-de-diseno-mvc/"/>
    
    <updated>2011-11-04T02:27:39+01:00</updated>
    <id>http://www.thxou.com/2011/11/04/programando-para-ios-patron-de-diseno-mvc</id>
    
    <content type="html"><![CDATA[<p>Hola denuevo readers!. He querido cambiar un poco el chip y centrarme en lo que más me llena en este mundillo de la informática: La programación. Es por eso que empiezo esta serie de posts dedicados a la programación para diversas plataformas. En la que más me voy a centrar es en iOS para iPhone, iPod y iPad, ya que indagando un poco me ha llamado muchísimo la atención. También encontrarán tutoriales de PHP, SQL, JavaScript, Android, etc etc, así que manténganse al tanto del blog que va a estar muy interesante.</p><p>Sin más que decir, empecemos. Existen muchos patrones de diseño para organizar el código y la forma de programar aplicaciones. En la programación <strong>para iOS utilizaremos el MVC o Model View Controller (Modelo-Vista-Controlador)</strong>.</p><p>He querido empezar con esto porque es un tema que, aunque a muchos os ha sido fácil de entender, a mi no, así que lo haré lo más entendible posible para que no tengan que volver a leer sobre este tema en el futuro.</p><p>Principalmente consiste en dividir tu aplicación en estas 3 capas. Cada clase que escribas, botón que pongas en el Interface Builder, o trozo de código que tengas que escribir, va a pertenecer a alguna de estas 3 capas.</p><p style="text-align: center;"><img class="alignnone size-full wp-image-2118" title="MVC" src="http://www.thxou.com/wp-content/uploads/2011/11/MVC.png" alt="MVC-thxou.com" width="430" height="360" /></p><p><strong>La Vista</strong> es todo lo que tu puedes ver de la aplicación y con la que el usuario puede interactuar, dentro de esta encontramos los botones, labels, campos de texto, etc; en general, la mayoría de los objetos que son subclases de UIView (También las clases predefinidas por el usuario).</p><p><strong>El Modelo</strong> incluye objetos que nos permiten almacenar y manipular datos. Esto no tiene nada que ver con la interfaz de usuario y le dice a la aplicación como llevar a cabo tal o cual tarea, o también que características van a tener ciertos objetos.</p><p><strong>El Controlador</strong> es el cerebro de este patrón de diseño. Este va a hacer trabajar a la vista y el modelo en sincronización para que tu puedas ver cosas en la pantalla o para que al presionar un botón, sea efectuada alguna acción.</p><p>El MVC se explica mejor con la imagen:</p><ul><li>El usuario interactua con la aplicación y la vista (U objeto de la vista) a través de la interfaz de usuario.</li><li>La vista le envía un mensaje al controlador diciendole por ejemplo que hemos presionado un botón y queremos que esto responda a alguna acción.</li><li>El controlador recibe el mensaje y contacta con el modelo para realizar la acción y actualizar la información pertinente.</li><li>El controlador recoge la información requerida por la vista pero actualizada por el modelo y por ultimo actualiza la vista con los cambios que  se han hecho en el modelo.</li></ul><p>Sencillo verdad?. Si te das cuenta el modelo no contacta directamente con el controlador, sino que es este quien manipula e interpreta los datos del modelo, los recoge y procede a actualizar la vista.</p><p>Es muy necesario tener en cuenta las siguientes reglas:</p><ul><li>El controlador puede comunicarse con el Modelo y la Vista directamente.</li><li>La capa Modelo y la capa Vista no se pueden comunicar entre si.</li><li>La capa Vista no se comunica directamente con el controlador, pero si interactuan de alguna forma, a través de acciones como veremos un poco más adelante en esta entrada.</li><li>El Modelo no se puede comunicar directamente con su el Controlador, pero si pueden comunicarse con otras capas Modelo de otros MVC.</li><li>Puede existir también comunicación entre distintos Controladores.</li></ul><p>Si alteras alguna de estas reglas ya no existiría el patrón de diseño MVC.</p><h2>Aplicación práctica</h2><p>Como todo lo que se aprende a nivel practico se aprende más rápido y mejor, he creado un proyecto muy simple para explicar un poco este patrón de diseño MVC, esta mini aplicación muestra por pantalla 2 textos al presionar un botón. Puedes descargar el proyecto desde <a href="http://www.box.net/shared/26lmhu53g5hnzubajfuh">este enlace</a> y seguir este post juntamente. He utilizado la plantilla View-Based Application (Single View Application en XCode 4.2).</p><p>Al abrir el proyecto verás en el panel de más a tu izquierda (<em>Project Navigator</em>: Es importante que te vayas quedando con estos nombres) la lista de los archivos que componen tu proyecto. Lo que salta a simple vista es una clase llamada <strong>MVCAppDelegate.h y .m</strong> (AppDelegate.h si usas XCode 4.2). Esta clase es el controlador de la aplicación y se encarga de cargar la vista por defecto y la aplicación en si. Bien, si abrimos el AppDelegate.h veremos esto si usas XCode 4.2:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &amp;lt;UIKit/UIKit.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@class</span> <span class="nc">ViewController</span>;
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">AppDelegate</span> : <span class="nc">UIResponder</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">UIApplicationDelegate</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIWindow</span> <span class="o">*</span><span class="n">window</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">ViewController</span> <span class="o">*</span><span class="n">viewController</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
<p>De momento vamos a dejar de lado algunas cosas de este código porque las explicaré en entradas posteriores.</p><p>Ya podemos empezar a identificar objetos. <code>UIWindow</code> es una clase perteneciente al UIKit Framework y que define un objeto ventana (En este caso la variable <code>*window</code>) de la interfaz de usuario (De ahí las iniciales &#8220;UI&#8221; de User Interface). Cada aplicación va a tener por lo general un solo objeto de estos. Por eso este objeto, al ser de la interfaz de usuario, pertenece a la parte de la Vista del MVC.</p><p>Si volvemos al <em>Project Navigator</em> veremos una clase llamada &#8220;ViewController&#8221;. Como su mismo nombre lo indica es un controlador, y es para una vista específica, en este caso la vista principal que verás al arrancar la aplicación.<br /> [nota]<br /> <strong>NOTA:</strong> Con respecto a los nombres para los controladores, es muy recomendable que el nombre incluya al final las palabras &#8221;<strong>Controller</strong>&#8221; o &#8221;<strong>View Controller</strong>&#8221; ya que esto te va a permitir organizar mejor tu <em>Project Navigator</em> y ubicar más rápido tus archivos para editarlos. Por lo general (por no decir siempre) te vas a encontrar con proyectos en que los controladores tienen nombres como: ListasViewController o GameController. Si son proyectos muy grandes, vas a agradecer que se nombren los controladores de esta manera, te liarás menos :).<br /> [/nota]<br /> Abrimos el archivo de cabecera de nuestro controlador: <strong>MVCViewController.h</strong>, y veremos el siguiente código:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &amp;lt;UIKit/UIKit.h&amp;gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">MVCViewController</span> : <span class="nc">UIViewController</span> <span class="p">{</span>
</span><span class='line'>	<span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">textos</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>	<span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">texto1</span><span class="p">;</span>
</span><span class='line'>	<span class="kt">IBOutlet</span> <span class="n">UILabel</span> <span class="o">*</span><span class="n">texto2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">mostrarTextos:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>
<p>El Modelo suele utilizar objetos de colección como los <code>NSArray o NSDictionary</code> o los tipos como <code>NSString o NSNumber</code>, en nuestra aplicación podemos identificar como parte del modelo al objeto <code>*textos</code> de la clase NSMutableArray. También tenemos 2 objetos <code>UILabel</code>que corresponden a la interfaz de usuario y forman parte de la capa Vista. Los nombres de las clases personalizadas para la Vista suelen terminar con la palabra &#8221;<strong>View</strong>&#8221; como por ejemplo: GhaphicView, y eso por la misma razón que para los controladores. Estos también pertenecen a la capa Vista.</p><p>La comunicación entre la capa controlador y la capa vista es ciega. Como puedes ver en el código, a los UILabel les precede una macro llamada <code>IBOutlet</code>, esta les permite conectarse con el controlador para así poder enviarle acciones. Los objetos de la vista no tienen control sobre que hacer sobre si, así que envían acciones al controlador cuando algo ocurre, por ejemplo cuando se presiona un botón como en nuestro caso con el método <code>mostrarTextos:sender</code>.</p><p>A veces, la capa Vista necesita responder a ciertos eventos como por ejemplo cuando un campo de texto se ha empezado a editar. Como la Vista no tiene control sobre si misma, necesita del controlador para que responda por ella, entonces el controlador se asigna a si mismo como delegado (Veremos estos conceptos más adelante) de la vista (Todo esto a través de protocolos) y si está preparado para responder (Tiene los métodos adecuados correctamente implementados), responde.</p><p>Si abrimos el archivo de implementación: <strong>MVCViewController.m</strong>, podremos ver el método <code>mostrarTextos:sender</code>:</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Método que va a mostrar los textos</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">mostrarTextos:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//Inicializamos en un array los 2 textos a mostrar</span>
</span><span class='line'>    <span class="n">textos</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithObjects:</span><span class="s">@&quot;Texto de ejemplo para MVC&quot;</span><span class="p">,</span> <span class="s">@&quot;MVC mola cuando lo entiendes&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">txt1</span> <span class="o">=</span> <span class="p">[</span><span class="n">textos</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">txt2</span> <span class="o">=</span> <span class="p">[</span><span class="n">textos</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">texto1</span> <span class="nl">setText:</span><span class="n">txt1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">texto2</span> <span class="nl">setText:</span><span class="n">txt2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>Al presionarse el botón se ejecuta la acción (En realidad se envía un mensaje y ya veremos esto en otro capítulo) <code>mostrarTextos:sender</code>. En esta acción el controlador toma los datos que tiene disponibles la capa Modelo, en este caso la información cargada en el objeto <code>NSMutableArray</code> llamado <code>textos</code> y entonces asigna los valores recogidos en variables temporales y las devuelve a la vista para que los textos sean mostrados. El objeto <code>UILabel</code> sabe mostrar texto, pero NO SABE que texto mostrar, de igual manera el <code>NSMutableArray</code> sabe almacenar datos, pero NO SABE que datos tiene que almacenar, es por eso que usamos el controlador para esto.</p><p>Recuerda respetar las reglas del MVC y así tus aplicaciones estarán bien estructuradas, de manera que cuando compartas tu código, este sea entendible.</p><p>Espero haberlos ayudado. Si me ha faltado algo, solo comentadlo. Puedes descargar los archivos del tutorial presionando el botón de abajo.</p><p style="text-align: center;"><a href="http://securelink.thxou.com/?https://www.box.com/s/26lmhu53g5hnzubajfuh"><img class="alignnone size-full wp-image-2134" title="boton-thxou.com" src="http://www.thxou.com/wp-content/uploads/2011/11/boton-thxou.png" alt="" width="256" height="52" /></a></p>]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Nos volvemos un blog de desarrollo y programación]]></title>
    <link href="http://www.thxou.com/2011/09/08/nos-volvemos-un-blog-de-desarrollo-y-programacion/"/>
    
    <updated>2011-09-08T01:02:05+02:00</updated>
    <id>http://www.thxou.com/2011/09/08/nos-volvemos-un-blog-de-desarrollo-y-programacion</id>
    
    <content type="html"><![CDATA[<p style="text-align: center;"><img class="alignnone size-full wp-image-2107" title="sdk-image" src="http://www.thxou.com/wp-content/uploads/2011/09/sdk_hero.png" alt="" width="196" height="187" /></p>
<p style="text-align: center;"></p>
Hola a todos los que me seguíais anteriormente. Debido a mi, en incremento, interés por la programación para iPhone, he decidido cambiar el tema del blog a programación. Compartiré con vosotros mis inquietudes, conocimientos, código de ejemplo y mucho más.

Espero vuestros comentarios, peticiones, tutoriales hechos por vosotros y todo lo relacionado con la programación para iPhone, iPod Touch y iPad.

Muy pronto el primer tutorial.

ThXou.
<p style="text-align: center;"></p>
<p style="text-align: center;"></p>]]></content>
    
  </entry>
  
</feed>